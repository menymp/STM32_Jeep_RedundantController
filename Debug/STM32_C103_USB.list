
STM32_C103_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005558  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005668  08005668  00015668  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800572c  0800572c  0001572c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c4  20000000  08005734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003b08  200001c4  080058f8  000201c4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003ccc  080058f8  00023ccc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002ac5b  00000000  00000000  000201ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000058af  00000000  00000000  0004ae48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a290  00000000  00000000  000506f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001010  00000000  00000000  0005a988  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001438  00000000  00000000  0005b998  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000aa6f  00000000  00000000  0005cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000512f  00000000  00000000  0006783f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006c96e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002fd4  00000000  00000000  0006c9ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001c4 	.word	0x200001c4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005650 	.word	0x08005650

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001c8 	.word	0x200001c8
 800014c:	08005650 	.word	0x08005650

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2f>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ec:	bf24      	itt	cs
 80008ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f6:	d90d      	bls.n	8000914 <__aeabi_d2f+0x30>
 80008f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800090c:	bf08      	it	eq
 800090e:	f020 0001 	biceq.w	r0, r0, #1
 8000912:	4770      	bx	lr
 8000914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000918:	d121      	bne.n	800095e <__aeabi_d2f+0x7a>
 800091a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091e:	bfbc      	itt	lt
 8000920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000924:	4770      	bxlt	lr
 8000926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092e:	f1c2 0218 	rsb	r2, r2, #24
 8000932:	f1c2 0c20 	rsb	ip, r2, #32
 8000936:	fa10 f30c 	lsls.w	r3, r0, ip
 800093a:	fa20 f002 	lsr.w	r0, r0, r2
 800093e:	bf18      	it	ne
 8000940:	f040 0001 	orrne.w	r0, r0, #1
 8000944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800094c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000950:	ea40 000c 	orr.w	r0, r0, ip
 8000954:	fa23 f302 	lsr.w	r3, r3, r2
 8000958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800095c:	e7cc      	b.n	80008f8 <__aeabi_d2f+0x14>
 800095e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000962:	d107      	bne.n	8000974 <__aeabi_d2f+0x90>
 8000964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000968:	bf1e      	ittt	ne
 800096a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000972:	4770      	bxne	lr
 8000974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800097c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_frsub>:
 8000984:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000988:	e002      	b.n	8000990 <__addsf3>
 800098a:	bf00      	nop

0800098c <__aeabi_fsub>:
 800098c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000990 <__addsf3>:
 8000990:	0042      	lsls	r2, r0, #1
 8000992:	bf1f      	itttt	ne
 8000994:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000998:	ea92 0f03 	teqne	r2, r3
 800099c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a4:	d06a      	beq.n	8000a7c <__addsf3+0xec>
 80009a6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009aa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ae:	bfc1      	itttt	gt
 80009b0:	18d2      	addgt	r2, r2, r3
 80009b2:	4041      	eorgt	r1, r0
 80009b4:	4048      	eorgt	r0, r1
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	bfb8      	it	lt
 80009ba:	425b      	neglt	r3, r3
 80009bc:	2b19      	cmp	r3, #25
 80009be:	bf88      	it	hi
 80009c0:	4770      	bxhi	lr
 80009c2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009da:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009de:	bf18      	it	ne
 80009e0:	4249      	negne	r1, r1
 80009e2:	ea92 0f03 	teq	r2, r3
 80009e6:	d03f      	beq.n	8000a68 <__addsf3+0xd8>
 80009e8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ec:	fa41 fc03 	asr.w	ip, r1, r3
 80009f0:	eb10 000c 	adds.w	r0, r0, ip
 80009f4:	f1c3 0320 	rsb	r3, r3, #32
 80009f8:	fa01 f103 	lsl.w	r1, r1, r3
 80009fc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a00:	d502      	bpl.n	8000a08 <__addsf3+0x78>
 8000a02:	4249      	negs	r1, r1
 8000a04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a0c:	d313      	bcc.n	8000a36 <__addsf3+0xa6>
 8000a0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a12:	d306      	bcc.n	8000a22 <__addsf3+0x92>
 8000a14:	0840      	lsrs	r0, r0, #1
 8000a16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1a:	f102 0201 	add.w	r2, r2, #1
 8000a1e:	2afe      	cmp	r2, #254	; 0xfe
 8000a20:	d251      	bcs.n	8000ac6 <__addsf3+0x136>
 8000a22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2a:	bf08      	it	eq
 8000a2c:	f020 0001 	biceq.w	r0, r0, #1
 8000a30:	ea40 0003 	orr.w	r0, r0, r3
 8000a34:	4770      	bx	lr
 8000a36:	0049      	lsls	r1, r1, #1
 8000a38:	eb40 0000 	adc.w	r0, r0, r0
 8000a3c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	d1ed      	bne.n	8000a22 <__addsf3+0x92>
 8000a46:	fab0 fc80 	clz	ip, r0
 8000a4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a56:	bfaa      	itet	ge
 8000a58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a5c:	4252      	neglt	r2, r2
 8000a5e:	4318      	orrge	r0, r3
 8000a60:	bfbc      	itt	lt
 8000a62:	40d0      	lsrlt	r0, r2
 8000a64:	4318      	orrlt	r0, r3
 8000a66:	4770      	bx	lr
 8000a68:	f092 0f00 	teq	r2, #0
 8000a6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a70:	bf06      	itte	eq
 8000a72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a76:	3201      	addeq	r2, #1
 8000a78:	3b01      	subne	r3, #1
 8000a7a:	e7b5      	b.n	80009e8 <__addsf3+0x58>
 8000a7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a84:	bf18      	it	ne
 8000a86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8a:	d021      	beq.n	8000ad0 <__addsf3+0x140>
 8000a8c:	ea92 0f03 	teq	r2, r3
 8000a90:	d004      	beq.n	8000a9c <__addsf3+0x10c>
 8000a92:	f092 0f00 	teq	r2, #0
 8000a96:	bf08      	it	eq
 8000a98:	4608      	moveq	r0, r1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea90 0f01 	teq	r0, r1
 8000aa0:	bf1c      	itt	ne
 8000aa2:	2000      	movne	r0, #0
 8000aa4:	4770      	bxne	lr
 8000aa6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aaa:	d104      	bne.n	8000ab6 <__addsf3+0x126>
 8000aac:	0040      	lsls	r0, r0, #1
 8000aae:	bf28      	it	cs
 8000ab0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab4:	4770      	bx	lr
 8000ab6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aba:	bf3c      	itt	cc
 8000abc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac0:	4770      	bxcc	lr
 8000ac2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	4770      	bx	lr
 8000ad0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad4:	bf16      	itet	ne
 8000ad6:	4608      	movne	r0, r1
 8000ad8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000adc:	4601      	movne	r1, r0
 8000ade:	0242      	lsls	r2, r0, #9
 8000ae0:	bf06      	itte	eq
 8000ae2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ae6:	ea90 0f01 	teqeq	r0, r1
 8000aea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_ui2f>:
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e004      	b.n	8000b00 <__aeabi_i2f+0x8>
 8000af6:	bf00      	nop

08000af8 <__aeabi_i2f>:
 8000af8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000afc:	bf48      	it	mi
 8000afe:	4240      	negmi	r0, r0
 8000b00:	ea5f 0c00 	movs.w	ip, r0
 8000b04:	bf08      	it	eq
 8000b06:	4770      	bxeq	lr
 8000b08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	e01c      	b.n	8000b4e <__aeabi_l2f+0x2a>

08000b14 <__aeabi_ul2f>:
 8000b14:	ea50 0201 	orrs.w	r2, r0, r1
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e00a      	b.n	8000b38 <__aeabi_l2f+0x14>
 8000b22:	bf00      	nop

08000b24 <__aeabi_l2f>:
 8000b24:	ea50 0201 	orrs.w	r2, r0, r1
 8000b28:	bf08      	it	eq
 8000b2a:	4770      	bxeq	lr
 8000b2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b30:	d502      	bpl.n	8000b38 <__aeabi_l2f+0x14>
 8000b32:	4240      	negs	r0, r0
 8000b34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b38:	ea5f 0c01 	movs.w	ip, r1
 8000b3c:	bf02      	ittt	eq
 8000b3e:	4684      	moveq	ip, r0
 8000b40:	4601      	moveq	r1, r0
 8000b42:	2000      	moveq	r0, #0
 8000b44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b48:	bf08      	it	eq
 8000b4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b52:	fabc f28c 	clz	r2, ip
 8000b56:	3a08      	subs	r2, #8
 8000b58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b5c:	db10      	blt.n	8000b80 <__aeabi_l2f+0x5c>
 8000b5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b62:	4463      	add	r3, ip
 8000b64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b68:	f1c2 0220 	rsb	r2, r2, #32
 8000b6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b70:	fa20 f202 	lsr.w	r2, r0, r2
 8000b74:	eb43 0002 	adc.w	r0, r3, r2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f102 0220 	add.w	r2, r2, #32
 8000b84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b88:	f1c2 0220 	rsb	r2, r2, #32
 8000b8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b90:	fa21 f202 	lsr.w	r2, r1, r2
 8000b94:	eb43 0002 	adc.w	r0, r3, r2
 8000b98:	bf08      	it	eq
 8000b9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_f2iz>:
 8000ba0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ba4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ba8:	d30f      	bcc.n	8000bca <__aeabi_f2iz+0x2a>
 8000baa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_f2iz+0x30>
 8000bb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc4:	bf18      	it	ne
 8000bc6:	4240      	negne	r0, r0
 8000bc8:	4770      	bx	lr
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	4770      	bx	lr
 8000bd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bd4:	d101      	bne.n	8000bda <__aeabi_f2iz+0x3a>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	d105      	bne.n	8000be6 <__aeabi_f2iz+0x46>
 8000bda:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000bde:	bf08      	it	eq
 8000be0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_InitTick+0x3c>)
{
 8000bf0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf2:	7818      	ldrb	r0, [r3, #0]
 8000bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000bfc:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <HAL_InitTick+0x40>)
 8000bfe:	6810      	ldr	r0, [r2, #0]
 8000c00:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c04:	f000 fb00 	bl	8001208 <HAL_SYSTICK_Config>
 8000c08:	4604      	mov	r4, r0
 8000c0a:	b958      	cbnz	r0, 8000c24 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0c:	2d0f      	cmp	r5, #15
 8000c0e:	d809      	bhi.n	8000c24 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c10:	4602      	mov	r2, r0
 8000c12:	4629      	mov	r1, r5
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f000 fab6 	bl	8001188 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <HAL_InitTick+0x44>)
 8000c1e:	4620      	mov	r0, r4
 8000c20:	601d      	str	r5, [r3, #0]
 8000c22:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000c24:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c26:	bd38      	pop	{r3, r4, r5, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000118 	.word	0x20000118
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_Init+0x20>)
{
 8000c36:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	f043 0310 	orr.w	r3, r3, #16
 8000c40:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c42:	f000 fa8f 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff ffd0 	bl	8000bec <HAL_InitTick>
  HAL_MspInit();
 8000c4c:	f003 fbec 	bl	8004428 <HAL_MspInit>
}
 8000c50:	2000      	movs	r0, #0
 8000c52:	bd08      	pop	{r3, pc}
 8000c54:	40022000 	.word	0x40022000

08000c58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <HAL_IncTick+0x10>)
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <HAL_IncTick+0x14>)
 8000c5c:	6811      	ldr	r1, [r2, #0]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	440b      	add	r3, r1
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20002b40 	.word	0x20002b40
 8000c6c:	20000000 	.word	0x20000000

08000c70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c70:	4b01      	ldr	r3, [pc, #4]	; (8000c78 <HAL_GetTick+0x8>)
 8000c72:	6818      	ldr	r0, [r3, #0]
}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20002b40 	.word	0x20002b40

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff fff6 	bl	8000c70 <HAL_GetTick>
 8000c84:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000c88:	bf1e      	ittt	ne
 8000c8a:	4b04      	ldrne	r3, [pc, #16]	; (8000c9c <HAL_Delay+0x20>)
 8000c8c:	781b      	ldrbne	r3, [r3, #0]
 8000c8e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c90:	f7ff ffee 	bl	8000c70 <HAL_GetTick>
 8000c94:	1b40      	subs	r0, r0, r5
 8000c96:	4284      	cmp	r4, r0
 8000c98:	d8fa      	bhi.n	8000c90 <HAL_Delay+0x14>
  {
  }
}
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ca2:	2600      	movs	r6, #0
{
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ca8:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000caa:	f7ff ffe1 	bl	8000c70 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000cae:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000cb0:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	05d2      	lsls	r2, r2, #23
 8000cb6:	d508      	bpl.n	8000cca <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 8000cb8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8000cbc:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cc0:	f043 0320 	orr.w	r3, r3, #32
 8000cc4:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8000cc6:	b003      	add	sp, #12
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	05d6      	lsls	r6, r2, #23
 8000cce:	d403      	bmi.n	8000cd8 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000cd2:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8000cd6:	d03b      	beq.n	8000d50 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000cd8:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <HAL_ADC_PollForConversion+0x124>)
 8000cda:	2002      	movs	r0, #2
 8000cdc:	681e      	ldr	r6, [r3, #0]
 8000cde:	f001 fa8f 	bl	8002200 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	4a38      	ldr	r2, [pc, #224]	; (8000dc8 <HAL_ADC_PollForConversion+0x128>)
 8000ce6:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000ce8:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000cec:	4211      	tst	r1, r2
 8000cee:	4a37      	ldr	r2, [pc, #220]	; (8000dcc <HAL_ADC_PollForConversion+0x12c>)
 8000cf0:	d14f      	bne.n	8000d92 <HAL_ADC_PollForConversion+0xf2>
 8000cf2:	68de      	ldr	r6, [r3, #12]
 8000cf4:	4936      	ldr	r1, [pc, #216]	; (8000dd0 <HAL_ADC_PollForConversion+0x130>)
 8000cf6:	420e      	tst	r6, r1
 8000cf8:	d14b      	bne.n	8000d92 <HAL_ADC_PollForConversion+0xf2>
 8000cfa:	6919      	ldr	r1, [r3, #16]
 8000cfc:	4211      	tst	r1, r2
 8000cfe:	d159      	bne.n	8000db4 <HAL_ADC_PollForConversion+0x114>
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	4b34      	ldr	r3, [pc, #208]	; (8000dd4 <HAL_ADC_PollForConversion+0x134>)
 8000d04:	421a      	tst	r2, r3
 8000d06:	bf14      	ite	ne
 8000d08:	2329      	movne	r3, #41	; 0x29
 8000d0a:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000d0c:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d10:	9b01      	ldr	r3, [sp, #4]
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d920      	bls.n	8000d58 <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 8000d16:	1c6b      	adds	r3, r5, #1
 8000d18:	d005      	beq.n	8000d26 <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000d1a:	b15d      	cbz	r5, 8000d34 <HAL_ADC_PollForConversion+0x94>
 8000d1c:	f7ff ffa8 	bl	8000c70 <HAL_GetTick>
 8000d20:	1bc0      	subs	r0, r0, r7
 8000d22:	4285      	cmp	r5, r0
 8000d24:	d306      	bcc.n	8000d34 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 8000d26:	9b01      	ldr	r3, [sp, #4]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	e7f0      	b.n	8000d10 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 8000d2e:	1c68      	adds	r0, r5, #1
 8000d30:	d00f      	beq.n	8000d52 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000d32:	b945      	cbnz	r5, 8000d46 <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 8000d36:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 8000d44:	e7bf      	b.n	8000cc6 <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000d46:	f7ff ff93 	bl	8000c70 <HAL_GetTick>
 8000d4a:	1bc0      	subs	r0, r0, r7
 8000d4c:	4285      	cmp	r5, r0
 8000d4e:	d3f1      	bcc.n	8000d34 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d50:	6822      	ldr	r2, [r4, #0]
 8000d52:	6813      	ldr	r3, [r2, #0]
 8000d54:	0799      	lsls	r1, r3, #30
 8000d56:	d5ea      	bpl.n	8000d2e <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d58:	f06f 0312 	mvn.w	r3, #18
 8000d5c:	6822      	ldr	r2, [r4, #0]
 8000d5e:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d66:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d68:	6893      	ldr	r3, [r2, #8]
 8000d6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d72:	d125      	bne.n	8000dc0 <HAL_ADC_PollForConversion+0x120>
 8000d74:	68e3      	ldr	r3, [r4, #12]
 8000d76:	bb1b      	cbnz	r3, 8000dc0 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d7e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000d82:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000d86:	d11b      	bne.n	8000dc0 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d90:	e799      	b.n	8000cc6 <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000d92:	6919      	ldr	r1, [r3, #16]
 8000d94:	4211      	tst	r1, r2
 8000d96:	d103      	bne.n	8000da0 <HAL_ADC_PollForConversion+0x100>
 8000d98:	68d9      	ldr	r1, [r3, #12]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_ADC_PollForConversion+0x134>)
 8000d9c:	4211      	tst	r1, r2
 8000d9e:	d00b      	beq.n	8000db8 <HAL_ADC_PollForConversion+0x118>
 8000da0:	6919      	ldr	r1, [r3, #16]
 8000da2:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_ADC_PollForConversion+0x138>)
 8000da4:	4211      	tst	r1, r2
 8000da6:	d109      	bne.n	8000dbc <HAL_ADC_PollForConversion+0x11c>
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4213      	tst	r3, r2
 8000dac:	bf14      	ite	ne
 8000dae:	23fc      	movne	r3, #252	; 0xfc
 8000db0:	2354      	moveq	r3, #84	; 0x54
 8000db2:	e7ab      	b.n	8000d0c <HAL_ADC_PollForConversion+0x6c>
 8000db4:	2329      	movs	r3, #41	; 0x29
 8000db6:	e7a9      	b.n	8000d0c <HAL_ADC_PollForConversion+0x6c>
 8000db8:	2354      	movs	r3, #84	; 0x54
 8000dba:	e7a7      	b.n	8000d0c <HAL_ADC_PollForConversion+0x6c>
 8000dbc:	23fc      	movs	r3, #252	; 0xfc
 8000dbe:	e7a5      	b.n	8000d0c <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	e780      	b.n	8000cc6 <HAL_ADC_PollForConversion+0x26>
 8000dc4:	20000118 	.word	0x20000118
 8000dc8:	24924924 	.word	0x24924924
 8000dcc:	12492492 	.word	0x12492492
 8000dd0:	00924924 	.word	0x00924924
 8000dd4:	00492492 	.word	0x00492492
 8000dd8:	00249249 	.word	0x00249249

08000ddc <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ddc:	6803      	ldr	r3, [r0, #0]
 8000dde:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000de0:	4770      	bx	lr
	...

08000de4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000de4:	2300      	movs	r3, #0
{ 
 8000de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000de8:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dea:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d074      	beq.n	8000edc <HAL_ADC_ConfigChannel+0xf8>
 8000df2:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000df4:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000df6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000dfa:	2d06      	cmp	r5, #6
 8000dfc:	6802      	ldr	r2, [r0, #0]
 8000dfe:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000e02:	680c      	ldr	r4, [r1, #0]
 8000e04:	d825      	bhi.n	8000e52 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e06:	442b      	add	r3, r5
 8000e08:	251f      	movs	r5, #31
 8000e0a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000e0c:	3b05      	subs	r3, #5
 8000e0e:	409d      	lsls	r5, r3
 8000e10:	ea26 0505 	bic.w	r5, r6, r5
 8000e14:	fa04 f303 	lsl.w	r3, r4, r3
 8000e18:	432b      	orrs	r3, r5
 8000e1a:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e1c:	2c09      	cmp	r4, #9
 8000e1e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000e22:	688d      	ldr	r5, [r1, #8]
 8000e24:	d92f      	bls.n	8000e86 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e26:	2607      	movs	r6, #7
 8000e28:	4423      	add	r3, r4
 8000e2a:	68d1      	ldr	r1, [r2, #12]
 8000e2c:	3b1e      	subs	r3, #30
 8000e2e:	409e      	lsls	r6, r3
 8000e30:	ea21 0106 	bic.w	r1, r1, r6
 8000e34:	fa05 f303 	lsl.w	r3, r5, r3
 8000e38:	430b      	orrs	r3, r1
 8000e3a:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e3c:	f1a4 0310 	sub.w	r3, r4, #16
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d92b      	bls.n	8000e9c <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e44:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000e52:	2d0c      	cmp	r5, #12
 8000e54:	d80b      	bhi.n	8000e6e <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e56:	442b      	add	r3, r5
 8000e58:	251f      	movs	r5, #31
 8000e5a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000e5c:	3b23      	subs	r3, #35	; 0x23
 8000e5e:	409d      	lsls	r5, r3
 8000e60:	ea26 0505 	bic.w	r5, r6, r5
 8000e64:	fa04 f303 	lsl.w	r3, r4, r3
 8000e68:	432b      	orrs	r3, r5
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6c:	e7d6      	b.n	8000e1c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e6e:	442b      	add	r3, r5
 8000e70:	251f      	movs	r5, #31
 8000e72:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000e74:	3b41      	subs	r3, #65	; 0x41
 8000e76:	409d      	lsls	r5, r3
 8000e78:	ea26 0505 	bic.w	r5, r6, r5
 8000e7c:	fa04 f303 	lsl.w	r3, r4, r3
 8000e80:	432b      	orrs	r3, r5
 8000e82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e84:	e7ca      	b.n	8000e1c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e86:	2607      	movs	r6, #7
 8000e88:	6911      	ldr	r1, [r2, #16]
 8000e8a:	4423      	add	r3, r4
 8000e8c:	409e      	lsls	r6, r3
 8000e8e:	ea21 0106 	bic.w	r1, r1, r6
 8000e92:	fa05 f303 	lsl.w	r3, r5, r3
 8000e96:	430b      	orrs	r3, r1
 8000e98:	6113      	str	r3, [r2, #16]
 8000e9a:	e7cf      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_ADC_ConfigChannel+0xfc>)
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d116      	bne.n	8000ed0 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ea2:	6893      	ldr	r3, [r2, #8]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	d4cd      	bmi.n	8000e44 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ea8:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000eaa:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000eac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000eb0:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000eb2:	d1c7      	bne.n	8000e44 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_ADC_ConfigChannel+0x100>)
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <HAL_ADC_ConfigChannel+0x104>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	4353      	muls	r3, r2
            wait_loop_index--;
 8000ec2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000ec4:	9b01      	ldr	r3, [sp, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0bc      	beq.n	8000e44 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000eca:	9b01      	ldr	r3, [sp, #4]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7f8      	b.n	8000ec2 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ed2:	f043 0320 	orr.w	r3, r3, #32
 8000ed6:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e7b4      	b.n	8000e46 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000edc:	2302      	movs	r3, #2
 8000ede:	e7b5      	b.n	8000e4c <HAL_ADC_ConfigChannel+0x68>
 8000ee0:	40012400 	.word	0x40012400
 8000ee4:	20000118 	.word	0x20000118
 8000ee8:	000f4240 	.word	0x000f4240

08000eec <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000eec:	2300      	movs	r3, #0
{
 8000eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000ef0:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ef2:	6803      	ldr	r3, [r0, #0]
{
 8000ef4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	07d2      	lsls	r2, r2, #31
 8000efa:	d502      	bpl.n	8000f02 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000efc:	2000      	movs	r0, #0
}
 8000efe:	b002      	add	sp, #8
 8000f00:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	f042 0201 	orr.w	r2, r2, #1
 8000f08:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <ADC_Enable+0x68>)
 8000f0c:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <ADC_Enable+0x6c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000f14:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000f16:	9b01      	ldr	r3, [sp, #4]
 8000f18:	b9c3      	cbnz	r3, 8000f4c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000f1a:	f7ff fea9 	bl	8000c70 <HAL_GetTick>
 8000f1e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	689d      	ldr	r5, [r3, #8]
 8000f24:	f015 0501 	ands.w	r5, r5, #1
 8000f28:	d1e8      	bne.n	8000efc <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f2a:	f7ff fea1 	bl	8000c70 <HAL_GetTick>
 8000f2e:	1b80      	subs	r0, r0, r6
 8000f30:	2802      	cmp	r0, #2
 8000f32:	d9f5      	bls.n	8000f20 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000f36:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000f42:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f4a:	e7d8      	b.n	8000efe <ADC_Enable+0x12>
      wait_loop_index--;
 8000f4c:	9b01      	ldr	r3, [sp, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	e7e0      	b.n	8000f14 <ADC_Enable+0x28>
 8000f52:	bf00      	nop
 8000f54:	20000118 	.word	0x20000118
 8000f58:	000f4240 	.word	0x000f4240

08000f5c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000f5c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000f60:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000f62:	2b01      	cmp	r3, #1
{
 8000f64:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000f66:	d054      	beq.n	8001012 <HAL_ADC_Start+0xb6>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000f6e:	f7ff ffbd 	bl	8000eec <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d149      	bne.n	800100a <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8000f76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8000f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d104      	bne.n	8000f98 <HAL_ADC_Start+0x3c>
 8000f8e:	4923      	ldr	r1, [pc, #140]	; (800101c <HAL_ADC_Start+0xc0>)
 8000f90:	684a      	ldr	r2, [r1, #4]
 8000f92:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000f96:	d12e      	bne.n	8000ff6 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f9a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000f9e:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fa0:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fa2:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fa4:	bf41      	itttt	mi
 8000fa6:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000fa8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000fac:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000fb0:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fb2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fb8:	bf1c      	itt	ne
 8000fba:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000fbc:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000fc8:	f06f 0202 	mvn.w	r2, #2
 8000fcc:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000fd4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000fd8:	d113      	bne.n	8001002 <HAL_ADC_Start+0xa6>
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <HAL_ADC_Start+0xbc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d105      	bne.n	8000fec <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fe0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000fe4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fe6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000fea:	d10a      	bne.n	8001002 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ff6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ff8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ffc:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ffe:	684a      	ldr	r2, [r1, #4]
 8001000:	e7cf      	b.n	8000fa2 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001008:	e7f3      	b.n	8000ff2 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800100a:	2300      	movs	r3, #0
 800100c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001010:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001012:	2002      	movs	r0, #2
}
 8001014:	bd10      	pop	{r4, pc}
 8001016:	bf00      	nop
 8001018:	40012800 	.word	0x40012800
 800101c:	40012400 	.word	0x40012400

08001020 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001020:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001022:	6803      	ldr	r3, [r0, #0]
{
 8001024:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	07d2      	lsls	r2, r2, #31
 800102a:	d401      	bmi.n	8001030 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800102c:	2000      	movs	r0, #0
 800102e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	f022 0201 	bic.w	r2, r2, #1
 8001036:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001038:	f7ff fe1a 	bl	8000c70 <HAL_GetTick>
 800103c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	07db      	lsls	r3, r3, #31
 8001044:	d5f2      	bpl.n	800102c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001046:	f7ff fe13 	bl	8000c70 <HAL_GetTick>
 800104a:	1b40      	subs	r0, r0, r5
 800104c:	2802      	cmp	r0, #2
 800104e:	d9f6      	bls.n	800103e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001050:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001052:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001054:	f043 0310 	orr.w	r3, r3, #16
 8001058:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800105a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001062:	bd38      	pop	{r3, r4, r5, pc}

08001064 <HAL_ADC_Init>:
{
 8001064:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001066:	4604      	mov	r4, r0
 8001068:	2800      	cmp	r0, #0
 800106a:	d071      	beq.n	8001150 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800106c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800106e:	b923      	cbnz	r3, 800107a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001070:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001072:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001076:	f002 fe33 	bl	8003ce0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff ffd0 	bl	8001020 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001082:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001086:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001088:	d164      	bne.n	8001154 <HAL_ADC_Init+0xf0>
 800108a:	2800      	cmp	r0, #0
 800108c:	d162      	bne.n	8001154 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800108e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001090:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001094:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001096:	f023 0302 	bic.w	r3, r3, #2
 800109a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800109e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010a0:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80010a2:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80010a4:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010a6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80010aa:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010ae:	d038      	beq.n	8001122 <HAL_ADC_Init+0xbe>
 80010b0:	2901      	cmp	r1, #1
 80010b2:	bf14      	ite	ne
 80010b4:	4606      	movne	r6, r0
 80010b6:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010ba:	6965      	ldr	r5, [r4, #20]
 80010bc:	2d01      	cmp	r5, #1
 80010be:	d107      	bne.n	80010d0 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d130      	bne.n	8001126 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010c4:	69a3      	ldr	r3, [r4, #24]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80010cc:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80010d0:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010d2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80010d6:	685d      	ldr	r5, [r3, #4]
 80010d8:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80010dc:	ea45 0506 	orr.w	r5, r5, r6
 80010e0:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80010e2:	689e      	ldr	r6, [r3, #8]
 80010e4:	4d1d      	ldr	r5, [pc, #116]	; (800115c <HAL_ADC_Init+0xf8>)
 80010e6:	ea05 0506 	and.w	r5, r5, r6
 80010ea:	ea45 0502 	orr.w	r5, r5, r2
 80010ee:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010f0:	d001      	beq.n	80010f6 <HAL_ADC_Init+0x92>
 80010f2:	2901      	cmp	r1, #1
 80010f4:	d120      	bne.n	8001138 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010f6:	6921      	ldr	r1, [r4, #16]
 80010f8:	3901      	subs	r1, #1
 80010fa:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80010fc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80010fe:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001102:	4329      	orrs	r1, r5
 8001104:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001106:	6899      	ldr	r1, [r3, #8]
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_ADC_Init+0xfc>)
 800110a:	400b      	ands	r3, r1
 800110c:	429a      	cmp	r2, r3
 800110e:	d115      	bne.n	800113c <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8001110:	2300      	movs	r3, #0
 8001112:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001114:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001116:	f023 0303 	bic.w	r3, r3, #3
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001120:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001122:	460e      	mov	r6, r1
 8001124:	e7c9      	b.n	80010ba <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001128:	f043 0320 	orr.w	r3, r3, #32
 800112c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001136:	e7cb      	b.n	80010d0 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8001138:	2100      	movs	r1, #0
 800113a:	e7df      	b.n	80010fc <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 800113c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800113e:	f023 0312 	bic.w	r3, r3, #18
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001148:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001150:	2001      	movs	r0, #1
}
 8001152:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	62a3      	str	r3, [r4, #40]	; 0x28
 800115a:	e7f9      	b.n	8001150 <HAL_ADC_Init+0xec>
 800115c:	ffe1f7fd 	.word	0xffe1f7fd
 8001160:	ff1f0efe 	.word	0xff1f0efe

08001164 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001166:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800116a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001172:	041b      	lsls	r3, r3, #16
 8001174:	0c1b      	lsrs	r3, r3, #16
 8001176:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800117e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001180:	60d3      	str	r3, [r2, #12]
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b530      	push	{r4, r5, lr}
 800118c:	68dc      	ldr	r4, [r3, #12]
 800118e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001192:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	2b04      	cmp	r3, #4
 800119a:	bf28      	it	cs
 800119c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a4:	bf98      	it	ls
 80011a6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	fa05 f303 	lsl.w	r3, r5, r3
 80011ac:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b0:	bf88      	it	hi
 80011b2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4019      	ands	r1, r3
 80011b6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	fa05 f404 	lsl.w	r4, r5, r4
 80011bc:	3c01      	subs	r4, #1
 80011be:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80011c0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c2:	ea42 0201 	orr.w	r2, r2, r1
 80011c6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	bfaf      	iteee	ge
 80011cc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	4b06      	ldrlt	r3, [pc, #24]	; (80011ec <HAL_NVIC_SetPriority+0x64>)
 80011d2:	f000 000f 	andlt.w	r0, r0, #15
 80011d6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	bfa5      	ittet	ge
 80011da:	b2d2      	uxtbge	r2, r2
 80011dc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80011e6:	bd30      	pop	{r4, r5, pc}
 80011e8:	e000ed00 	.word	0xe000ed00
 80011ec:	e000ed14 	.word	0xe000ed14

080011f0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011f0:	2301      	movs	r3, #1
 80011f2:	0942      	lsrs	r2, r0, #5
 80011f4:	f000 001f 	and.w	r0, r0, #31
 80011f8:	fa03 f000 	lsl.w	r0, r3, r0
 80011fc:	4b01      	ldr	r3, [pc, #4]	; (8001204 <HAL_NVIC_EnableIRQ+0x14>)
 80011fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100

08001208 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	3801      	subs	r0, #1
 800120a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800120e:	d20a      	bcs.n	8001226 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001238:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800123a:	4616      	mov	r6, r2
 800123c:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800123e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80013e4 <HAL_GPIO_Init+0x1b0>
 8001242:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80013e8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001246:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800124c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001250:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001254:	45a0      	cmp	r8, r4
 8001256:	d17f      	bne.n	8001358 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001258:	684d      	ldr	r5, [r1, #4]
 800125a:	2d12      	cmp	r5, #18
 800125c:	f000 80af 	beq.w	80013be <HAL_GPIO_Init+0x18a>
 8001260:	f200 8088 	bhi.w	8001374 <HAL_GPIO_Init+0x140>
 8001264:	2d02      	cmp	r5, #2
 8001266:	f000 80a7 	beq.w	80013b8 <HAL_GPIO_Init+0x184>
 800126a:	d87c      	bhi.n	8001366 <HAL_GPIO_Init+0x132>
 800126c:	2d00      	cmp	r5, #0
 800126e:	f000 808e 	beq.w	800138e <HAL_GPIO_Init+0x15a>
 8001272:	2d01      	cmp	r5, #1
 8001274:	f000 809e 	beq.w	80013b4 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001278:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800127c:	2cff      	cmp	r4, #255	; 0xff
 800127e:	bf93      	iteet	ls
 8001280:	4682      	movls	sl, r0
 8001282:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001286:	3d08      	subhi	r5, #8
 8001288:	f8d0 b000 	ldrls.w	fp, [r0]
 800128c:	bf92      	itee	ls
 800128e:	00b5      	lslls	r5, r6, #2
 8001290:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001294:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001296:	fa09 f805 	lsl.w	r8, r9, r5
 800129a:	ea2b 0808 	bic.w	r8, fp, r8
 800129e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a2:	bf88      	it	hi
 80012a4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012a8:	ea48 0505 	orr.w	r5, r8, r5
 80012ac:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80012b4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80012b8:	d04e      	beq.n	8001358 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012ba:	4d47      	ldr	r5, [pc, #284]	; (80013d8 <HAL_GPIO_Init+0x1a4>)
 80012bc:	4f46      	ldr	r7, [pc, #280]	; (80013d8 <HAL_GPIO_Init+0x1a4>)
 80012be:	69ad      	ldr	r5, [r5, #24]
 80012c0:	f026 0803 	bic.w	r8, r6, #3
 80012c4:	f045 0501 	orr.w	r5, r5, #1
 80012c8:	61bd      	str	r5, [r7, #24]
 80012ca:	69bd      	ldr	r5, [r7, #24]
 80012cc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80012d0:	f005 0501 	and.w	r5, r5, #1
 80012d4:	9501      	str	r5, [sp, #4]
 80012d6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80012da:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012de:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80012e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80012e4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80012e8:	fa09 f90b 	lsl.w	r9, r9, fp
 80012ec:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f0:	4d3a      	ldr	r5, [pc, #232]	; (80013dc <HAL_GPIO_Init+0x1a8>)
 80012f2:	42a8      	cmp	r0, r5
 80012f4:	d068      	beq.n	80013c8 <HAL_GPIO_Init+0x194>
 80012f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012fa:	42a8      	cmp	r0, r5
 80012fc:	d066      	beq.n	80013cc <HAL_GPIO_Init+0x198>
 80012fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001302:	42a8      	cmp	r0, r5
 8001304:	d064      	beq.n	80013d0 <HAL_GPIO_Init+0x19c>
 8001306:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800130a:	42a8      	cmp	r0, r5
 800130c:	bf0c      	ite	eq
 800130e:	2503      	moveq	r5, #3
 8001310:	2504      	movne	r5, #4
 8001312:	fa05 f50b 	lsl.w	r5, r5, fp
 8001316:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800131a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800131e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001320:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001324:	bf14      	ite	ne
 8001326:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001328:	43a5      	biceq	r5, r4
 800132a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800132c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800132e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001332:	bf14      	ite	ne
 8001334:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001336:	43a5      	biceq	r5, r4
 8001338:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800133a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001340:	bf14      	ite	ne
 8001342:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001344:	43a5      	biceq	r5, r4
 8001346:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001348:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800134a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800134e:	bf14      	ite	ne
 8001350:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001352:	ea25 0404 	biceq.w	r4, r5, r4
 8001356:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001358:	3601      	adds	r6, #1
 800135a:	2e10      	cmp	r6, #16
 800135c:	f47f af73 	bne.w	8001246 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001360:	b003      	add	sp, #12
 8001362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001366:	2d03      	cmp	r5, #3
 8001368:	d022      	beq.n	80013b0 <HAL_GPIO_Init+0x17c>
 800136a:	2d11      	cmp	r5, #17
 800136c:	d184      	bne.n	8001278 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800136e:	68ca      	ldr	r2, [r1, #12]
 8001370:	3204      	adds	r2, #4
          break;
 8001372:	e781      	b.n	8001278 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001374:	4f1a      	ldr	r7, [pc, #104]	; (80013e0 <HAL_GPIO_Init+0x1ac>)
 8001376:	42bd      	cmp	r5, r7
 8001378:	d009      	beq.n	800138e <HAL_GPIO_Init+0x15a>
 800137a:	d812      	bhi.n	80013a2 <HAL_GPIO_Init+0x16e>
 800137c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80013ec <HAL_GPIO_Init+0x1b8>
 8001380:	454d      	cmp	r5, r9
 8001382:	d004      	beq.n	800138e <HAL_GPIO_Init+0x15a>
 8001384:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001388:	454d      	cmp	r5, r9
 800138a:	f47f af75 	bne.w	8001278 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800138e:	688a      	ldr	r2, [r1, #8]
 8001390:	b1c2      	cbz	r2, 80013c4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001392:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001394:	bf0c      	ite	eq
 8001396:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800139a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800139e:	2208      	movs	r2, #8
 80013a0:	e76a      	b.n	8001278 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80013a2:	4575      	cmp	r5, lr
 80013a4:	d0f3      	beq.n	800138e <HAL_GPIO_Init+0x15a>
 80013a6:	4565      	cmp	r5, ip
 80013a8:	d0f1      	beq.n	800138e <HAL_GPIO_Init+0x15a>
 80013aa:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80013f0 <HAL_GPIO_Init+0x1bc>
 80013ae:	e7eb      	b.n	8001388 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b0:	2200      	movs	r2, #0
 80013b2:	e761      	b.n	8001278 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013b4:	68ca      	ldr	r2, [r1, #12]
          break;
 80013b6:	e75f      	b.n	8001278 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013b8:	68ca      	ldr	r2, [r1, #12]
 80013ba:	3208      	adds	r2, #8
          break;
 80013bc:	e75c      	b.n	8001278 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013be:	68ca      	ldr	r2, [r1, #12]
 80013c0:	320c      	adds	r2, #12
          break;
 80013c2:	e759      	b.n	8001278 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013c4:	2204      	movs	r2, #4
 80013c6:	e757      	b.n	8001278 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c8:	2500      	movs	r5, #0
 80013ca:	e7a2      	b.n	8001312 <HAL_GPIO_Init+0xde>
 80013cc:	2501      	movs	r5, #1
 80013ce:	e7a0      	b.n	8001312 <HAL_GPIO_Init+0xde>
 80013d0:	2502      	movs	r5, #2
 80013d2:	e79e      	b.n	8001312 <HAL_GPIO_Init+0xde>
 80013d4:	40010400 	.word	0x40010400
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010800 	.word	0x40010800
 80013e0:	10210000 	.word	0x10210000
 80013e4:	10310000 	.word	0x10310000
 80013e8:	10320000 	.word	0x10320000
 80013ec:	10110000 	.word	0x10110000
 80013f0:	10220000 	.word	0x10220000

080013f4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f4:	6883      	ldr	r3, [r0, #8]
 80013f6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80013f8:	bf14      	ite	ne
 80013fa:	2001      	movne	r0, #1
 80013fc:	2000      	moveq	r0, #0
 80013fe:	4770      	bx	lr

08001400 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001400:	b10a      	cbz	r2, 8001406 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001402:	6101      	str	r1, [r0, #16]
 8001404:	4770      	bx	lr
 8001406:	0409      	lsls	r1, r1, #16
 8001408:	e7fb      	b.n	8001402 <HAL_GPIO_WritePin+0x2>

0800140a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800140a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800140e:	4604      	mov	r4, r0
{
 8001410:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8001412:	2800      	cmp	r0, #0
 8001414:	d060      	beq.n	80014d8 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001416:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 800141a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800141e:	b91b      	cbnz	r3, 8001428 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001420:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001424:	f003 fb0e 	bl	8004a44 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001428:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800142a:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800142c:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 800142e:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001432:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8001436:	f001 fb6b 	bl	8002b10 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800143a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	f104 0804 	add.w	r8, r4, #4
 8001444:	6033      	str	r3, [r6, #0]
 8001446:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800144a:	6820      	ldr	r0, [r4, #0]
 800144c:	f001 fb50 	bl	8002af0 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8001450:	2100      	movs	r1, #0
 8001452:	6820      	ldr	r0, [r4, #0]
 8001454:	f001 fb66 	bl	8002b24 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8001458:	2100      	movs	r1, #0
 800145a:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800145c:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 800145e:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001460:	4608      	mov	r0, r1
 8001462:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8001466:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 800146a:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800146c:	3101      	adds	r1, #1
 800146e:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 8001470:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001474:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8001478:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 800147a:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 800147c:	6410      	str	r0, [r2, #64]	; 0x40
 800147e:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8001482:	d1f0      	bne.n	8001466 <HAL_PCD_Init+0x5c>
 8001484:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8001486:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8001488:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 800148c:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800148e:	3201      	adds	r2, #1
 8001490:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8001492:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8001496:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 800149a:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 800149e:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 80014a2:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 80014a6:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 80014aa:	d1ed      	bne.n	8001488 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80014ac:	466e      	mov	r6, sp
 80014ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014b2:	682b      	ldr	r3, [r5, #0]
 80014b4:	6033      	str	r3, [r6, #0]
 80014b6:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80014ba:	6820      	ldr	r0, [r4, #0]
 80014bc:	f001 fb34 	bl	8002b28 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 80014c0:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80014c2:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 80014c6:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 80014c8:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 80014cc:	f001 fe04 	bl	80030d8 <USB_DevDisconnect>
  return HAL_OK;
 80014d0:	2000      	movs	r0, #0
}
 80014d2:	b006      	add	sp, #24
 80014d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80014d8:	2001      	movs	r0, #1
 80014da:	e7fa      	b.n	80014d2 <HAL_PCD_Init+0xc8>

080014dc <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80014dc:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80014e0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80014e2:	2b01      	cmp	r3, #1
{
 80014e4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80014e6:	d00e      	beq.n	8001506 <HAL_PCD_Start+0x2a>
 80014e8:	2101      	movs	r1, #1
 80014ea:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80014ee:	f003 fbd0 	bl	8004c92 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80014f2:	6820      	ldr	r0, [r4, #0]
 80014f4:	f001 fdee 	bl	80030d4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80014f8:	6820      	ldr	r0, [r4, #0]
 80014fa:	f001 fb00 	bl	8002afe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80014fe:	2000      	movs	r0, #0
 8001500:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001504:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001506:	2002      	movs	r0, #2
}
 8001508:	bd10      	pop	{r4, pc}

0800150a <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800150a:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 800150e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001510:	2a01      	cmp	r2, #1
{
 8001512:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001514:	d00b      	beq.n	800152e <HAL_PCD_SetAddress+0x24>
 8001516:	2201      	movs	r2, #1
 8001518:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 800151c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8001520:	6800      	ldr	r0, [r0, #0]
 8001522:	f001 fdd1 	bl	80030c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001526:	2000      	movs	r0, #0
 8001528:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 800152c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800152e:	2002      	movs	r0, #2
  return HAL_OK;
}
 8001530:	bd10      	pop	{r4, pc}

08001532 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001532:	b538      	push	{r3, r4, r5, lr}
 8001534:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001536:	b248      	sxtb	r0, r1
 8001538:	2800      	cmp	r0, #0
 800153a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800153e:	bfb5      	itete	lt
 8001540:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001544:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001548:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800154a:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800154e:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8001550:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001552:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8001554:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8001556:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 800155a:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 800155c:	2b01      	cmp	r3, #1
 800155e:	d009      	beq.n	8001574 <HAL_PCD_EP_Open+0x42>
 8001560:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001562:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001564:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001568:	f001 fafa 	bl	8002b60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800156c:	2000      	movs	r0, #0
 800156e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8001572:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001574:	2002      	movs	r0, #2
}
 8001576:	bd38      	pop	{r3, r4, r5, pc}

08001578 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001578:	b24b      	sxtb	r3, r1
 800157a:	2b00      	cmp	r3, #0
 800157c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001580:	bfb5      	itete	lt
 8001582:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001586:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800158a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800158c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001590:	0fdb      	lsrs	r3, r3, #31
{  
 8001592:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8001594:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001596:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8001598:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 800159c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d009      	beq.n	80015b6 <HAL_PCD_EP_Close+0x3e>
 80015a2:	2301      	movs	r3, #1
 80015a4:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80015a8:	6800      	ldr	r0, [r0, #0]
 80015aa:	f001 fc4b 	bl	8002e44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80015b4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80015b6:	2002      	movs	r0, #2
}
 80015b8:	bd10      	pop	{r4, pc}

080015ba <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015ba:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80015bc:	2600      	movs	r6, #0
 80015be:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80015c2:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 80015c4:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 80015c6:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80015ca:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80015ce:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80015d0:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 80015d4:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 80015d8:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 80015dc:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 80015e0:	6800      	ldr	r0, [r0, #0]
 80015e2:	f001 fd93 	bl	800310c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80015e6:	4630      	mov	r0, r6
 80015e8:	bd70      	pop	{r4, r5, r6, pc}

080015ea <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80015ea:	f001 010f 	and.w	r1, r1, #15
 80015ee:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80015f2:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 80015f6:	4770      	bx	lr

080015f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015f8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80015fc:	b570      	push	{r4, r5, r6, lr}
 80015fe:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001600:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8001602:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8001604:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8001606:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8001608:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800160c:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001610:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8001612:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001614:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001616:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 800161a:	6800      	ldr	r0, [r0, #0]
 800161c:	f001 fd76 	bl	800310c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001620:	4630      	mov	r0, r6
 8001622:	bd70      	pop	{r4, r5, r6, pc}

08001624 <HAL_PCD_IRQHandler>:
{ 
 8001624:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001628:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800162a:	6800      	ldr	r0, [r0, #0]
 800162c:	f001 fd56 	bl	80030dc <USB_ReadInterrupts>
 8001630:	0400      	lsls	r0, r0, #16
 8001632:	f100 8098 	bmi.w	8001766 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001636:	6820      	ldr	r0, [r4, #0]
 8001638:	f001 fd50 	bl	80030dc <USB_ReadInterrupts>
 800163c:	0541      	lsls	r1, r0, #21
 800163e:	d50f      	bpl.n	8001660 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001640:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001642:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001644:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	0c1b      	lsrs	r3, r3, #16
 8001650:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001654:	f003 fa2d 	bl	8004ab2 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001658:	2100      	movs	r1, #0
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff ff55 	bl	800150a <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001660:	6820      	ldr	r0, [r4, #0]
 8001662:	f001 fd3b 	bl	80030dc <USB_ReadInterrupts>
 8001666:	0447      	lsls	r7, r0, #17
 8001668:	d508      	bpl.n	800167c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001674:	041b      	lsls	r3, r3, #16
 8001676:	0c1b      	lsrs	r3, r3, #16
 8001678:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800167c:	6820      	ldr	r0, [r4, #0]
 800167e:	f001 fd2d 	bl	80030dc <USB_ReadInterrupts>
 8001682:	0486      	lsls	r6, r0, #18
 8001684:	d508      	bpl.n	8001698 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001686:	6822      	ldr	r2, [r4, #0]
 8001688:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800168c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001690:	041b      	lsls	r3, r3, #16
 8001692:	0c1b      	lsrs	r3, r3, #16
 8001694:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001698:	6820      	ldr	r0, [r4, #0]
 800169a:	f001 fd1f 	bl	80030dc <USB_ReadInterrupts>
 800169e:	04c5      	lsls	r5, r0, #19
 80016a0:	d51c      	bpl.n	80016dc <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80016a2:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80016a4:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80016a6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80016aa:	f023 0304 	bic.w	r3, r3, #4
 80016ae:	041b      	lsls	r3, r3, #16
 80016b0:	0c1b      	lsrs	r3, r3, #16
 80016b2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 80016b6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80016ba:	f023 0308 	bic.w	r3, r3, #8
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80016c6:	f003 fa11 	bl	8004aec <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80016ca:	6822      	ldr	r2, [r4, #0]
 80016cc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80016d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	0c1b      	lsrs	r3, r3, #16
 80016d8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80016dc:	6820      	ldr	r0, [r4, #0]
 80016de:	f001 fcfd 	bl	80030dc <USB_ReadInterrupts>
 80016e2:	0500      	lsls	r0, r0, #20
 80016e4:	d51d      	bpl.n	8001722 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80016e6:	6820      	ldr	r0, [r4, #0]
 80016e8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80016f6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80016fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	0c1b      	lsrs	r3, r3, #16
 8001702:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001706:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800170a:	b29b      	uxth	r3, r3
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8001714:	f001 fce2 	bl	80030dc <USB_ReadInterrupts>
 8001718:	04c1      	lsls	r1, r0, #19
 800171a:	d402      	bmi.n	8001722 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 800171c:	4620      	mov	r0, r4
 800171e:	f003 f9d5 	bl	8004acc <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001722:	6820      	ldr	r0, [r4, #0]
 8001724:	f001 fcda 	bl	80030dc <USB_ReadInterrupts>
 8001728:	0582      	lsls	r2, r0, #22
 800172a:	d50b      	bpl.n	8001744 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800172c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800172e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001730:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	0c1b      	lsrs	r3, r3, #16
 800173c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001740:	f003 f9b3 	bl	8004aaa <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001744:	6820      	ldr	r0, [r4, #0]
 8001746:	f001 fcc9 	bl	80030dc <USB_ReadInterrupts>
 800174a:	05c3      	lsls	r3, r0, #23
 800174c:	d508      	bpl.n	8001760 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800174e:	6822      	ldr	r2, [r4, #0]
 8001750:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	0c1b      	lsrs	r3, r3, #16
 800175c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001760:	b002      	add	sp, #8
 8001762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8001766:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001768:	4fc8      	ldr	r7, [pc, #800]	; (8001a8c <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800176a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8001a90 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800176e:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8001a94 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8001772:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8001776:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800177a:	6820      	ldr	r0, [r4, #0]
 800177c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001780:	b29b      	uxth	r3, r3
 8001782:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	f57f af55 	bpl.w	8001636 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800178c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8001790:	f015 050f 	ands.w	r5, r5, #15
 8001794:	f040 80ab 	bne.w	80018ee <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001798:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800179c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800179e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017a2:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 80017a4:	d126      	bne.n	80017f4 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017a6:	403b      	ands	r3, r7
 80017a8:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017aa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80017ae:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80017b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80017bc:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80017c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c6:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80017c8:	4413      	add	r3, r2
 80017ca:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017cc:	4620      	mov	r0, r4
 80017ce:	f003 f965 	bl	8004a9c <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80017d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0cf      	beq.n	800177a <HAL_PCD_IRQHandler+0x156>
 80017da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017dc:	2a00      	cmp	r2, #0
 80017de:	d1cc      	bne.n	800177a <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80017e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80017e4:	6821      	ldr	r1, [r4, #0]
 80017e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ea:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017ee:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80017f2:	e7c2      	b.n	800177a <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017f4:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80017fc:	051a      	lsls	r2, r3, #20
 80017fe:	d51f      	bpl.n	8001840 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001800:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001804:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001808:	b29b      	uxth	r3, r3
 800180a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800180e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001812:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001816:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800181a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800181e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001822:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001826:	f001 fd71 	bl	800330c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800182a:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800182c:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800182e:	8813      	ldrh	r3, [r2, #0]
 8001830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001834:	051b      	lsls	r3, r3, #20
 8001836:	0d1b      	lsrs	r3, r3, #20
 8001838:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800183a:	f003 f921 	bl	8004a80 <HAL_PCD_SetupStageCallback>
 800183e:	e79c      	b.n	800177a <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001840:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001844:	041b      	lsls	r3, r3, #16
 8001846:	d598      	bpl.n	800177a <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001848:	8803      	ldrh	r3, [r0, #0]
 800184a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800184e:	051b      	lsls	r3, r3, #20
 8001850:	0d1b      	lsrs	r3, r3, #20
 8001852:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001854:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001858:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 800185c:	b29b      	uxth	r3, r3
 800185e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001862:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001866:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800186a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800186e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8001872:	b163      	cbz	r3, 800188e <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001874:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8001878:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 800187c:	f001 fd46 	bl	800330c <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001880:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8001884:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8001888:	4413      	add	r3, r2
 800188a:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800188e:	2100      	movs	r1, #0
 8001890:	4620      	mov	r0, r4
 8001892:	f003 f8fb 	bl	8004a8c <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001896:	6822      	ldr	r2, [r4, #0]
 8001898:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 800189c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80018a0:	2d3e      	cmp	r5, #62	; 0x3e
 80018a2:	b289      	uxth	r1, r1
 80018a4:	f101 0106 	add.w	r1, r1, #6
 80018a8:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 80018ac:	d917      	bls.n	80018de <HAL_PCD_IRQHandler+0x2ba>
 80018ae:	f3c5 134f 	ubfx	r3, r5, #5, #16
 80018b2:	06ee      	lsls	r6, r5, #27
 80018b4:	bf04      	itt	eq
 80018b6:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80018ba:	b29b      	uxtheq	r3, r3
 80018bc:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018c6:	8813      	ldrh	r3, [r2, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	ea03 0308 	and.w	r3, r3, r8
 80018ce:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80018d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018da:	8013      	strh	r3, [r2, #0]
 80018dc:	e74d      	b.n	800177a <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018de:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80018e2:	07ed      	lsls	r5, r5, #31
 80018e4:	bf44      	itt	mi
 80018e6:	3301      	addmi	r3, #1
 80018e8:	b29b      	uxthmi	r3, r3
 80018ea:	029b      	lsls	r3, r3, #10
 80018ec:	e7e8      	b.n	80018c0 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018ee:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80018fc:	0419      	lsls	r1, r3, #16
 80018fe:	d53f      	bpl.n	8001980 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001900:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001904:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190c:	051b      	lsls	r3, r3, #20
 800190e:	0d1b      	lsrs	r3, r3, #20
 8001910:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001914:	eb04 010a 	add.w	r1, r4, sl
 8001918:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 800191c:	2b00      	cmp	r3, #0
 800191e:	d174      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001920:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001924:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8001928:	b29b      	uxth	r3, r3
 800192a:	3306      	adds	r3, #6
 800192c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001930:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001934:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001938:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 800193c:	b136      	cbz	r6, 800194c <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800193e:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8001942:	4633      	mov	r3, r6
 8001944:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001948:	f001 fce0 	bl	800330c <USB_ReadPMA>
 800194c:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8001950:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8001954:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8001958:	4433      	add	r3, r6
 800195a:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800195e:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8001962:	4432      	add	r2, r6
 8001964:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001968:	b123      	cbz	r3, 8001974 <HAL_PCD_IRQHandler+0x350>
 800196a:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 800196e:	4286      	cmp	r6, r0
 8001970:	f080 8086 	bcs.w	8001a80 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001974:	44a2      	add	sl, r4
 8001976:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 800197a:	4620      	mov	r0, r4
 800197c:	f003 f886 	bl	8004a8c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001980:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001984:	061a      	lsls	r2, r3, #24
 8001986:	f57f aef8 	bpl.w	800177a <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800198a:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800198c:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800198e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001992:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001994:	b29b      	uxth	r3, r3
 8001996:	403b      	ands	r3, r7
 8001998:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800199c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80019a0:	3502      	adds	r5, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d178      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019a6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019aa:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3302      	adds	r3, #2
 80019b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80019b6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80019ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80019be:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 80019c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019c6:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 80019c8:	b11b      	cbz	r3, 80019d2 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80019ca:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 80019cc:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80019ce:	f001 fb8b 	bl	80030e8 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019d2:	6822      	ldr	r2, [r4, #0]
 80019d4:	4426      	add	r6, r4
 80019d6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80019da:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80019de:	b29b      	uxth	r3, r3
 80019e0:	3302      	adds	r3, #2
 80019e2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80019e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80019ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 80019ee:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80019f4:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 80019f6:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80019f8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 80019fa:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019fc:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 8085 	bne.w	8001b0e <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a04:	f003 f84a 	bl	8004a9c <HAL_PCD_DataInStageCallback>
 8001a08:	e6b7      	b.n	800177a <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001a0a:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8001a0e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a18:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001a1c:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001a1e:	d021      	beq.n	8001a64 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a20:	3202      	adds	r2, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a28:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001a2c:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8001a30:	b136      	cbz	r6, 8001a40 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a32:	4633      	mov	r3, r6
 8001a34:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a38:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001a3c:	f001 fc66 	bl	800330c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8001a40:	eb04 030a 	add.w	r3, r4, sl
 8001a44:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8001a48:	6822      	ldr	r2, [r4, #0]
 8001a4a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a52:	051b      	lsls	r3, r3, #20
 8001a54:	0d1b      	lsrs	r3, r3, #20
 8001a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a5e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001a62:	e773      	b.n	800194c <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a64:	3206      	adds	r2, #6
 8001a66:	4413      	add	r3, r2
 8001a68:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a6c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001a70:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8001a74:	2e00      	cmp	r6, #0
 8001a76:	d0e3      	beq.n	8001a40 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a78:	4633      	mov	r3, r6
 8001a7a:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8001a7e:	e7db      	b.n	8001a38 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001a80:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff fd98 	bl	80015ba <HAL_PCD_EP_Receive>
 8001a8a:	e779      	b.n	8001980 <HAL_PCD_IRQHandler+0x35c>
 8001a8c:	ffff8f0f 	.word	0xffff8f0f
 8001a90:	ffffbf8f 	.word	0xffffbf8f
 8001a94:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001a98:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8001a9c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aa6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001aaa:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001aac:	d020      	beq.n	8001af0 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aae:	3202      	adds	r2, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001ab6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001aba:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac2:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8001ac4:	b11b      	cbz	r3, 8001ace <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001ac6:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001ac8:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001aca:	f001 fb0d 	bl	80030e8 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001ace:	19a3      	adds	r3, r4, r6
 8001ad0:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001ad4:	6822      	ldr	r2, [r4, #0]
 8001ad6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ade:	051b      	lsls	r3, r3, #20
 8001ae0:	0d1b      	lsrs	r3, r3, #20
 8001ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aea:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001aee:	e770      	b.n	80019d2 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001af0:	3206      	adds	r2, #6
 8001af2:	4413      	add	r3, r2
 8001af4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001af8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001afc:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b04:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0e1      	beq.n	8001ace <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001b0a:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001b0c:	e7dc      	b.n	8001ac8 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001b0e:	f7ff fd73 	bl	80015f8 <HAL_PCD_EP_Transmit>
 8001b12:	e632      	b.n	800177a <HAL_PCD_IRQHandler+0x156>

08001b14 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8001b14:	2201      	movs	r2, #1
{
 8001b16:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001b18:	b24b      	sxtb	r3, r1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001b20:	bfb5      	itete	lt
 8001b22:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001b26:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001b2a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001b2c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001b30:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8001b32:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8001b34:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8001b36:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001b38:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8001b3a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8001b3e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00e      	beq.n	8001b62 <HAL_PCD_EP_SetStall+0x4e>
 8001b44:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8001b48:	6800      	ldr	r0, [r0, #0]
 8001b4a:	f001 fa49 	bl	8002fe0 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8001b4e:	b925      	cbnz	r5, 8001b5a <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b50:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001b54:	6820      	ldr	r0, [r4, #0]
 8001b56:	f001 fac5 	bl	80030e4 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001b60:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001b62:	2002      	movs	r0, #2
}
 8001b64:	bd38      	pop	{r3, r4, r5, pc}

08001b66 <HAL_PCD_EP_ClrStall>:
{
 8001b66:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8001b68:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8001b6a:	b24b      	sxtb	r3, r1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001b72:	bfb5      	itete	lt
 8001b74:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001b78:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001b7c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001b7e:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001b82:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001b84:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8001b86:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001b88:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001b8a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8001b8e:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d009      	beq.n	8001ba8 <HAL_PCD_EP_ClrStall+0x42>
 8001b94:	2301      	movs	r3, #1
 8001b96:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8001b9a:	6800      	ldr	r0, [r0, #0]
 8001b9c:	f001 fa52 	bl	8003044 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001ba0:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001ba8:	2002      	movs	r0, #2
}
 8001baa:	bd38      	pop	{r3, r4, r5, pc}

08001bac <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001bac:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001bb0:	bf1b      	ittet	ne
 8001bb2:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001bb6:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bba:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001bbe:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001bc0:	bf08      	it	eq
 8001bc2:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001bc6:	b91a      	cbnz	r2, 8001bd0 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8001bc8:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001bca:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8001bcc:	2000      	movs	r0, #0
 8001bce:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001bd0:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8001bd2:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001bd4:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001bd6:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001bd8:	8103      	strh	r3, [r0, #8]
 8001bda:	e7f7      	b.n	8001bcc <HAL_PCDEx_PMAConfig+0x20>

08001bdc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bdc:	6803      	ldr	r3, [r0, #0]
{
 8001bde:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	07db      	lsls	r3, r3, #31
{
 8001be4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	d410      	bmi.n	8001c0a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be8:	682b      	ldr	r3, [r5, #0]
 8001bea:	079f      	lsls	r7, r3, #30
 8001bec:	d45e      	bmi.n	8001cac <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bee:	682b      	ldr	r3, [r5, #0]
 8001bf0:	0719      	lsls	r1, r3, #28
 8001bf2:	f100 8095 	bmi.w	8001d20 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf6:	682b      	ldr	r3, [r5, #0]
 8001bf8:	075a      	lsls	r2, r3, #29
 8001bfa:	f100 80bf 	bmi.w	8001d7c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfe:	69ea      	ldr	r2, [r5, #28]
 8001c00:	2a00      	cmp	r2, #0
 8001c02:	f040 812d 	bne.w	8001e60 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001c06:	2000      	movs	r0, #0
 8001c08:	e014      	b.n	8001c34 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c0a:	4c90      	ldr	r4, [pc, #576]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c0c:	6863      	ldr	r3, [r4, #4]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d007      	beq.n	8001c26 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c16:	6863      	ldr	r3, [r4, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d10c      	bne.n	8001c3a <HAL_RCC_OscConfig+0x5e>
 8001c20:	6863      	ldr	r3, [r4, #4]
 8001c22:	03de      	lsls	r6, r3, #15
 8001c24:	d509      	bpl.n	8001c3a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	039c      	lsls	r4, r3, #14
 8001c2a:	d5dd      	bpl.n	8001be8 <HAL_RCC_OscConfig+0xc>
 8001c2c:	686b      	ldr	r3, [r5, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1da      	bne.n	8001be8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001c32:	2001      	movs	r0, #1
}
 8001c34:	b002      	add	sp, #8
 8001c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3a:	686b      	ldr	r3, [r5, #4]
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c40:	d110      	bne.n	8001c64 <HAL_RCC_OscConfig+0x88>
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c48:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f811 	bl	8000c70 <HAL_GetTick>
 8001c4e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	0398      	lsls	r0, r3, #14
 8001c54:	d4c8      	bmi.n	8001be8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c56:	f7ff f80b 	bl	8000c70 <HAL_GetTick>
 8001c5a:	1b80      	subs	r0, r0, r6
 8001c5c:	2864      	cmp	r0, #100	; 0x64
 8001c5e:	d9f7      	bls.n	8001c50 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001c60:	2003      	movs	r0, #3
 8001c62:	e7e7      	b.n	8001c34 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c64:	b99b      	cbnz	r3, 8001c8e <HAL_RCC_OscConfig+0xb2>
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6c:	6023      	str	r3, [r4, #0]
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c74:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c76:	f7fe fffb 	bl	8000c70 <HAL_GetTick>
 8001c7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	0399      	lsls	r1, r3, #14
 8001c80:	d5b2      	bpl.n	8001be8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c82:	f7fe fff5 	bl	8000c70 <HAL_GetTick>
 8001c86:	1b80      	subs	r0, r0, r6
 8001c88:	2864      	cmp	r0, #100	; 0x64
 8001c8a:	d9f7      	bls.n	8001c7c <HAL_RCC_OscConfig+0xa0>
 8001c8c:	e7e8      	b.n	8001c60 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	d103      	bne.n	8001c9e <HAL_RCC_OscConfig+0xc2>
 8001c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c9a:	6023      	str	r3, [r4, #0]
 8001c9c:	e7d1      	b.n	8001c42 <HAL_RCC_OscConfig+0x66>
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca2:	6023      	str	r3, [r4, #0]
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001caa:	e7cd      	b.n	8001c48 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cac:	4c67      	ldr	r4, [pc, #412]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cae:	6863      	ldr	r3, [r4, #4]
 8001cb0:	f013 0f0c 	tst.w	r3, #12
 8001cb4:	d007      	beq.n	8001cc6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cb6:	6863      	ldr	r3, [r4, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d110      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x106>
 8001cc0:	6863      	ldr	r3, [r4, #4]
 8001cc2:	03da      	lsls	r2, r3, #15
 8001cc4:	d40d      	bmi.n	8001ce2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	079b      	lsls	r3, r3, #30
 8001cca:	d502      	bpl.n	8001cd2 <HAL_RCC_OscConfig+0xf6>
 8001ccc:	692b      	ldr	r3, [r5, #16]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d1af      	bne.n	8001c32 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	696a      	ldr	r2, [r5, #20]
 8001cd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cda:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001cde:	6023      	str	r3, [r4, #0]
 8001ce0:	e785      	b.n	8001bee <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce2:	692a      	ldr	r2, [r5, #16]
 8001ce4:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001ce6:	b16a      	cbz	r2, 8001d04 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cec:	f7fe ffc0 	bl	8000c70 <HAL_GetTick>
 8001cf0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	079f      	lsls	r7, r3, #30
 8001cf6:	d4ec      	bmi.n	8001cd2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7fe ffba 	bl	8000c70 <HAL_GetTick>
 8001cfc:	1b80      	subs	r0, r0, r6
 8001cfe:	2802      	cmp	r0, #2
 8001d00:	d9f7      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x116>
 8001d02:	e7ad      	b.n	8001c60 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001d04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d06:	f7fe ffb3 	bl	8000c70 <HAL_GetTick>
 8001d0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	0798      	lsls	r0, r3, #30
 8001d10:	f57f af6d 	bpl.w	8001bee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d14:	f7fe ffac 	bl	8000c70 <HAL_GetTick>
 8001d18:	1b80      	subs	r0, r0, r6
 8001d1a:	2802      	cmp	r0, #2
 8001d1c:	d9f6      	bls.n	8001d0c <HAL_RCC_OscConfig+0x130>
 8001d1e:	e79f      	b.n	8001c60 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d20:	69aa      	ldr	r2, [r5, #24]
 8001d22:	4c4a      	ldr	r4, [pc, #296]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d24:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <HAL_RCC_OscConfig+0x278>)
 8001d26:	b1da      	cbz	r2, 8001d60 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d2c:	f7fe ffa0 	bl	8000c70 <HAL_GetTick>
 8001d30:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d34:	079b      	lsls	r3, r3, #30
 8001d36:	d50d      	bpl.n	8001d54 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d38:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <HAL_RCC_OscConfig+0x27c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d44:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001d46:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001d48:	9b01      	ldr	r3, [sp, #4]
 8001d4a:	1e5a      	subs	r2, r3, #1
 8001d4c:	9201      	str	r2, [sp, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f9      	bne.n	8001d46 <HAL_RCC_OscConfig+0x16a>
 8001d52:	e750      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d54:	f7fe ff8c 	bl	8000c70 <HAL_GetTick>
 8001d58:	1b80      	subs	r0, r0, r6
 8001d5a:	2802      	cmp	r0, #2
 8001d5c:	d9e9      	bls.n	8001d32 <HAL_RCC_OscConfig+0x156>
 8001d5e:	e77f      	b.n	8001c60 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001d60:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d62:	f7fe ff85 	bl	8000c70 <HAL_GetTick>
 8001d66:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d6a:	079f      	lsls	r7, r3, #30
 8001d6c:	f57f af43 	bpl.w	8001bf6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d70:	f7fe ff7e 	bl	8000c70 <HAL_GetTick>
 8001d74:	1b80      	subs	r0, r0, r6
 8001d76:	2802      	cmp	r0, #2
 8001d78:	d9f6      	bls.n	8001d68 <HAL_RCC_OscConfig+0x18c>
 8001d7a:	e771      	b.n	8001c60 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7c:	4c33      	ldr	r4, [pc, #204]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d7e:	69e3      	ldr	r3, [r4, #28]
 8001d80:	00d8      	lsls	r0, r3, #3
 8001d82:	d424      	bmi.n	8001dce <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001d84:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	69e3      	ldr	r3, [r4, #28]
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	61e3      	str	r3, [r4, #28]
 8001d8e:	69e3      	ldr	r3, [r4, #28]
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	4e30      	ldr	r6, [pc, #192]	; (8001e5c <HAL_RCC_OscConfig+0x280>)
 8001d9a:	6833      	ldr	r3, [r6, #0]
 8001d9c:	05d9      	lsls	r1, r3, #23
 8001d9e:	d518      	bpl.n	8001dd2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	68eb      	ldr	r3, [r5, #12]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d126      	bne.n	8001df4 <HAL_RCC_OscConfig+0x218>
 8001da6:	6a23      	ldr	r3, [r4, #32]
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001dae:	f7fe ff5f 	bl	8000c70 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001db6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	6a23      	ldr	r3, [r4, #32]
 8001dba:	079b      	lsls	r3, r3, #30
 8001dbc:	d53f      	bpl.n	8001e3e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001dbe:	2f00      	cmp	r7, #0
 8001dc0:	f43f af1d 	beq.w	8001bfe <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc4:	69e3      	ldr	r3, [r4, #28]
 8001dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dca:	61e3      	str	r3, [r4, #28]
 8001dcc:	e717      	b.n	8001bfe <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2700      	movs	r7, #0
 8001dd0:	e7e2      	b.n	8001d98 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd2:	6833      	ldr	r3, [r6, #0]
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001dda:	f7fe ff49 	bl	8000c70 <HAL_GetTick>
 8001dde:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	6833      	ldr	r3, [r6, #0]
 8001de2:	05da      	lsls	r2, r3, #23
 8001de4:	d4dc      	bmi.n	8001da0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7fe ff43 	bl	8000c70 <HAL_GetTick>
 8001dea:	eba0 0008 	sub.w	r0, r0, r8
 8001dee:	2864      	cmp	r0, #100	; 0x64
 8001df0:	d9f6      	bls.n	8001de0 <HAL_RCC_OscConfig+0x204>
 8001df2:	e735      	b.n	8001c60 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df4:	b9ab      	cbnz	r3, 8001e22 <HAL_RCC_OscConfig+0x246>
 8001df6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6223      	str	r3, [r4, #32]
 8001e02:	6a23      	ldr	r3, [r4, #32]
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e0a:	f7fe ff31 	bl	8000c70 <HAL_GetTick>
 8001e0e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e10:	6a23      	ldr	r3, [r4, #32]
 8001e12:	0798      	lsls	r0, r3, #30
 8001e14:	d5d3      	bpl.n	8001dbe <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7fe ff2b 	bl	8000c70 <HAL_GetTick>
 8001e1a:	1b80      	subs	r0, r0, r6
 8001e1c:	4540      	cmp	r0, r8
 8001e1e:	d9f7      	bls.n	8001e10 <HAL_RCC_OscConfig+0x234>
 8001e20:	e71e      	b.n	8001c60 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	6a23      	ldr	r3, [r4, #32]
 8001e26:	d103      	bne.n	8001e30 <HAL_RCC_OscConfig+0x254>
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6223      	str	r3, [r4, #32]
 8001e2e:	e7ba      	b.n	8001da6 <HAL_RCC_OscConfig+0x1ca>
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6223      	str	r3, [r4, #32]
 8001e36:	6a23      	ldr	r3, [r4, #32]
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	e7b6      	b.n	8001dac <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe ff17 	bl	8000c70 <HAL_GetTick>
 8001e42:	eba0 0008 	sub.w	r0, r0, r8
 8001e46:	42b0      	cmp	r0, r6
 8001e48:	d9b6      	bls.n	8001db8 <HAL_RCC_OscConfig+0x1dc>
 8001e4a:	e709      	b.n	8001c60 <HAL_RCC_OscConfig+0x84>
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	42420000 	.word	0x42420000
 8001e54:	42420480 	.word	0x42420480
 8001e58:	20000118 	.word	0x20000118
 8001e5c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e60:	4c22      	ldr	r4, [pc, #136]	; (8001eec <HAL_RCC_OscConfig+0x310>)
 8001e62:	6863      	ldr	r3, [r4, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	f43f aee2 	beq.w	8001c32 <HAL_RCC_OscConfig+0x56>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	4e1f      	ldr	r6, [pc, #124]	; (8001ef0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e72:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001e74:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e76:	d12b      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001e78:	f7fe fefa 	bl	8000c70 <HAL_GetTick>
 8001e7c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	0199      	lsls	r1, r3, #6
 8001e82:	d41f      	bmi.n	8001ec4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e84:	6a2b      	ldr	r3, [r5, #32]
 8001e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8a:	d105      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e8c:	6862      	ldr	r2, [r4, #4]
 8001e8e:	68a9      	ldr	r1, [r5, #8]
 8001e90:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001e94:	430a      	orrs	r2, r1
 8001e96:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e98:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001e9a:	6862      	ldr	r2, [r4, #4]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fee1 	bl	8000c70 <HAL_GetTick>
 8001eae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	019a      	lsls	r2, r3, #6
 8001eb4:	f53f aea7 	bmi.w	8001c06 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe feda 	bl	8000c70 <HAL_GetTick>
 8001ebc:	1b40      	subs	r0, r0, r5
 8001ebe:	2802      	cmp	r0, #2
 8001ec0:	d9f6      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
 8001ec2:	e6cd      	b.n	8001c60 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe fed4 	bl	8000c70 <HAL_GetTick>
 8001ec8:	1bc0      	subs	r0, r0, r7
 8001eca:	2802      	cmp	r0, #2
 8001ecc:	d9d7      	bls.n	8001e7e <HAL_RCC_OscConfig+0x2a2>
 8001ece:	e6c7      	b.n	8001c60 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001ed0:	f7fe fece 	bl	8000c70 <HAL_GetTick>
 8001ed4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	019b      	lsls	r3, r3, #6
 8001eda:	f57f ae94 	bpl.w	8001c06 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ede:	f7fe fec7 	bl	8000c70 <HAL_GetTick>
 8001ee2:	1b40      	subs	r0, r0, r5
 8001ee4:	2802      	cmp	r0, #2
 8001ee6:	d9f6      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x2fa>
 8001ee8:	e6ba      	b.n	8001c60 <HAL_RCC_OscConfig+0x84>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	42420060 	.word	0x42420060

08001ef4 <HAL_RCC_GetSysClockFreq>:
{
 8001ef4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001ef8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001efa:	ac02      	add	r4, sp, #8
 8001efc:	f103 0510 	add.w	r5, r3, #16
 8001f00:	4622      	mov	r2, r4
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	3308      	adds	r3, #8
 8001f08:	c203      	stmia	r2!, {r0, r1}
 8001f0a:	42ab      	cmp	r3, r5
 8001f0c:	4614      	mov	r4, r2
 8001f0e:	d1f7      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f10:	2301      	movs	r3, #1
 8001f12:	f88d 3004 	strb.w	r3, [sp, #4]
 8001f16:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001f18:	4911      	ldr	r1, [pc, #68]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f1a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001f1e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f20:	f003 020c 	and.w	r2, r3, #12
 8001f24:	2a08      	cmp	r2, #8
 8001f26:	d117      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f28:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001f2c:	a806      	add	r0, sp, #24
 8001f2e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f30:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f32:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f36:	d50c      	bpl.n	8001f52 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f38:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3a:	480a      	ldr	r0, [pc, #40]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f3c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f40:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f42:	aa06      	add	r2, sp, #24
 8001f44:	4413      	add	r3, r2
 8001f46:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f4a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001f4e:	b007      	add	sp, #28
 8001f50:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x74>)
 8001f54:	4350      	muls	r0, r2
 8001f56:	e7fa      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001f5a:	e7f8      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x5a>
 8001f5c:	08005668 	.word	0x08005668
 8001f60:	40021000 	.word	0x40021000
 8001f64:	007a1200 	.word	0x007a1200
 8001f68:	003d0900 	.word	0x003d0900

08001f6c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f6c:	4a54      	ldr	r2, [pc, #336]	; (80020c0 <HAL_RCC_ClockConfig+0x154>)
{
 8001f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f72:	6813      	ldr	r3, [r2, #0]
{
 8001f74:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	428b      	cmp	r3, r1
{
 8001f7c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f7e:	d32a      	bcc.n	8001fd6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	6829      	ldr	r1, [r5, #0]
 8001f82:	078c      	lsls	r4, r1, #30
 8001f84:	d434      	bmi.n	8001ff0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f86:	07ca      	lsls	r2, r1, #31
 8001f88:	d447      	bmi.n	800201a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f8a:	4a4d      	ldr	r2, [pc, #308]	; (80020c0 <HAL_RCC_ClockConfig+0x154>)
 8001f8c:	6813      	ldr	r3, [r2, #0]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	429e      	cmp	r6, r3
 8001f94:	f0c0 8082 	bcc.w	800209c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	682a      	ldr	r2, [r5, #0]
 8001f9a:	4c4a      	ldr	r4, [pc, #296]	; (80020c4 <HAL_RCC_ClockConfig+0x158>)
 8001f9c:	f012 0f04 	tst.w	r2, #4
 8001fa0:	f040 8087 	bne.w	80020b2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	0713      	lsls	r3, r2, #28
 8001fa6:	d506      	bpl.n	8001fb6 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fa8:	6863      	ldr	r3, [r4, #4]
 8001faa:	692a      	ldr	r2, [r5, #16]
 8001fac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001fb0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fb4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fb6:	f7ff ff9d 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8001fba:	6863      	ldr	r3, [r4, #4]
 8001fbc:	4a42      	ldr	r2, [pc, #264]	; (80020c8 <HAL_RCC_ClockConfig+0x15c>)
 8001fbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	40d8      	lsrs	r0, r3
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_RCC_ClockConfig+0x160>)
 8001fc8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7fe fe0e 	bl	8000bec <HAL_InitTick>
  return HAL_OK;
 8001fd0:	2000      	movs	r0, #0
}
 8001fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	f023 0307 	bic.w	r3, r3, #7
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	4299      	cmp	r1, r3
 8001fe8:	d0ca      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001fea:	2001      	movs	r0, #1
 8001fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ff0:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff6:	bf1e      	ittt	ne
 8001ff8:	685a      	ldrne	r2, [r3, #4]
 8001ffa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001ffe:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002000:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002002:	bf42      	ittt	mi
 8002004:	685a      	ldrmi	r2, [r3, #4]
 8002006:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800200a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	68a8      	ldr	r0, [r5, #8]
 8002010:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002014:	4302      	orrs	r2, r0
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	e7b5      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201a:	686a      	ldr	r2, [r5, #4]
 800201c:	4c29      	ldr	r4, [pc, #164]	; (80020c4 <HAL_RCC_ClockConfig+0x158>)
 800201e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002020:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002022:	d11c      	bne.n	800205e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002024:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	d0df      	beq.n	8001fea <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002030:	f023 0303 	bic.w	r3, r3, #3
 8002034:	4313      	orrs	r3, r2
 8002036:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002038:	f7fe fe1a 	bl	8000c70 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800203e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002040:	2b01      	cmp	r3, #1
 8002042:	d114      	bne.n	800206e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002044:	6863      	ldr	r3, [r4, #4]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b04      	cmp	r3, #4
 800204c:	d09d      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204e:	f7fe fe0f 	bl	8000c70 <HAL_GetTick>
 8002052:	1bc0      	subs	r0, r0, r7
 8002054:	4540      	cmp	r0, r8
 8002056:	d9f5      	bls.n	8002044 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8002058:	2003      	movs	r0, #3
 800205a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205e:	2a02      	cmp	r2, #2
 8002060:	d102      	bne.n	8002068 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002062:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002066:	e7df      	b.n	8002028 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	f013 0f02 	tst.w	r3, #2
 800206c:	e7dc      	b.n	8002028 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	2b02      	cmp	r3, #2
 8002070:	d10f      	bne.n	8002092 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002072:	6863      	ldr	r3, [r4, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b08      	cmp	r3, #8
 800207a:	d086      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207c:	f7fe fdf8 	bl	8000c70 <HAL_GetTick>
 8002080:	1bc0      	subs	r0, r0, r7
 8002082:	4540      	cmp	r0, r8
 8002084:	d9f5      	bls.n	8002072 <HAL_RCC_ClockConfig+0x106>
 8002086:	e7e7      	b.n	8002058 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7fe fdf2 	bl	8000c70 <HAL_GetTick>
 800208c:	1bc0      	subs	r0, r0, r7
 800208e:	4540      	cmp	r0, r8
 8002090:	d8e2      	bhi.n	8002058 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002092:	6863      	ldr	r3, [r4, #4]
 8002094:	f013 0f0c 	tst.w	r3, #12
 8002098:	d1f6      	bne.n	8002088 <HAL_RCC_ClockConfig+0x11c>
 800209a:	e776      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209c:	6813      	ldr	r3, [r2, #0]
 800209e:	f023 0307 	bic.w	r3, r3, #7
 80020a2:	4333      	orrs	r3, r6
 80020a4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020a6:	6813      	ldr	r3, [r2, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	429e      	cmp	r6, r3
 80020ae:	d19c      	bne.n	8001fea <HAL_RCC_ClockConfig+0x7e>
 80020b0:	e772      	b.n	8001f98 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b2:	6863      	ldr	r3, [r4, #4]
 80020b4:	68e9      	ldr	r1, [r5, #12]
 80020b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020ba:	430b      	orrs	r3, r1
 80020bc:	6063      	str	r3, [r4, #4]
 80020be:	e771      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x38>
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	0800568d 	.word	0x0800568d
 80020cc:	20000118 	.word	0x20000118

080020d0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	4a03      	ldr	r2, [pc, #12]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020de:	6810      	ldr	r0, [r2, #0]
}    
 80020e0:	40d8      	lsrs	r0, r3
 80020e2:	4770      	bx	lr
 80020e4:	40021000 	.word	0x40021000
 80020e8:	0800569d 	.word	0x0800569d
 80020ec:	20000118 	.word	0x20000118

080020f0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x14>)
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <HAL_RCC_GetPCLK2Freq+0x18>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	4a03      	ldr	r2, [pc, #12]	; (800210c <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020fe:	6810      	ldr	r0, [r2, #0]
} 
 8002100:	40d8      	lsrs	r0, r3
 8002102:	4770      	bx	lr
 8002104:	40021000 	.word	0x40021000
 8002108:	0800569d 	.word	0x0800569d
 800210c:	20000118 	.word	0x20000118

08002110 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002110:	6803      	ldr	r3, [r0, #0]
{
 8002112:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002116:	07d9      	lsls	r1, r3, #31
{
 8002118:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800211a:	d520      	bpl.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211c:	4c35      	ldr	r4, [pc, #212]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800211e:	69e3      	ldr	r3, [r4, #28]
 8002120:	00da      	lsls	r2, r3, #3
 8002122:	d432      	bmi.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002124:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	69e3      	ldr	r3, [r4, #28]
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	61e3      	str	r3, [r4, #28]
 800212e:	69e3      	ldr	r3, [r4, #28]
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	4e2f      	ldr	r6, [pc, #188]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800213a:	6833      	ldr	r3, [r6, #0]
 800213c:	05db      	lsls	r3, r3, #23
 800213e:	d526      	bpl.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002140:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002142:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002146:	d136      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002148:	6a23      	ldr	r3, [r4, #32]
 800214a:	686a      	ldr	r2, [r5, #4]
 800214c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002150:	4313      	orrs	r3, r2
 8002152:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002154:	b11f      	cbz	r7, 800215e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002156:	69e3      	ldr	r3, [r4, #28]
 8002158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800215e:	6828      	ldr	r0, [r5, #0]
 8002160:	0783      	lsls	r3, r0, #30
 8002162:	d506      	bpl.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002164:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002166:	68a9      	ldr	r1, [r5, #8]
 8002168:	6853      	ldr	r3, [r2, #4]
 800216a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800216e:	430b      	orrs	r3, r1
 8002170:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002172:	f010 0010 	ands.w	r0, r0, #16
 8002176:	d01b      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002178:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800217a:	68e9      	ldr	r1, [r5, #12]
 800217c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800217e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002180:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002184:	430b      	orrs	r3, r1
 8002186:	6053      	str	r3, [r2, #4]
 8002188:	e012      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800218a:	2700      	movs	r7, #0
 800218c:	e7d4      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218e:	6833      	ldr	r3, [r6, #0]
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002196:	f7fe fd6b 	bl	8000c70 <HAL_GetTick>
 800219a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	6833      	ldr	r3, [r6, #0]
 800219e:	05d8      	lsls	r0, r3, #23
 80021a0:	d4ce      	bmi.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a2:	f7fe fd65 	bl	8000c70 <HAL_GetTick>
 80021a6:	eba0 0008 	sub.w	r0, r0, r8
 80021aa:	2864      	cmp	r0, #100	; 0x64
 80021ac:	d9f6      	bls.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80021ae:	2003      	movs	r0, #3
}
 80021b0:	b002      	add	sp, #8
 80021b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021b6:	686a      	ldr	r2, [r5, #4]
 80021b8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80021bc:	4293      	cmp	r3, r2
 80021be:	d0c3      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80021c0:	2001      	movs	r0, #1
 80021c2:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021c4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80021c6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021c8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ce:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80021d0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021d2:	07d9      	lsls	r1, r3, #31
 80021d4:	d5b8      	bpl.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80021d6:	f7fe fd4b 	bl	8000c70 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80021de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	6a23      	ldr	r3, [r4, #32]
 80021e2:	079a      	lsls	r2, r3, #30
 80021e4:	d4b0      	bmi.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7fe fd43 	bl	8000c70 <HAL_GetTick>
 80021ea:	1b80      	subs	r0, r0, r6
 80021ec:	4540      	cmp	r0, r8
 80021ee:	d9f7      	bls.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80021f0:	e7dd      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40007000 	.word	0x40007000
 80021fc:	42420440 	.word	0x42420440

08002200 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002204:	4b35      	ldr	r3, [pc, #212]	; (80022dc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8002206:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002208:	ad02      	add	r5, sp, #8
 800220a:	f103 0610 	add.w	r6, r3, #16
 800220e:	462a      	mov	r2, r5
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	3308      	adds	r3, #8
 8002216:	c203      	stmia	r2!, {r0, r1}
 8002218:	42b3      	cmp	r3, r6
 800221a:	4615      	mov	r5, r2
 800221c:	d1f7      	bne.n	800220e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800221e:	2301      	movs	r3, #1
 8002220:	f88d 3004 	strb.w	r3, [sp, #4]
 8002224:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8002226:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002228:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 800222c:	d047      	beq.n	80022be <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 800222e:	2c10      	cmp	r4, #16
 8002230:	d017      	beq.n	8002262 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8002232:	2c01      	cmp	r4, #1
 8002234:	d14f      	bne.n	80022d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002236:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 800223a:	4a29      	ldr	r2, [pc, #164]	; (80022e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 800223c:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800223e:	4019      	ands	r1, r3
 8002240:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8002244:	d044      	beq.n	80022d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800224e:	d12d      	bne.n	80022ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8002250:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002254:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8002256:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 800225a:	bf08      	it	eq
 800225c:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 800225e:	b006      	add	sp, #24
 8002260:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8002262:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002264:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800226c:	d0f7      	beq.n	800225e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800226e:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8002272:	a806      	add	r0, sp, #24
 8002274:	4402      	add	r2, r0
 8002276:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800227a:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800227c:	bf41      	itttt	mi
 800227e:	685a      	ldrmi	r2, [r3, #4]
 8002280:	a906      	addmi	r1, sp, #24
 8002282:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8002286:	1852      	addmi	r2, r2, r1
 8002288:	bf44      	itt	mi
 800228a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800228e:	4a15      	ldrmi	r2, [pc, #84]	; (80022e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002290:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002292:	bf4c      	ite	mi
 8002294:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002298:	4a13      	ldrpl	r2, [pc, #76]	; (80022e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800229a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800229c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80022a0:	d4dd      	bmi.n	800225e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 80022a2:	2303      	movs	r3, #3
 80022a4:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80022a6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80022aa:	e7d8      	b.n	800225e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80022ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022b0:	d111      	bne.n	80022d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80022b2:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80022b4:	f24f 4024 	movw	r0, #62500	; 0xf424
 80022b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022bc:	e7cd      	b.n	800225a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80022be:	f7ff ff17 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80022ca:	3301      	adds	r3, #1
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	e7ea      	b.n	80022a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 80022d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022d4:	e7c3      	b.n	800225e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 80022d6:	2000      	movs	r0, #0
 80022d8:	e7c1      	b.n	800225e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80022da:	bf00      	nop
 80022dc:	08005678 	.word	0x08005678
 80022e0:	40021000 	.word	0x40021000
 80022e4:	007a1200 	.word	0x007a1200
 80022e8:	003d0900 	.word	0x003d0900

080022ec <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ec:	6a03      	ldr	r3, [r0, #32]
{
 80022ee:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022f6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022fa:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022fe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002302:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002304:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002306:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800230a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800230c:	4d0a      	ldr	r5, [pc, #40]	; (8002338 <TIM_OC1_SetConfig+0x4c>)
 800230e:	42a8      	cmp	r0, r5
 8002310:	d10b      	bne.n	800232a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002312:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002314:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002318:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800231a:	698e      	ldr	r6, [r1, #24]
 800231c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800231e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002322:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002324:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002328:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800232a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800232c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800232e:	684a      	ldr	r2, [r1, #4]
 8002330:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002332:	6203      	str	r3, [r0, #32]
 8002334:	bd70      	pop	{r4, r5, r6, pc}
 8002336:	bf00      	nop
 8002338:	40012c00 	.word	0x40012c00

0800233c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800233c:	6a03      	ldr	r3, [r0, #32]
{
 800233e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002344:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002346:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002348:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800234a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800234c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800234e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002352:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002354:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002356:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800235a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800235e:	4d0b      	ldr	r5, [pc, #44]	; (800238c <TIM_OC3_SetConfig+0x50>)
 8002360:	42a8      	cmp	r0, r5
 8002362:	d10d      	bne.n	8002380 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002364:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002366:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800236a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800236e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002370:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002372:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002376:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800237c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002380:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002382:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002384:	684a      	ldr	r2, [r1, #4]
 8002386:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002388:	6203      	str	r3, [r0, #32]
 800238a:	bd70      	pop	{r4, r5, r6, pc}
 800238c:	40012c00 	.word	0x40012c00

08002390 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002390:	6a03      	ldr	r3, [r0, #32]
{
 8002392:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002398:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800239a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800239c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800239e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023a2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023aa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80023ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023b0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80023b4:	4d06      	ldr	r5, [pc, #24]	; (80023d0 <TIM_OC4_SetConfig+0x40>)
 80023b6:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80023b8:	bf02      	ittt	eq
 80023ba:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023bc:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80023c0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023c6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023c8:	684a      	ldr	r2, [r1, #4]
 80023ca:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023cc:	6203      	str	r3, [r0, #32]
 80023ce:	bd30      	pop	{r4, r5, pc}
 80023d0:	40012c00 	.word	0x40012c00

080023d4 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023d4:	6803      	ldr	r3, [r0, #0]
}
 80023d6:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
}
 80023e8:	4770      	bx	lr

080023ea <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80023ea:	6803      	ldr	r3, [r0, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80023f4:	f241 1211 	movw	r2, #4369	; 0x1111
 80023f8:	6a19      	ldr	r1, [r3, #32]
 80023fa:	4211      	tst	r1, r2
 80023fc:	d108      	bne.n	8002410 <HAL_TIM_Base_Stop_IT+0x26>
 80023fe:	f240 4244 	movw	r2, #1092	; 0x444
 8002402:	6a19      	ldr	r1, [r3, #32]
 8002404:	4211      	tst	r1, r2
 8002406:	bf02      	ittt	eq
 8002408:	681a      	ldreq	r2, [r3, #0]
 800240a:	f022 0201 	biceq.w	r2, r2, #1
 800240e:	601a      	streq	r2, [r3, #0]
}
 8002410:	2000      	movs	r0, #0
 8002412:	4770      	bx	lr

08002414 <HAL_TIM_PWM_MspInit>:
 8002414:	4770      	bx	lr

08002416 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002416:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800241a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800241c:	2b01      	cmp	r3, #1
 800241e:	f04f 0302 	mov.w	r3, #2
 8002422:	d01c      	beq.n	800245e <HAL_TIM_ConfigClockSource+0x48>
 8002424:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002426:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800242a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800242c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002430:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002432:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002436:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800243a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800243c:	680a      	ldr	r2, [r1, #0]
 800243e:	2a40      	cmp	r2, #64	; 0x40
 8002440:	d079      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x120>
 8002442:	d819      	bhi.n	8002478 <HAL_TIM_ConfigClockSource+0x62>
 8002444:	2a10      	cmp	r2, #16
 8002446:	f000 8093 	beq.w	8002570 <HAL_TIM_ConfigClockSource+0x15a>
 800244a:	d80a      	bhi.n	8002462 <HAL_TIM_ConfigClockSource+0x4c>
 800244c:	2a00      	cmp	r2, #0
 800244e:	f000 8089 	beq.w	8002564 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002452:	2301      	movs	r3, #1
 8002454:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002458:	2300      	movs	r3, #0
 800245a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800245e:	4618      	mov	r0, r3
}
 8002460:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002462:	2a20      	cmp	r2, #32
 8002464:	f000 808a 	beq.w	800257c <HAL_TIM_ConfigClockSource+0x166>
 8002468:	2a30      	cmp	r2, #48	; 0x30
 800246a:	d1f2      	bne.n	8002452 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800246c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800246e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002472:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002476:	e036      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002478:	2a70      	cmp	r2, #112	; 0x70
 800247a:	d036      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0xd4>
 800247c:	d81b      	bhi.n	80024b6 <HAL_TIM_ConfigClockSource+0xa0>
 800247e:	2a50      	cmp	r2, #80	; 0x50
 8002480:	d042      	beq.n	8002508 <HAL_TIM_ConfigClockSource+0xf2>
 8002482:	2a60      	cmp	r2, #96	; 0x60
 8002484:	d1e5      	bne.n	8002452 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002486:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002488:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800248a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800248e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002490:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002492:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002494:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002496:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800249a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800249e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80024a6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80024a8:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80024aa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024b0:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80024b4:	e017      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80024b6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80024ba:	d011      	beq.n	80024e0 <HAL_TIM_ConfigClockSource+0xca>
 80024bc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80024c0:	d1c7      	bne.n	8002452 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024c2:	688a      	ldr	r2, [r1, #8]
 80024c4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80024c6:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024c8:	68c9      	ldr	r1, [r1, #12]
 80024ca:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024cc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024d4:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024d6:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024de:	e002      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	e7b3      	b.n	8002452 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ea:	688a      	ldr	r2, [r1, #8]
 80024ec:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80024ee:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f0:	68c9      	ldr	r1, [r1, #12]
 80024f2:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024fc:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80024fe:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002500:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002502:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002506:	e7ee      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002508:	684c      	ldr	r4, [r1, #4]
 800250a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800250c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800250e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002510:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002514:	f025 0501 	bic.w	r5, r5, #1
 8002518:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800251a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800251c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800251e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002522:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002528:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800252a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800252c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002530:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002534:	e7d7      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002536:	684c      	ldr	r4, [r1, #4]
 8002538:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800253a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800253c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800253e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002542:	f025 0501 	bic.w	r5, r5, #1
 8002546:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002548:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800254a:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800254c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002550:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002556:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002558:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800255a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800255e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002562:	e7c0      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002564:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002566:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800256a:	f042 0207 	orr.w	r2, r2, #7
 800256e:	e7ba      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002570:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002572:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002576:	f042 0217 	orr.w	r2, r2, #23
 800257a:	e7b4      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800257c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800257e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002582:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002586:	e7ae      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xd0>

08002588 <HAL_TIM_PeriodElapsedCallback>:
 8002588:	4770      	bx	lr

0800258a <HAL_TIM_OC_DelayElapsedCallback>:
 800258a:	4770      	bx	lr

0800258c <HAL_TIM_IC_CaptureCallback>:
 800258c:	4770      	bx	lr

0800258e <HAL_TIM_PWM_PulseFinishedCallback>:
 800258e:	4770      	bx	lr

08002590 <HAL_TIM_TriggerCallback>:
 8002590:	4770      	bx	lr

08002592 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002592:	6803      	ldr	r3, [r0, #0]
{
 8002594:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002596:	691a      	ldr	r2, [r3, #16]
{
 8002598:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800259a:	0791      	lsls	r1, r2, #30
 800259c:	d50e      	bpl.n	80025bc <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	0792      	lsls	r2, r2, #30
 80025a2:	d50b      	bpl.n	80025bc <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025a4:	f06f 0202 	mvn.w	r2, #2
 80025a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025aa:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025ac:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ae:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b0:	079b      	lsls	r3, r3, #30
 80025b2:	d077      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80025b4:	f7ff ffea 	bl	800258c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b8:	2300      	movs	r3, #0
 80025ba:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	0750      	lsls	r0, r2, #29
 80025c2:	d510      	bpl.n	80025e6 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	0751      	lsls	r1, r2, #29
 80025c8:	d50d      	bpl.n	80025e6 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025ca:	f06f 0204 	mvn.w	r2, #4
 80025ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80025da:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025dc:	d068      	beq.n	80026b0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80025de:	f7ff ffd5 	bl	800258c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	2300      	movs	r3, #0
 80025e4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	0712      	lsls	r2, r2, #28
 80025ec:	d50f      	bpl.n	800260e <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	0710      	lsls	r0, r2, #28
 80025f2:	d50c      	bpl.n	800260e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025f4:	f06f 0208 	mvn.w	r2, #8
 80025f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025fa:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025fc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025fe:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002600:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002604:	d05a      	beq.n	80026bc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	f7ff ffc1 	bl	800258c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260a:	2300      	movs	r3, #0
 800260c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	06d2      	lsls	r2, r2, #27
 8002614:	d510      	bpl.n	8002638 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	06d0      	lsls	r0, r2, #27
 800261a:	d50d      	bpl.n	8002638 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800261c:	f06f 0210 	mvn.w	r2, #16
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002622:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002624:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002626:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002628:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800262c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800262e:	d04b      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002630:	f7ff ffac 	bl	800258c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002634:	2300      	movs	r3, #0
 8002636:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	07d1      	lsls	r1, r2, #31
 800263e:	d508      	bpl.n	8002652 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	07d2      	lsls	r2, r2, #31
 8002644:	d505      	bpl.n	8002652 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002646:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800264a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800264c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800264e:	f7ff ff9b 	bl	8002588 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	0610      	lsls	r0, r2, #24
 8002658:	d508      	bpl.n	800266c <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	0611      	lsls	r1, r2, #24
 800265e:	d505      	bpl.n	800266c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002660:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002664:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002666:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002668:	f000 f975 	bl	8002956 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	0652      	lsls	r2, r2, #25
 8002672:	d508      	bpl.n	8002686 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	0650      	lsls	r0, r2, #25
 8002678:	d505      	bpl.n	8002686 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800267a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800267e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002680:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002682:	f7ff ff85 	bl	8002590 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	0691      	lsls	r1, r2, #26
 800268c:	d522      	bpl.n	80026d4 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	0692      	lsls	r2, r2, #26
 8002692:	d51f      	bpl.n	80026d4 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002694:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002698:	4620      	mov	r0, r4
}
 800269a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800269e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80026a0:	f000 b958 	b.w	8002954 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a4:	f7ff ff71 	bl	800258a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7ff ff70 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
 80026ae:	e783      	b.n	80025b8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b0:	f7ff ff6b 	bl	800258a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff ff6a 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
 80026ba:	e792      	b.n	80025e2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026bc:	f7ff ff65 	bl	800258a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7ff ff64 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
 80026c6:	e7a0      	b.n	800260a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c8:	f7ff ff5f 	bl	800258a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7ff ff5e 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
 80026d2:	e7af      	b.n	8002634 <HAL_TIM_IRQHandler+0xa2>
 80026d4:	bd10      	pop	{r4, pc}
	...

080026d8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d8:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80026da:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026dc:	4290      	cmp	r0, r2
 80026de:	d00a      	beq.n	80026f6 <TIM_Base_SetConfig+0x1e>
 80026e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026e4:	d007      	beq.n	80026f6 <TIM_Base_SetConfig+0x1e>
 80026e6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026ea:	4290      	cmp	r0, r2
 80026ec:	d003      	beq.n	80026f6 <TIM_Base_SetConfig+0x1e>
 80026ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026f2:	4290      	cmp	r0, r2
 80026f4:	d115      	bne.n	8002722 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80026f6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80026fc:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fe:	4a11      	ldr	r2, [pc, #68]	; (8002744 <TIM_Base_SetConfig+0x6c>)
 8002700:	4290      	cmp	r0, r2
 8002702:	d00a      	beq.n	800271a <TIM_Base_SetConfig+0x42>
 8002704:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002708:	d007      	beq.n	800271a <TIM_Base_SetConfig+0x42>
 800270a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800270e:	4290      	cmp	r0, r2
 8002710:	d003      	beq.n	800271a <TIM_Base_SetConfig+0x42>
 8002712:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002716:	4290      	cmp	r0, r2
 8002718:	d103      	bne.n	8002722 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800271a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002720:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002722:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002728:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800272a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800272c:	688b      	ldr	r3, [r1, #8]
 800272e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002730:	680b      	ldr	r3, [r1, #0]
 8002732:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <TIM_Base_SetConfig+0x6c>)
 8002736:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002738:	bf04      	itt	eq
 800273a:	690b      	ldreq	r3, [r1, #16]
 800273c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800273e:	2301      	movs	r3, #1
 8002740:	6143      	str	r3, [r0, #20]
 8002742:	4770      	bx	lr
 8002744:	40012c00 	.word	0x40012c00

08002748 <HAL_TIM_Base_Init>:
{
 8002748:	b510      	push	{r4, lr}
  if(htim == NULL)
 800274a:	4604      	mov	r4, r0
 800274c:	b1a0      	cbz	r0, 8002778 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800274e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002752:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002756:	b91b      	cbnz	r3, 8002760 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002758:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800275c:	f001 ff68 	bl	8004630 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002760:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002762:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002764:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002768:	1d21      	adds	r1, r4, #4
 800276a:	f7ff ffb5 	bl	80026d8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800276e:	2301      	movs	r3, #1
  return HAL_OK;
 8002770:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002772:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002776:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002778:	2001      	movs	r0, #1
}
 800277a:	bd10      	pop	{r4, pc}

0800277c <HAL_TIM_PWM_Init>:
{
 800277c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800277e:	4604      	mov	r4, r0
 8002780:	b1a0      	cbz	r0, 80027ac <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002782:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002786:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800278a:	b91b      	cbnz	r3, 8002794 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800278c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002790:	f7ff fe40 	bl	8002414 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002794:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002796:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002798:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800279c:	1d21      	adds	r1, r4, #4
 800279e:	f7ff ff9b 	bl	80026d8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80027a2:	2301      	movs	r3, #1
  return HAL_OK;
 80027a4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80027a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80027aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027ac:	2001      	movs	r0, #1
}
 80027ae:	bd10      	pop	{r4, pc}

080027b0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b0:	6a03      	ldr	r3, [r0, #32]
{
 80027b2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b4:	f023 0310 	bic.w	r3, r3, #16
 80027b8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80027ba:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80027bc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80027be:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027c2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027ca:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80027cc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027d4:	4d0b      	ldr	r5, [pc, #44]	; (8002804 <TIM_OC2_SetConfig+0x54>)
 80027d6:	42a8      	cmp	r0, r5
 80027d8:	d10d      	bne.n	80027f6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80027dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80027e4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80027e6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027e8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80027ec:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80027ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80027f2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80027f6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80027f8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80027fa:	684a      	ldr	r2, [r1, #4]
 80027fc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80027fe:	6203      	str	r3, [r0, #32]
 8002800:	bd70      	pop	{r4, r5, r6, pc}
 8002802:	bf00      	nop
 8002804:	40012c00 	.word	0x40012c00

08002808 <HAL_TIM_PWM_ConfigChannel>:
{
 8002808:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800280a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800280e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002810:	2b01      	cmp	r3, #1
 8002812:	f04f 0002 	mov.w	r0, #2
 8002816:	d025      	beq.n	8002864 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002818:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800281a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800281e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002822:	2a0c      	cmp	r2, #12
 8002824:	d818      	bhi.n	8002858 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002826:	e8df f002 	tbb	[pc, r2]
 800282a:	1707      	.short	0x1707
 800282c:	171e1717 	.word	0x171e1717
 8002830:	172f1717 	.word	0x172f1717
 8002834:	1717      	.short	0x1717
 8002836:	40          	.byte	0x40
 8002837:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002838:	6820      	ldr	r0, [r4, #0]
 800283a:	f7ff fd57 	bl	80022ec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800283e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002840:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	f042 0208 	orr.w	r2, r2, #8
 8002848:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800284a:	699a      	ldr	r2, [r3, #24]
 800284c:	f022 0204 	bic.w	r2, r2, #4
 8002850:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002856:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002858:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800285a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800285c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002860:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002864:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002866:	6820      	ldr	r0, [r4, #0]
 8002868:	f7ff ffa2 	bl	80027b0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800286c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800286e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800287e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002886:	e7e6      	b.n	8002856 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002888:	6820      	ldr	r0, [r4, #0]
 800288a:	f7ff fd57 	bl	800233c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800288e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002890:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	f042 0208 	orr.w	r2, r2, #8
 8002898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	f022 0204 	bic.w	r2, r2, #4
 80028a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028a2:	69da      	ldr	r2, [r3, #28]
 80028a4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80028a6:	61da      	str	r2, [r3, #28]
    break;
 80028a8:	e7d6      	b.n	8002858 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028aa:	6820      	ldr	r0, [r4, #0]
 80028ac:	f7ff fd70 	bl	8002390 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028b0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80028b2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028bc:	69da      	ldr	r2, [r3, #28]
 80028be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80028c4:	69da      	ldr	r2, [r3, #28]
 80028c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028ca:	e7ec      	b.n	80028a6 <HAL_TIM_PWM_ConfigChannel+0x9e>

080028cc <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028cc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80028ce:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028d0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80028d2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80028d4:	ea23 0304 	bic.w	r3, r3, r4
 80028d8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80028da:	6a03      	ldr	r3, [r0, #32]
 80028dc:	408a      	lsls	r2, r1
 80028de:	431a      	orrs	r2, r3
 80028e0:	6202      	str	r2, [r0, #32]
 80028e2:	bd10      	pop	{r4, pc}

080028e4 <HAL_TIM_PWM_Start>:
{
 80028e4:	b510      	push	{r4, lr}
 80028e6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028e8:	2201      	movs	r2, #1
 80028ea:	6800      	ldr	r0, [r0, #0]
 80028ec:	f7ff ffee 	bl	80028cc <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	4a06      	ldr	r2, [pc, #24]	; (800290c <HAL_TIM_PWM_Start+0x28>)
}
 80028f4:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028f6:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80028f8:	bf02      	ittt	eq
 80028fa:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80028fc:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002900:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
}
 800290a:	bd10      	pop	{r4, pc}
 800290c:	40012c00 	.word	0x40012c00

08002910 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002910:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002914:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002916:	2b01      	cmp	r3, #1
 8002918:	f04f 0302 	mov.w	r3, #2
 800291c:	d018      	beq.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800291e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002922:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002924:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002926:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002928:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800292a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800292e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4322      	orrs	r2, r4
 8002934:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002944:	2301      	movs	r3, #1
 8002946:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294a:	2300      	movs	r3, #0
 800294c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002950:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002952:	bd10      	pop	{r4, pc}

08002954 <HAL_TIMEx_CommutationCallback>:
 8002954:	4770      	bx	lr

08002956 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002956:	4770      	bx	lr

08002958 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800295c:	6805      	ldr	r5, [r0, #0]
 800295e:	68c2      	ldr	r2, [r0, #12]
 8002960:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002962:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002964:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002968:	4313      	orrs	r3, r2
 800296a:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800296c:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800296e:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002970:	430b      	orrs	r3, r1
 8002972:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002974:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002978:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800297c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800297e:	4313      	orrs	r3, r2
 8002980:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002982:	696b      	ldr	r3, [r5, #20]
 8002984:	6982      	ldr	r2, [r0, #24]
 8002986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298a:	4313      	orrs	r3, r2
 800298c:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800298e:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <UART_SetConfig+0x138>)
{
 8002990:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002992:	429d      	cmp	r5, r3
 8002994:	f04f 0419 	mov.w	r4, #25
 8002998:	d146      	bne.n	8002a28 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800299a:	f7ff fba9 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 800299e:	fb04 f300 	mul.w	r3, r4, r0
 80029a2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80029a6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80029aa:	00b6      	lsls	r6, r6, #2
 80029ac:	fbb3 f3f6 	udiv	r3, r3, r6
 80029b0:	fbb3 f3f8 	udiv	r3, r3, r8
 80029b4:	011e      	lsls	r6, r3, #4
 80029b6:	f7ff fb9b 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 80029ba:	4360      	muls	r0, r4
 80029bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	fbb0 f7f3 	udiv	r7, r0, r3
 80029c6:	f7ff fb93 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 80029ca:	4360      	muls	r0, r4
 80029cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d6:	fbb3 f3f8 	udiv	r3, r3, r8
 80029da:	fb08 7313 	mls	r3, r8, r3, r7
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	3332      	adds	r3, #50	; 0x32
 80029e2:	fbb3 f3f8 	udiv	r3, r3, r8
 80029e6:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80029ea:	f7ff fb81 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 80029ee:	4360      	muls	r0, r4
 80029f0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80029f4:	0092      	lsls	r2, r2, #2
 80029f6:	fbb0 faf2 	udiv	sl, r0, r2
 80029fa:	f7ff fb79 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80029fe:	4360      	muls	r0, r4
 8002a00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	fbb3 f3f8 	udiv	r3, r3, r8
 8002a0e:	fb08 a313 	mls	r3, r8, r3, sl
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	3332      	adds	r3, #50	; 0x32
 8002a16:	fbb3 f3f8 	udiv	r3, r3, r8
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	433b      	orrs	r3, r7
 8002a20:	4433      	add	r3, r6
 8002a22:	60ab      	str	r3, [r5, #8]
 8002a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a28:	f7ff fb52 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8002a2c:	fb04 f300 	mul.w	r3, r4, r0
 8002a30:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002a34:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002a38:	00b6      	lsls	r6, r6, #2
 8002a3a:	fbb3 f3f6 	udiv	r3, r3, r6
 8002a3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002a42:	011e      	lsls	r6, r3, #4
 8002a44:	f7ff fb44 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8002a48:	4360      	muls	r0, r4
 8002a4a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	fbb0 f7f3 	udiv	r7, r0, r3
 8002a54:	f7ff fb3c 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8002a58:	4360      	muls	r0, r4
 8002a5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a64:	fbb3 f3f8 	udiv	r3, r3, r8
 8002a68:	fb08 7313 	mls	r3, r8, r3, r7
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	3332      	adds	r3, #50	; 0x32
 8002a70:	fbb3 f3f8 	udiv	r3, r3, r8
 8002a74:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002a78:	f7ff fb2a 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8002a7c:	4360      	muls	r0, r4
 8002a7e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002a82:	0092      	lsls	r2, r2, #2
 8002a84:	fbb0 faf2 	udiv	sl, r0, r2
 8002a88:	f7ff fb22 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	e7b7      	b.n	80029fe <UART_SetConfig+0xa6>
 8002a8e:	bf00      	nop
 8002a90:	40013800 	.word	0x40013800

08002a94 <HAL_UART_Init>:
{
 8002a94:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002a96:	4604      	mov	r4, r0
 8002a98:	b340      	cbz	r0, 8002aec <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002a9a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002aa2:	b91b      	cbnz	r3, 8002aac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002aa4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002aa8:	f001 fefe 	bl	80048a8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002aac:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002aae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002ab0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002ab4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002ab6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002ab8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002abc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002abe:	f7ff ff4b 	bl	8002958 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ad4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002adc:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002ade:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002ae2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002ae6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002aea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002aec:	2001      	movs	r0, #1
}
 8002aee:	bd10      	pop	{r4, pc}

08002af0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002af0:	b084      	sub	sp, #16
 8002af2:	a801      	add	r0, sp, #4
 8002af4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002af8:	b004      	add	sp, #16
 8002afa:	2000      	movs	r0, #0
 8002afc:	4770      	bx	lr

08002afe <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002afe:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002b08:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	4770      	bx	lr

08002b10 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002b10:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002b14:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8002b18:	045b      	lsls	r3, r3, #17
 8002b1a:	0c5b      	lsrs	r3, r3, #17
 8002b1c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002b20:	2000      	movs	r0, #0
 8002b22:	4770      	bx	lr

08002b24 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002b24:	2000      	movs	r0, #0
 8002b26:	4770      	bx	lr

08002b28 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b28:	b084      	sub	sp, #16
 8002b2a:	b510      	push	{r4, lr}
 8002b2c:	ac03      	add	r4, sp, #12
 8002b2e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8002b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8002b36:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8002b3e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8002b42:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b46:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8002b4a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8002b4e:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002b56:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4770      	bx	lr
	...

08002b60 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b60:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8002b62:	78cb      	ldrb	r3, [r1, #3]
 8002b64:	780a      	ldrb	r2, [r1, #0]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d80f      	bhi.n	8002b8a <USB_ActivateEndpoint+0x2a>
 8002b6a:	e8df f003 	tbb	[pc, r3]
 8002b6e:	6402      	.short	0x6402
 8002b70:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8002b72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b76:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7e:	041b      	lsls	r3, r3, #16
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002b86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b8a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002b8e:	780c      	ldrb	r4, [r1, #0]
 8002b90:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002b94:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8002b98:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	432a      	orrs	r2, r5
 8002ba0:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002ba4:	7a8a      	ldrb	r2, [r1, #10]
 8002ba6:	780d      	ldrb	r5, [r1, #0]
 8002ba8:	2a00      	cmp	r2, #0
 8002baa:	f040 8097 	bne.w	8002cdc <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 8002bae:	784c      	ldrb	r4, [r1, #1]
 8002bb0:	888a      	ldrh	r2, [r1, #4]
 8002bb2:	2c00      	cmp	r4, #0
 8002bb4:	d04a      	beq.n	8002c4c <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002bb6:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8002bba:	0852      	lsrs	r2, r2, #1
 8002bbc:	b2a4      	uxth	r4, r4
 8002bbe:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8002bc2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8002bc6:	0052      	lsls	r2, r2, #1
 8002bc8:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bcc:	780c      	ldrb	r4, [r1, #0]
 8002bce:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002bd2:	0652      	lsls	r2, r2, #25
 8002bd4:	d508      	bpl.n	8002be8 <USB_ActivateEndpoint+0x88>
 8002bd6:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002be4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002be8:	780a      	ldrb	r2, [r1, #0]
 8002bea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf6:	041b      	lsls	r3, r3, #16
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c06:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002c0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c12:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	e7b2      	b.n	8002b86 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002c20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c24:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	0c1b      	lsrs	r3, r3, #16
 8002c30:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002c34:	e7a7      	b.n	8002b86 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002c36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c3a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c42:	041b      	lsls	r3, r3, #16
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c4a:	e79c      	b.n	8002b86 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c4c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c50:	0852      	lsrs	r2, r2, #1
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3304      	adds	r3, #4
 8002c56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002c5a:	0052      	lsls	r2, r2, #1
 8002c5c:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8002c60:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002c64:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c68:	690d      	ldr	r5, [r1, #16]
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	780b      	ldrb	r3, [r1, #0]
 8002c6e:	3206      	adds	r2, #6
 8002c70:	2d3e      	cmp	r5, #62	; 0x3e
 8002c72:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002c76:	d929      	bls.n	8002ccc <USB_ActivateEndpoint+0x16c>
 8002c78:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8002c7c:	06eb      	lsls	r3, r5, #27
 8002c7e:	bf04      	itt	eq
 8002c80:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8002c84:	b29e      	uxtheq	r6, r3
 8002c86:	4b6e      	ldr	r3, [pc, #440]	; (8002e40 <USB_ActivateEndpoint+0x2e0>)
 8002c88:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c92:	780a      	ldrb	r2, [r1, #0]
 8002c94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c98:	045e      	lsls	r6, r3, #17
 8002c9a:	d50b      	bpl.n	8002cb4 <USB_ActivateEndpoint+0x154>
 8002c9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca4:	051b      	lsls	r3, r3, #20
 8002ca6:	0d1b      	lsrs	r3, r3, #20
 8002ca8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cb4:	780a      	ldrb	r2, [r1, #0]
 8002cb6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002cca:	e798      	b.n	8002bfe <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002ccc:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002cd0:	07ed      	lsls	r5, r5, #31
 8002cd2:	bf44      	itt	mi
 8002cd4:	3301      	addmi	r3, #1
 8002cd6:	b29b      	uxthmi	r3, r3
 8002cd8:	029b      	lsls	r3, r3, #10
 8002cda:	e7d7      	b.n	8002c8c <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002cdc:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8002ce0:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8002ce4:	0512      	lsls	r2, r2, #20
 8002ce6:	0d12      	lsrs	r2, r2, #20
 8002ce8:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002cec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cf0:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002cf4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002cf8:	780c      	ldrb	r4, [r1, #0]
 8002cfa:	b292      	uxth	r2, r2
 8002cfc:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002d00:	88cc      	ldrh	r4, [r1, #6]
 8002d02:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8002d06:	0864      	lsrs	r4, r4, #1
 8002d08:	0064      	lsls	r4, r4, #1
 8002d0a:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8002d0e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002d12:	780c      	ldrb	r4, [r1, #0]
 8002d14:	b292      	uxth	r2, r2
 8002d16:	3204      	adds	r2, #4
 8002d18:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002d1c:	890c      	ldrh	r4, [r1, #8]
 8002d1e:	0864      	lsrs	r4, r4, #1
 8002d20:	0064      	lsls	r4, r4, #1
 8002d22:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8002d26:	784a      	ldrb	r2, [r1, #1]
 8002d28:	780c      	ldrb	r4, [r1, #0]
 8002d2a:	2a00      	cmp	r2, #0
 8002d2c:	d147      	bne.n	8002dbe <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d2e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002d32:	0455      	lsls	r5, r2, #17
 8002d34:	d508      	bpl.n	8002d48 <USB_ActivateEndpoint+0x1e8>
 8002d36:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d44:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d48:	780a      	ldrb	r2, [r1, #0]
 8002d4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d4e:	065c      	lsls	r4, r3, #25
 8002d50:	d50b      	bpl.n	8002d6a <USB_ActivateEndpoint+0x20a>
 8002d52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5a:	051b      	lsls	r3, r3, #20
 8002d5c:	0d1b      	lsrs	r3, r3, #20
 8002d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002d6a:	780a      	ldrb	r2, [r1, #0]
 8002d6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d74:	051b      	lsls	r3, r3, #20
 8002d76:	0d1b      	lsrs	r3, r3, #20
 8002d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d84:	f248 0280 	movw	r2, #32896	; 0x8080
 8002d88:	780c      	ldrb	r4, [r1, #0]
 8002d8a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002da4:	7809      	ldrb	r1, [r1, #0]
 8002da6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002db2:	041b      	lsls	r3, r3, #16
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002dbc:	e725      	b.n	8002c0a <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002dbe:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002dc2:	0452      	lsls	r2, r2, #17
 8002dc4:	d508      	bpl.n	8002dd8 <USB_ActivateEndpoint+0x278>
 8002dc6:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002dd8:	780a      	ldrb	r2, [r1, #0]
 8002dda:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dde:	065b      	lsls	r3, r3, #25
 8002de0:	d50b      	bpl.n	8002dfa <USB_ActivateEndpoint+0x29a>
 8002de2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dea:	051b      	lsls	r3, r3, #20
 8002dec:	0d1b      	lsrs	r3, r3, #20
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002df6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002dfa:	780a      	ldrb	r2, [r1, #0]
 8002dfc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e04:	051b      	lsls	r3, r3, #20
 8002e06:	0d1b      	lsrs	r3, r3, #20
 8002e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e10:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e14:	f248 0280 	movw	r2, #32896	; 0x8080
 8002e18:	780c      	ldrb	r4, [r1, #0]
 8002e1a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e30:	7809      	ldrb	r1, [r1, #0]
 8002e32:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3e:	e7b8      	b.n	8002db2 <USB_ActivateEndpoint+0x252>
 8002e40:	ffff8000 	.word	0xffff8000

08002e44 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e44:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8002e46:	7a8c      	ldrb	r4, [r1, #10]
 8002e48:	784a      	ldrb	r2, [r1, #1]
 8002e4a:	780b      	ldrb	r3, [r1, #0]
 8002e4c:	bbcc      	cbnz	r4, 8002ec2 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8002e4e:	b302      	cbz	r2, 8002e92 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e50:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002e54:	0652      	lsls	r2, r2, #25
 8002e56:	d50b      	bpl.n	8002e70 <USB_DeactivateEndpoint+0x2c>
 8002e58:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002e5c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e60:	0512      	lsls	r2, r2, #20
 8002e62:	0d12      	lsrs	r2, r2, #20
 8002e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e68:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002e6c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8002e70:	780a      	ldrb	r2, [r1, #0]
 8002e72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002e8e:	2000      	movs	r0, #0
 8002e90:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e92:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002e96:	0454      	lsls	r4, r2, #17
 8002e98:	d50b      	bpl.n	8002eb2 <USB_DeactivateEndpoint+0x6e>
 8002e9a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002e9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002ea2:	0512      	lsls	r2, r2, #20
 8002ea4:	0d12      	lsrs	r2, r2, #20
 8002ea6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eae:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002eb2:	780a      	ldrb	r2, [r1, #0]
 8002eb4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002eb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec0:	e7dd      	b.n	8002e7e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8002ec2:	2a00      	cmp	r2, #0
 8002ec4:	d148      	bne.n	8002f58 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ec6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002eca:	0452      	lsls	r2, r2, #17
 8002ecc:	d50b      	bpl.n	8002ee6 <USB_DeactivateEndpoint+0xa2>
 8002ece:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002ed2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002ed6:	0512      	lsls	r2, r2, #20
 8002ed8:	0d12      	lsrs	r2, r2, #20
 8002eda:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ee2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ee6:	780a      	ldrb	r2, [r1, #0]
 8002ee8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002eec:	065c      	lsls	r4, r3, #25
 8002eee:	d50b      	bpl.n	8002f08 <USB_DeactivateEndpoint+0xc4>
 8002ef0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef8:	051b      	lsls	r3, r3, #20
 8002efa:	0d1b      	lsrs	r3, r3, #20
 8002efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002f08:	780a      	ldrb	r2, [r1, #0]
 8002f0a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f12:	051b      	lsls	r3, r3, #20
 8002f14:	0d1b      	lsrs	r3, r3, #20
 8002f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f1e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f22:	f248 0280 	movw	r2, #32896	; 0x8080
 8002f26:	780c      	ldrb	r4, [r1, #0]
 8002f28:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f34:	041b      	lsls	r3, r3, #16
 8002f36:	0c1b      	lsrs	r3, r3, #16
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f3e:	7809      	ldrb	r1, [r1, #0]
 8002f40:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f4c:	041b      	lsls	r3, r3, #16
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002f56:	e79a      	b.n	8002e8e <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f58:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002f5c:	0452      	lsls	r2, r2, #17
 8002f5e:	d50b      	bpl.n	8002f78 <USB_DeactivateEndpoint+0x134>
 8002f60:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002f64:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f68:	0512      	lsls	r2, r2, #20
 8002f6a:	0d12      	lsrs	r2, r2, #20
 8002f6c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f74:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f78:	780a      	ldrb	r2, [r1, #0]
 8002f7a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f7e:	065b      	lsls	r3, r3, #25
 8002f80:	d50b      	bpl.n	8002f9a <USB_DeactivateEndpoint+0x156>
 8002f82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f8a:	051b      	lsls	r3, r3, #20
 8002f8c:	0d1b      	lsrs	r3, r3, #20
 8002f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f96:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002f9a:	780a      	ldrb	r2, [r1, #0]
 8002f9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa4:	051b      	lsls	r3, r3, #20
 8002fa6:	0d1b      	lsrs	r3, r3, #20
 8002fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fb4:	f248 0280 	movw	r2, #32896	; 0x8080
 8002fb8:	780c      	ldrb	r4, [r1, #0]
 8002fba:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fc6:	041b      	lsls	r3, r3, #16
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fd0:	7809      	ldrb	r1, [r1, #0]
 8002fd2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	e7b5      	b.n	8002f4c <USB_DeactivateEndpoint+0x108>

08002fe0 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002fe0:	780a      	ldrb	r2, [r1, #0]
 8002fe2:	b98a      	cbnz	r2, 8003008 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002fe4:	8803      	ldrh	r3, [r0, #0]
 8002fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fee:	041b      	lsls	r3, r3, #16
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ff6:	f083 0310 	eor.w	r3, r3, #16
 8002ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003002:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8003004:	2000      	movs	r0, #0
 8003006:	4770      	bx	lr
    if (ep->is_in)
 8003008:	784b      	ldrb	r3, [r1, #1]
 800300a:	b183      	cbz	r3, 800302e <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 800300c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	0c1b      	lsrs	r3, r3, #16
 800301c:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8003020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003028:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800302c:	e7ea      	b.n	8003004 <USB_EPSetStall+0x24>
 800302e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	041b      	lsls	r3, r3, #16
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003042:	e7ed      	b.n	8003020 <USB_EPSetStall+0x40>

08003044 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8003044:	784b      	ldrb	r3, [r1, #1]
 8003046:	780a      	ldrb	r2, [r1, #0]
 8003048:	b313      	cbz	r3, 8003090 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800304a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800304e:	065b      	lsls	r3, r3, #25
 8003050:	d50b      	bpl.n	800306a <USB_EPClearStall+0x26>
 8003052:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800305a:	051b      	lsls	r3, r3, #20
 800305c:	0d1b      	lsrs	r3, r3, #20
 800305e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003062:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003066:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800306a:	780a      	ldrb	r2, [r1, #0]
 800306c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	0c1b      	lsrs	r3, r3, #16
 800307c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003088:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 800308c:	2000      	movs	r0, #0
 800308e:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003090:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003094:	045b      	lsls	r3, r3, #17
 8003096:	d50b      	bpl.n	80030b0 <USB_EPClearStall+0x6c>
 8003098:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800309c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a0:	051b      	lsls	r3, r3, #20
 80030a2:	0d1b      	lsrs	r3, r3, #20
 80030a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030b0:	780a      	ldrb	r2, [r1, #0]
 80030b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80030c6:	e7db      	b.n	8003080 <USB_EPClearStall+0x3c>

080030c8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 80030c8:	b911      	cbnz	r1, 80030d0 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 80030d0:	2000      	movs	r0, #0
 80030d2:	4770      	bx	lr

080030d4 <USB_DevConnect>:
 80030d4:	2000      	movs	r0, #0
 80030d6:	4770      	bx	lr

080030d8 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80030d8:	2000      	movs	r0, #0
 80030da:	4770      	bx	lr

080030dc <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 80030dc:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80030e0:	b280      	uxth	r0, r0
 80030e2:	4770      	bx	lr

080030e4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80030e4:	2000      	movs	r0, #0
 80030e6:	4770      	bx	lr

080030e8 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80030e8:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 80030ea:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80030ec:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80030ee:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80030f2:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80030f4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 80030f8:	42a3      	cmp	r3, r4
 80030fa:	d100      	bne.n	80030fe <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 80030fc:	bd10      	pop	{r4, pc}
 80030fe:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8003102:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8003106:	3401      	adds	r4, #1
 8003108:	e7f6      	b.n	80030f8 <USB_WritePMA+0x10>
	...

0800310c <USB_EPStartXfer>:
{
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8003110:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8003112:	7849      	ldrb	r1, [r1, #1]
{
 8003114:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8003116:	2901      	cmp	r1, #1
 8003118:	6933      	ldr	r3, [r6, #16]
 800311a:	7ab0      	ldrb	r0, [r6, #10]
 800311c:	d166      	bne.n	80031ec <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 800311e:	429a      	cmp	r2, r3
 8003120:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8003122:	bf9b      	ittet	ls
 8003124:	2300      	movls	r3, #0
 8003126:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8003128:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 800312a:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 800312c:	bf88      	it	hi
 800312e:	61b2      	strhi	r2, [r6, #24]
 8003130:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8003132:	bb10      	cbnz	r0, 800317a <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8003134:	88b2      	ldrh	r2, [r6, #4]
 8003136:	6971      	ldr	r1, [r6, #20]
 8003138:	4628      	mov	r0, r5
 800313a:	f7ff ffd5 	bl	80030e8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800313e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003142:	7832      	ldrb	r2, [r6, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	3302      	adds	r3, #2
 8003148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800314c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8003150:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003154:	7832      	ldrb	r2, [r6, #0]
 8003156:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800315a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800315e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003162:	041b      	lsls	r3, r3, #16
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800316a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003172:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8003176:	2000      	movs	r0, #0
 8003178:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800317a:	7832      	ldrb	r2, [r6, #0]
 800317c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8003180:	00d2      	lsls	r2, r2, #3
 8003182:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003186:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800318a:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800318c:	d01a      	beq.n	80031c4 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800318e:	3102      	adds	r1, #2
 8003190:	440a      	add	r2, r1
 8003192:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8003196:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 800319a:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 800319c:	6971      	ldr	r1, [r6, #20]
 800319e:	4628      	mov	r0, r5
 80031a0:	f7ff ffa2 	bl	80030e8 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80031a4:	7873      	ldrb	r3, [r6, #1]
 80031a6:	7832      	ldrb	r2, [r6, #0]
 80031a8:	b99b      	cbnz	r3, 80031d2 <USB_EPStartXfer+0xc6>
 80031aa:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80031ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b2:	051b      	lsls	r3, r3, #20
 80031b4:	0d1b      	lsrs	r3, r3, #20
 80031b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031be:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80031c2:	e7c7      	b.n	8003154 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80031c4:	440a      	add	r2, r1
 80031c6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80031ca:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 80031ce:	88f2      	ldrh	r2, [r6, #6]
 80031d0:	e7e4      	b.n	800319c <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d1be      	bne.n	8003154 <USB_EPStartXfer+0x48>
 80031d6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80031da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031de:	051b      	lsls	r3, r3, #20
 80031e0:	0d1b      	lsrs	r3, r3, #20
 80031e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ea:	e7e8      	b.n	80031be <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 80031ec:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 80031ee:	bf93      	iteet	ls
 80031f0:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 80031f2:	1ad2      	subhi	r2, r2, r3
 80031f4:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 80031f6:	61b3      	strls	r3, [r6, #24]
 80031f8:	bf98      	it	ls
 80031fa:	4613      	movls	r3, r2
 80031fc:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 80031fe:	bb70      	cbnz	r0, 800325e <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003200:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003204:	2b3e      	cmp	r3, #62	; 0x3e
 8003206:	b289      	uxth	r1, r1
 8003208:	f101 0106 	add.w	r1, r1, #6
 800320c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003210:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8003214:	d918      	bls.n	8003248 <USB_EPStartXfer+0x13c>
 8003216:	f3c3 124f 	ubfx	r2, r3, #5, #16
 800321a:	06db      	lsls	r3, r3, #27
 800321c:	bf04      	itt	eq
 800321e:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8003222:	b29a      	uxtheq	r2, r3
 8003224:	4b38      	ldr	r3, [pc, #224]	; (8003308 <USB_EPStartXfer+0x1fc>)
 8003226:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800322a:	b29b      	uxth	r3, r3
 800322c:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003230:	7832      	ldrb	r2, [r6, #0]
 8003232:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	041b      	lsls	r3, r3, #16
 8003240:	0c1b      	lsrs	r3, r3, #16
 8003242:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003246:	e790      	b.n	800316a <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003248:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800324c:	07dc      	lsls	r4, r3, #31
 800324e:	bf44      	itt	mi
 8003250:	3201      	addmi	r2, #1
 8003252:	b292      	uxthmi	r2, r2
 8003254:	0292      	lsls	r2, r2, #10
 8003256:	b292      	uxth	r2, r2
 8003258:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 800325c:	e7e8      	b.n	8003230 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800325e:	b9b9      	cbnz	r1, 8003290 <USB_EPStartXfer+0x184>
 8003260:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003264:	2b3e      	cmp	r3, #62	; 0x3e
 8003266:	b289      	uxth	r1, r1
 8003268:	f101 0102 	add.w	r1, r1, #2
 800326c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003270:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8003274:	d928      	bls.n	80032c8 <USB_EPStartXfer+0x1bc>
 8003276:	f3c3 104f 	ubfx	r0, r3, #5, #16
 800327a:	06da      	lsls	r2, r3, #27
 800327c:	bf04      	itt	eq
 800327e:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8003282:	b290      	uxtheq	r0, r2
 8003284:	4a20      	ldr	r2, [pc, #128]	; (8003308 <USB_EPStartXfer+0x1fc>)
 8003286:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800328a:	b292      	uxth	r2, r2
 800328c:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8003290:	7872      	ldrb	r2, [r6, #1]
 8003292:	7831      	ldrb	r1, [r6, #0]
 8003294:	bb5a      	cbnz	r2, 80032ee <USB_EPStartXfer+0x1e2>
 8003296:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800329a:	2b3e      	cmp	r3, #62	; 0x3e
 800329c:	b292      	uxth	r2, r2
 800329e:	f102 0206 	add.w	r2, r2, #6
 80032a2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80032a6:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80032aa:	d915      	bls.n	80032d8 <USB_EPStartXfer+0x1cc>
 80032ac:	f3c3 114f 	ubfx	r1, r3, #5, #16
 80032b0:	06dc      	lsls	r4, r3, #27
 80032b2:	bf04      	itt	eq
 80032b4:	f101 33ff 	addeq.w	r3, r1, #4294967295
 80032b8:	b299      	uxtheq	r1, r3
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <USB_EPStartXfer+0x1fc>)
 80032bc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 80032c6:	e7b3      	b.n	8003230 <USB_EPStartXfer+0x124>
 80032c8:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80032cc:	07d8      	lsls	r0, r3, #31
 80032ce:	bf44      	itt	mi
 80032d0:	3201      	addmi	r2, #1
 80032d2:	b292      	uxthmi	r2, r2
 80032d4:	0292      	lsls	r2, r2, #10
 80032d6:	e7d8      	b.n	800328a <USB_EPStartXfer+0x17e>
 80032d8:	f3c3 014f 	ubfx	r1, r3, #1, #16
 80032dc:	07db      	lsls	r3, r3, #31
 80032de:	bf44      	itt	mi
 80032e0:	3101      	addmi	r1, #1
 80032e2:	b289      	uxthmi	r1, r1
 80032e4:	0289      	lsls	r1, r1, #10
 80032e6:	b289      	uxth	r1, r1
 80032e8:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 80032ec:	e7a0      	b.n	8003230 <USB_EPStartXfer+0x124>
 80032ee:	2a01      	cmp	r2, #1
 80032f0:	d19e      	bne.n	8003230 <USB_EPStartXfer+0x124>
 80032f2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80032f6:	b292      	uxth	r2, r2
 80032f8:	3202      	adds	r2, #2
 80032fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80032fe:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8003302:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8003306:	e793      	b.n	8003230 <USB_EPStartXfer+0x124>
 8003308:	ffff8000 	.word	0xffff8000

0800330c <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800330c:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 800330e:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8003310:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003312:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8003316:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003318:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 800331c:	42a3      	cmp	r3, r4
 800331e:	d100      	bne.n	8003322 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8003320:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003322:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8003326:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 800332a:	3401      	adds	r4, #1
 800332c:	e7f6      	b.n	800331c <USB_ReadPMA+0x10>

0800332e <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800332e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8003332:	b11b      	cbz	r3, 800333c <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8003334:	2000      	movs	r0, #0
 8003336:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800333a:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800333c:	2002      	movs	r0, #2
  }
}
 800333e:	4770      	bx	lr

08003340 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003340:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8003344:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003346:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800334a:	b15b      	cbz	r3, 8003364 <USBD_CDC_EP0_RxReady+0x24>
 800334c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003350:	28ff      	cmp	r0, #255	; 0xff
 8003352:	d007      	beq.n	8003364 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800335a:	4621      	mov	r1, r4
 800335c:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800335e:	23ff      	movs	r3, #255	; 0xff
 8003360:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8003364:	2000      	movs	r0, #0
 8003366:	bd10      	pop	{r4, pc}

08003368 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003368:	2343      	movs	r3, #67	; 0x43
 800336a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800336c:	4800      	ldr	r0, [pc, #0]	; (8003370 <USBD_CDC_GetFSCfgDesc+0x8>)
 800336e:	4770      	bx	lr
 8003370:	20000040 	.word	0x20000040

08003374 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003374:	2343      	movs	r3, #67	; 0x43
 8003376:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003378:	4800      	ldr	r0, [pc, #0]	; (800337c <USBD_CDC_GetHSCfgDesc+0x8>)
 800337a:	4770      	bx	lr
 800337c:	20000084 	.word	0x20000084

08003380 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003380:	2343      	movs	r3, #67	; 0x43
 8003382:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003384:	4800      	ldr	r0, [pc, #0]	; (8003388 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003386:	4770      	bx	lr
 8003388:	200000d4 	.word	0x200000d4

0800338c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800338c:	230a      	movs	r3, #10
 800338e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003390:	4800      	ldr	r0, [pc, #0]	; (8003394 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003392:	4770      	bx	lr
 8003394:	200000c8 	.word	0x200000c8

08003398 <USBD_CDC_DataOut>:
{      
 8003398:	b538      	push	{r3, r4, r5, lr}
 800339a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800339c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80033a0:	f001 fc6c 	bl	8004c7c <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 80033a4:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80033a8:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 80033ac:	b14b      	cbz	r3, 80033c2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80033ae:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80033b2:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80033bc:	4798      	blx	r3
    return USBD_OK;
 80033be:	2000      	movs	r0, #0
 80033c0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80033c2:	2002      	movs	r0, #2
}
 80033c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080033c8 <USBD_CDC_Setup>:
{
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80033ca:	780f      	ldrb	r7, [r1, #0]
{
 80033cc:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80033ce:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 80033d2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80033d4:	d023      	beq.n	800341e <USBD_CDC_Setup+0x56>
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d119      	bne.n	800340e <USBD_CDC_Setup+0x46>
    if (req->wLength)
 80033da:	88ca      	ldrh	r2, [r1, #6]
 80033dc:	784b      	ldrb	r3, [r1, #1]
 80033de:	b1c2      	cbz	r2, 8003412 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80033e0:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80033e2:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80033e6:	d50b      	bpl.n	8003400 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80033e8:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80033ec:	4618      	mov	r0, r3
 80033ee:	688f      	ldr	r7, [r1, #8]
 80033f0:	4629      	mov	r1, r5
 80033f2:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 80033f4:	4629      	mov	r1, r5
 80033f6:	4630      	mov	r0, r6
 80033f8:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 80033fa:	f000 fb8a 	bl	8003b12 <USBD_CtlSendData>
      break;
 80033fe:	e006      	b.n	800340e <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8003400:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8003404:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8003408:	4629      	mov	r1, r5
 800340a:	f000 fb97 	bl	8003b3c <USBD_CtlPrepareRx>
}
 800340e:	2000      	movs	r0, #0
 8003410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003412:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8003416:	6884      	ldr	r4, [r0, #8]
 8003418:	4618      	mov	r0, r3
 800341a:	47a0      	blx	r4
 800341c:	e7f7      	b.n	800340e <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 800341e:	784b      	ldrb	r3, [r1, #1]
 8003420:	2b0a      	cmp	r3, #10
 8003422:	d1f4      	bne.n	800340e <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8003424:	2201      	movs	r2, #1
 8003426:	4901      	ldr	r1, [pc, #4]	; (800342c <USBD_CDC_Setup+0x64>)
 8003428:	e7e7      	b.n	80033fa <USBD_CDC_Setup+0x32>
 800342a:	bf00      	nop
 800342c:	200001e0 	.word	0x200001e0

08003430 <USBD_CDC_DeInit>:
{
 8003430:	b510      	push	{r4, lr}
 8003432:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8003434:	2181      	movs	r1, #129	; 0x81
 8003436:	f001 fbbd 	bl	8004bb4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800343a:	2101      	movs	r1, #1
 800343c:	4620      	mov	r0, r4
 800343e:	f001 fbb9 	bl	8004bb4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003442:	2182      	movs	r1, #130	; 0x82
 8003444:	4620      	mov	r0, r4
 8003446:	f001 fbb5 	bl	8004bb4 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800344a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800344e:	b153      	cbz	r3, 8003466 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003450:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003458:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800345c:	f001 fc18 	bl	8004c90 <USBD_static_free>
    pdev->pClassData = NULL;
 8003460:	2300      	movs	r3, #0
 8003462:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8003466:	2000      	movs	r0, #0
 8003468:	bd10      	pop	{r4, pc}

0800346a <USBD_CDC_Init>:
{
 800346a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800346c:	7c03      	ldrb	r3, [r0, #16]
{
 800346e:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003470:	bb7b      	cbnz	r3, 80034d2 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8003472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003476:	2202      	movs	r2, #2
 8003478:	2181      	movs	r1, #129	; 0x81
 800347a:	f001 fb8b 	bl	8004b94 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800347e:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8003482:	2202      	movs	r2, #2
 8003484:	2101      	movs	r1, #1
 8003486:	4620      	mov	r0, r4
 8003488:	f001 fb84 	bl	8004b94 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800348c:	2308      	movs	r3, #8
 800348e:	2203      	movs	r2, #3
 8003490:	2182      	movs	r1, #130	; 0x82
 8003492:	4620      	mov	r0, r4
 8003494:	f001 fb7e 	bl	8004b94 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003498:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800349c:	f001 fbf4 	bl	8004c88 <USBD_static_malloc>
 80034a0:	4606      	mov	r6, r0
 80034a2:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80034a6:	b320      	cbz	r0, 80034f2 <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 80034a8:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80034aa:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80034b2:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 80034b4:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80034b8:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80034bc:	b987      	cbnz	r7, 80034e0 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 80034be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034c2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80034c6:	2101      	movs	r1, #1
 80034c8:	4620      	mov	r0, r4
 80034ca:	f001 fbc9 	bl	8004c60 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80034ce:	4638      	mov	r0, r7
 80034d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80034d2:	2340      	movs	r3, #64	; 0x40
 80034d4:	2202      	movs	r2, #2
 80034d6:	2181      	movs	r1, #129	; 0x81
 80034d8:	f001 fb5c 	bl	8004b94 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80034dc:	2340      	movs	r3, #64	; 0x40
 80034de:	e7d0      	b.n	8003482 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80034e0:	2340      	movs	r3, #64	; 0x40
 80034e2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80034e6:	2101      	movs	r1, #1
 80034e8:	4620      	mov	r0, r4
 80034ea:	f001 fbb9 	bl	8004c60 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80034ee:	4628      	mov	r0, r5
 80034f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80034f2:	2001      	movs	r0, #1
}
 80034f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080034f6 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80034f6:	b119      	cbz	r1, 8003500 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80034f8:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80034fc:	2000      	movs	r0, #0
 80034fe:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003500:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8003502:	4770      	bx	lr

08003504 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003504:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8003508:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800350a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800350e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003512:	4770      	bx	lr

08003514 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8003514:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8003518:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800351a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800351e:	4770      	bx	lr

08003520 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003520:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8003524:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8003526:	b172      	cbz	r2, 8003546 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8003528:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800352c:	2301      	movs	r3, #1
 800352e:	b964      	cbnz	r4, 800354a <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8003530:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8003534:	2181      	movs	r1, #129	; 0x81
 8003536:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 800353a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800353e:	f001 fb81 	bl	8004c44 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8003542:	4620      	mov	r0, r4
 8003544:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8003546:	2002      	movs	r0, #2
 8003548:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 800354a:	4618      	mov	r0, r3
  }
}
 800354c:	bd10      	pop	{r4, pc}

0800354e <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800354e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8003552:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8003554:	b162      	cbz	r2, 8003570 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003556:	7c04      	ldrb	r4, [r0, #16]
 8003558:	b944      	cbnz	r4, 800356c <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800355a:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800355e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003562:	2101      	movs	r1, #1
 8003564:	f001 fb7c 	bl	8004c60 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003568:	2000      	movs	r0, #0
 800356a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800356c:	2340      	movs	r3, #64	; 0x40
 800356e:	e7f6      	b.n	800355e <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8003570:	2002      	movs	r0, #2
  }
}
 8003572:	bd10      	pop	{r4, pc}

08003574 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003574:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003576:	b180      	cbz	r0, 800359a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003578:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800357c:	b113      	cbz	r3, 8003584 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800357e:	2300      	movs	r3, #0
 8003580:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003584:	b109      	cbz	r1, 800358a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003586:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800358a:	2301      	movs	r3, #1
  pdev->id = id;
 800358c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800358e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003592:	f001 faaf 	bl	8004af4 <USBD_LL_Init>
  
  return USBD_OK; 
 8003596:	2000      	movs	r0, #0
 8003598:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800359a:	2002      	movs	r0, #2
}
 800359c:	bd08      	pop	{r3, pc}

0800359e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800359e:	b119      	cbz	r1, 80035a8 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80035a0:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80035a4:	2000      	movs	r0, #0
 80035a6:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80035a8:	2002      	movs	r0, #2
  }
  
  return status;
}
 80035aa:	4770      	bx	lr

080035ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80035ac:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80035ae:	f001 fae3 	bl	8004b78 <USBD_LL_Start>
  
  return USBD_OK;  
}
 80035b2:	2000      	movs	r0, #0
 80035b4:	bd08      	pop	{r3, pc}

080035b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80035b6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80035b8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80035bc:	b90b      	cbnz	r3, 80035c2 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80035be:	2002      	movs	r0, #2
 80035c0:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4798      	blx	r3
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d1f9      	bne.n	80035be <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80035ca:	bd08      	pop	{r3, pc}

080035cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80035cc:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80035ce:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4798      	blx	r3
  return USBD_OK;
}
 80035d6:	2000      	movs	r0, #0
 80035d8:	bd08      	pop	{r3, pc}

080035da <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80035da:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80035dc:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80035e0:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80035e2:	4628      	mov	r0, r5
 80035e4:	f000 fa65 	bl	8003ab2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80035e8:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80035ea:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80035ee:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80035f2:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80035f6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80035fa:	f001 031f 	and.w	r3, r1, #31
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d00e      	beq.n	8003620 <USBD_LL_SetupStage+0x46>
 8003602:	d307      	bcc.n	8003614 <USBD_LL_SetupStage+0x3a>
 8003604:	2b02      	cmp	r3, #2
 8003606:	d010      	beq.n	800362a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003608:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800360c:	4620      	mov	r0, r4
 800360e:	f001 fadf 	bl	8004bd0 <USBD_LL_StallEP>
    break;
 8003612:	e003      	b.n	800361c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003614:	4629      	mov	r1, r5
 8003616:	4620      	mov	r0, r4
 8003618:	f000 f8d6 	bl	80037c8 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800361c:	2000      	movs	r0, #0
 800361e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003620:	4629      	mov	r1, r5
 8003622:	4620      	mov	r0, r4
 8003624:	f000 f9ca 	bl	80039bc <USBD_StdItfReq>
    break;
 8003628:	e7f8      	b.n	800361c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800362a:	4629      	mov	r1, r5
 800362c:	4620      	mov	r0, r4
 800362e:	f000 f9dd 	bl	80039ec <USBD_StdEPReq>
    break;
 8003632:	e7f3      	b.n	800361c <USBD_LL_SetupStage+0x42>

08003634 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003634:	b538      	push	{r3, r4, r5, lr}
 8003636:	4604      	mov	r4, r0
 8003638:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800363a:	bb11      	cbnz	r1, 8003682 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800363c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003640:	2b03      	cmp	r3, #3
 8003642:	d10f      	bne.n	8003664 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8003644:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003648:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800364c:	4293      	cmp	r3, r2
 800364e:	d90b      	bls.n	8003668 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8003650:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003652:	429a      	cmp	r2, r3
 8003654:	bf28      	it	cs
 8003656:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003658:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800365c:	b292      	uxth	r2, r2
 800365e:	4629      	mov	r1, r5
 8003660:	f000 fa7b 	bl	8003b5a <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003664:	2000      	movs	r0, #0
 8003666:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003668:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	b123      	cbz	r3, 800367a <USBD_LL_DataOutStage+0x46>
 8003670:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003674:	2a03      	cmp	r2, #3
 8003676:	d100      	bne.n	800367a <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8003678:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800367a:	4620      	mov	r0, r4
 800367c:	f000 fa75 	bl	8003b6a <USBD_CtlSendStatus>
 8003680:	e7f0      	b.n	8003664 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8003682:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0eb      	beq.n	8003664 <USBD_LL_DataOutStage+0x30>
 800368c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003690:	2a03      	cmp	r2, #3
 8003692:	d1e7      	bne.n	8003664 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8003694:	4798      	blx	r3
 8003696:	e7e5      	b.n	8003664 <USBD_LL_DataOutStage+0x30>

08003698 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	4613      	mov	r3, r2
 800369c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800369e:	460e      	mov	r6, r1
 80036a0:	2900      	cmp	r1, #0
 80036a2:	d13d      	bne.n	8003720 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80036a4:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80036a8:	2a02      	cmp	r2, #2
 80036aa:	d10f      	bne.n	80036cc <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80036ac:	69c5      	ldr	r5, [r0, #28]
 80036ae:	6a02      	ldr	r2, [r0, #32]
 80036b0:	4295      	cmp	r5, r2
 80036b2:	d914      	bls.n	80036de <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80036b4:	1aaa      	subs	r2, r5, r2
 80036b6:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80036b8:	4619      	mov	r1, r3
 80036ba:	b292      	uxth	r2, r2
 80036bc:	f000 fa36 	bl	8003b2c <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80036c0:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80036c2:	461a      	mov	r2, r3
 80036c4:	4619      	mov	r1, r3
 80036c6:	4620      	mov	r0, r4
 80036c8:	f001 faca 	bl	8004c60 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80036cc:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d102      	bne.n	80036da <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80036da:	2000      	movs	r0, #0
 80036dc:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80036de:	6983      	ldr	r3, [r0, #24]
 80036e0:	fbb3 f5f2 	udiv	r5, r3, r2
 80036e4:	fb02 3515 	mls	r5, r2, r5, r3
 80036e8:	b965      	cbnz	r5, 8003704 <USBD_LL_DataInStage+0x6c>
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d80a      	bhi.n	8003704 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80036ee:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d206      	bcs.n	8003704 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80036f6:	462a      	mov	r2, r5
 80036f8:	f000 fa18 	bl	8003b2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80036fc:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8003700:	462b      	mov	r3, r5
 8003702:	e7de      	b.n	80036c2 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003704:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	b12b      	cbz	r3, 8003718 <USBD_LL_DataInStage+0x80>
 800370c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8003710:	2a03      	cmp	r2, #3
 8003712:	d101      	bne.n	8003718 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8003714:	4620      	mov	r0, r4
 8003716:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003718:	4620      	mov	r0, r4
 800371a:	f000 fa31 	bl	8003b80 <USBD_CtlReceiveStatus>
 800371e:	e7d5      	b.n	80036cc <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8003720:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0d7      	beq.n	80036da <USBD_LL_DataInStage+0x42>
 800372a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800372e:	2a03      	cmp	r2, #3
 8003730:	d1d3      	bne.n	80036da <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8003732:	4798      	blx	r3
 8003734:	e7d1      	b.n	80036da <USBD_LL_DataInStage+0x42>

08003736 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003736:	2200      	movs	r2, #0
{
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800373c:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800373e:	4611      	mov	r1, r2
 8003740:	2340      	movs	r3, #64	; 0x40
 8003742:	f001 fa27 	bl	8004b94 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003746:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003748:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800374c:	2200      	movs	r2, #0
 800374e:	2180      	movs	r1, #128	; 0x80
 8003750:	4620      	mov	r0, r4
 8003752:	f001 fa1f 	bl	8004b94 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003756:	2301      	movs	r3, #1
 8003758:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800375c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003760:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8003762:	b12b      	cbz	r3, 8003770 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003764:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003768:	7921      	ldrb	r1, [r4, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4620      	mov	r0, r4
 800376e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003770:	2000      	movs	r0, #0
 8003772:	bd38      	pop	{r3, r4, r5, pc}

08003774 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003774:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003776:	2000      	movs	r0, #0
 8003778:	4770      	bx	lr

0800377a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800377a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800377e:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003782:	2304      	movs	r3, #4
 8003784:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003788:	2000      	movs	r0, #0
 800378a:	4770      	bx	lr

0800378c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800378c:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8003790:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003794:	2000      	movs	r0, #0
 8003796:	4770      	bx	lr

08003798 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003798:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800379a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800379e:	2a03      	cmp	r2, #3
 80037a0:	d104      	bne.n	80037ac <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80037a2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	b103      	cbz	r3, 80037ac <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80037aa:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80037ac:	2000      	movs	r0, #0
 80037ae:	bd08      	pop	{r3, pc}

080037b0 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80037b0:	b510      	push	{r4, lr}
 80037b2:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	f001 fa0b 	bl	8004bd0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80037ba:	4620      	mov	r0, r4
}
 80037bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80037c0:	2100      	movs	r1, #0
 80037c2:	f001 ba05 	b.w	8004bd0 <USBD_LL_StallEP>
	...

080037c8 <USBD_StdDevReq>:
{
 80037c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80037ca:	784b      	ldrb	r3, [r1, #1]
{
 80037cc:	4604      	mov	r4, r0
 80037ce:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80037d0:	2b09      	cmp	r3, #9
 80037d2:	d879      	bhi.n	80038c8 <USBD_StdDevReq+0x100>
 80037d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80037d8:	00e500c9 	.word	0x00e500c9
 80037dc:	00d90078 	.word	0x00d90078
 80037e0:	006d0078 	.word	0x006d0078
 80037e4:	0078000a 	.word	0x0078000a
 80037e8:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80037ec:	884b      	ldrh	r3, [r1, #2]
 80037ee:	0a1a      	lsrs	r2, r3, #8
 80037f0:	3a01      	subs	r2, #1
 80037f2:	2a06      	cmp	r2, #6
 80037f4:	d868      	bhi.n	80038c8 <USBD_StdDevReq+0x100>
 80037f6:	e8df f002 	tbb	[pc, r2]
 80037fa:	1c04      	.short	0x1c04
 80037fc:	49676729 	.word	0x49676729
 8003800:	52          	.byte	0x52
 8003801:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003802:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003806:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003808:	f10d 0106 	add.w	r1, sp, #6
 800380c:	7c20      	ldrb	r0, [r4, #16]
 800380e:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8003810:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003814:	2a00      	cmp	r2, #0
 8003816:	d067      	beq.n	80038e8 <USBD_StdDevReq+0x120>
 8003818:	88eb      	ldrh	r3, [r5, #6]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d064      	beq.n	80038e8 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800381e:	429a      	cmp	r2, r3
 8003820:	bf28      	it	cs
 8003822:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8003824:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8003826:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800382a:	4620      	mov	r0, r4
 800382c:	f000 f971 	bl	8003b12 <USBD_CtlSendData>
 8003830:	e05a      	b.n	80038e8 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8003832:	7c02      	ldrb	r2, [r0, #16]
 8003834:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003838:	b932      	cbnz	r2, 8003848 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800383c:	f10d 0006 	add.w	r0, sp, #6
 8003840:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003842:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003844:	7043      	strb	r3, [r0, #1]
 8003846:	e7e3      	b.n	8003810 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	e7f7      	b.n	800383c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b05      	cmp	r3, #5
 8003850:	d83a      	bhi.n	80038c8 <USBD_StdDevReq+0x100>
 8003852:	e8df f003 	tbb	[pc, r3]
 8003856:	0703      	.short	0x0703
 8003858:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800385c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	e7d1      	b.n	8003808 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003864:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	e7cd      	b.n	8003808 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800386c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	e7c9      	b.n	8003808 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003874:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	e7c5      	b.n	8003808 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800387c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	e7c1      	b.n	8003808 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003884:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	e7bd      	b.n	8003808 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800388c:	7c03      	ldrb	r3, [r0, #16]
 800388e:	b9db      	cbnz	r3, 80038c8 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003890:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003894:	f10d 0006 	add.w	r0, sp, #6
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389a:	4798      	blx	r3
 800389c:	e7b8      	b.n	8003810 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800389e:	7c03      	ldrb	r3, [r0, #16]
 80038a0:	b993      	cbnz	r3, 80038c8 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80038a2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80038a6:	f10d 0006 	add.w	r0, sp, #6
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80038ae:	2307      	movs	r3, #7
 80038b0:	e7c8      	b.n	8003844 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80038b2:	888b      	ldrh	r3, [r1, #4]
 80038b4:	b943      	cbnz	r3, 80038c8 <USBD_StdDevReq+0x100>
 80038b6:	88cb      	ldrh	r3, [r1, #6]
 80038b8:	b933      	cbnz	r3, 80038c8 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80038ba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80038be:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80038c0:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80038c2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80038c6:	d103      	bne.n	80038d0 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80038c8:	4620      	mov	r0, r4
 80038ca:	f7ff ff71 	bl	80037b0 <USBD_CtlError.constprop.0>
    break;
 80038ce:	e00b      	b.n	80038e8 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80038d0:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80038d4:	4629      	mov	r1, r5
 80038d6:	f001 f9a7 	bl	8004c28 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80038da:	4620      	mov	r0, r4
 80038dc:	f000 f945 	bl	8003b6a <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80038e0:	b12d      	cbz	r5, 80038ee <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80038e2:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80038e4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80038e8:	2000      	movs	r0, #0
 80038ea:	b003      	add	sp, #12
 80038ec:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80038ee:	2301      	movs	r3, #1
 80038f0:	e7f8      	b.n	80038e4 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80038f2:	7889      	ldrb	r1, [r1, #2]
 80038f4:	4d30      	ldr	r5, [pc, #192]	; (80039b8 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80038f6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80038f8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80038fa:	d8e5      	bhi.n	80038c8 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80038fc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003900:	2b02      	cmp	r3, #2
 8003902:	d00c      	beq.n	800391e <USBD_StdDevReq+0x156>
 8003904:	2b03      	cmp	r3, #3
 8003906:	d1df      	bne.n	80038c8 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8003908:	b9b1      	cbnz	r1, 8003938 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800390a:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 800390c:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800390e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8003912:	f7ff fe5b 	bl	80035cc <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8003916:	4620      	mov	r0, r4
 8003918:	f000 f927 	bl	8003b6a <USBD_CtlSendStatus>
 800391c:	e7e4      	b.n	80038e8 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800391e:	2900      	cmp	r1, #0
 8003920:	d0f9      	beq.n	8003916 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8003922:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003924:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003926:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003928:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800392c:	4620      	mov	r0, r4
 800392e:	f7ff fe42 	bl	80035b6 <USBD_SetClassConfig>
 8003932:	2802      	cmp	r0, #2
 8003934:	d1ef      	bne.n	8003916 <USBD_StdDevReq+0x14e>
 8003936:	e7c7      	b.n	80038c8 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8003938:	6841      	ldr	r1, [r0, #4]
 800393a:	2901      	cmp	r1, #1
 800393c:	d0eb      	beq.n	8003916 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800393e:	b2c9      	uxtb	r1, r1
 8003940:	f7ff fe44 	bl	80035cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003944:	7829      	ldrb	r1, [r5, #0]
 8003946:	6061      	str	r1, [r4, #4]
 8003948:	e7f0      	b.n	800392c <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800394a:	88ca      	ldrh	r2, [r1, #6]
 800394c:	2a01      	cmp	r2, #1
 800394e:	d1bb      	bne.n	80038c8 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8003950:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003954:	2b02      	cmp	r3, #2
 8003956:	d003      	beq.n	8003960 <USBD_StdDevReq+0x198>
 8003958:	2b03      	cmp	r3, #3
 800395a:	d1b5      	bne.n	80038c8 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 800395c:	1d01      	adds	r1, r0, #4
 800395e:	e764      	b.n	800382a <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8003960:	4601      	mov	r1, r0
 8003962:	2300      	movs	r3, #0
 8003964:	f841 3f08 	str.w	r3, [r1, #8]!
 8003968:	e75f      	b.n	800382a <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800396a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800396e:	3b02      	subs	r3, #2
 8003970:	2b01      	cmp	r3, #1
 8003972:	d8a9      	bhi.n	80038c8 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003974:	2301      	movs	r3, #1
 8003976:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003978:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800397c:	b10b      	cbz	r3, 8003982 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800397e:	2303      	movs	r3, #3
 8003980:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8003982:	2202      	movs	r2, #2
 8003984:	f104 010c 	add.w	r1, r4, #12
 8003988:	e74f      	b.n	800382a <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800398a:	884b      	ldrh	r3, [r1, #2]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d1ab      	bne.n	80038e8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8003990:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003994:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003998:	4629      	mov	r1, r5
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4620      	mov	r0, r4
 800399e:	4798      	blx	r3
 80039a0:	e7b9      	b.n	8003916 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80039a2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80039a6:	3b02      	subs	r3, #2
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d88d      	bhi.n	80038c8 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80039ac:	884b      	ldrh	r3, [r1, #2]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d19a      	bne.n	80038e8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80039b2:	2300      	movs	r3, #0
 80039b4:	e7ec      	b.n	8003990 <USBD_StdDevReq+0x1c8>
 80039b6:	bf00      	nop
 80039b8:	200001e1 	.word	0x200001e1

080039bc <USBD_StdItfReq>:
{
 80039bc:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80039be:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 80039c2:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 80039c4:	2b03      	cmp	r3, #3
{
 80039c6:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80039c8:	d10d      	bne.n	80039e6 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80039ca:	790b      	ldrb	r3, [r1, #4]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d80a      	bhi.n	80039e6 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80039d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80039d8:	88eb      	ldrh	r3, [r5, #6]
 80039da:	b913      	cbnz	r3, 80039e2 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80039dc:	4620      	mov	r0, r4
 80039de:	f000 f8c4 	bl	8003b6a <USBD_CtlSendStatus>
}
 80039e2:	2000      	movs	r0, #0
 80039e4:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80039e6:	f7ff fee3 	bl	80037b0 <USBD_CtlError.constprop.0>
    break;
 80039ea:	e7fa      	b.n	80039e2 <USBD_StdItfReq+0x26>

080039ec <USBD_StdEPReq>:
{
 80039ec:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80039ee:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80039f0:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80039f2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80039f6:	2a20      	cmp	r2, #32
{
 80039f8:	4604      	mov	r4, r0
 80039fa:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80039fc:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80039fe:	d105      	bne.n	8003a0c <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8003a00:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4798      	blx	r3
}
 8003a08:	2000      	movs	r0, #0
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003a0c:	784a      	ldrb	r2, [r1, #1]
 8003a0e:	2a01      	cmp	r2, #1
 8003a10:	d01c      	beq.n	8003a4c <USBD_StdEPReq+0x60>
 8003a12:	d32a      	bcc.n	8003a6a <USBD_StdEPReq+0x7e>
 8003a14:	2a03      	cmp	r2, #3
 8003a16:	d1f7      	bne.n	8003a08 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003a18:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a1c:	2a02      	cmp	r2, #2
 8003a1e:	d040      	beq.n	8003aa2 <USBD_StdEPReq+0xb6>
 8003a20:	2a03      	cmp	r2, #3
 8003a22:	d002      	beq.n	8003a2a <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003a24:	f7ff fec4 	bl	80037b0 <USBD_CtlError.constprop.0>
      break;
 8003a28:	e7ee      	b.n	8003a08 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003a2a:	884a      	ldrh	r2, [r1, #2]
 8003a2c:	b922      	cbnz	r2, 8003a38 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003a2e:	065e      	lsls	r6, r3, #25
 8003a30:	d002      	beq.n	8003a38 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8003a32:	4619      	mov	r1, r3
 8003a34:	f001 f8cc 	bl	8004bd0 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003a38:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4620      	mov	r0, r4
 8003a42:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003a44:	4620      	mov	r0, r4
 8003a46:	f000 f890 	bl	8003b6a <USBD_CtlSendStatus>
 8003a4a:	e7dd      	b.n	8003a08 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003a4c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a50:	2a02      	cmp	r2, #2
 8003a52:	d026      	beq.n	8003aa2 <USBD_StdEPReq+0xb6>
 8003a54:	2a03      	cmp	r2, #3
 8003a56:	d1e5      	bne.n	8003a24 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003a58:	884a      	ldrh	r2, [r1, #2]
 8003a5a:	2a00      	cmp	r2, #0
 8003a5c:	d1d4      	bne.n	8003a08 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8003a5e:	0659      	lsls	r1, r3, #25
 8003a60:	d0f0      	beq.n	8003a44 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003a62:	4619      	mov	r1, r3
 8003a64:	f001 f8c2 	bl	8004bec <USBD_LL_ClearStallEP>
 8003a68:	e7e6      	b.n	8003a38 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003a6a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a6e:	2a02      	cmp	r2, #2
 8003a70:	d017      	beq.n	8003aa2 <USBD_StdEPReq+0xb6>
 8003a72:	2a03      	cmp	r2, #3
 8003a74:	d1d6      	bne.n	8003a24 <USBD_StdEPReq+0x38>
 8003a76:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003a7a:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003a7e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003a82:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003a84:	bf14      	ite	ne
 8003a86:	3514      	addne	r5, #20
 8003a88:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003a8c:	f001 f8bc 	bl	8004c08 <USBD_LL_IsStallEP>
 8003a90:	b168      	cbz	r0, 8003aae <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8003a92:	2301      	movs	r3, #1
 8003a94:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8003a96:	2202      	movs	r2, #2
 8003a98:	4629      	mov	r1, r5
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f000 f839 	bl	8003b12 <USBD_CtlSendData>
      break;
 8003aa0:	e7b2      	b.n	8003a08 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8003aa2:	065a      	lsls	r2, r3, #25
 8003aa4:	d0b0      	beq.n	8003a08 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f001 f892 	bl	8004bd0 <USBD_LL_StallEP>
 8003aac:	e7ac      	b.n	8003a08 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8003aae:	6028      	str	r0, [r5, #0]
 8003ab0:	e7f1      	b.n	8003a96 <USBD_StdEPReq+0xaa>

08003ab2 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003ab2:	780b      	ldrb	r3, [r1, #0]
 8003ab4:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003ab6:	784b      	ldrb	r3, [r1, #1]
 8003ab8:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003aba:	78ca      	ldrb	r2, [r1, #3]
 8003abc:	788b      	ldrb	r3, [r1, #2]
 8003abe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ac2:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003ac4:	794a      	ldrb	r2, [r1, #5]
 8003ac6:	790b      	ldrb	r3, [r1, #4]
 8003ac8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003acc:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003ace:	79ca      	ldrb	r2, [r1, #7]
 8003ad0:	798b      	ldrb	r3, [r1, #6]
 8003ad2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ad6:	80c3      	strh	r3, [r0, #6]
 8003ad8:	4770      	bx	lr

08003ada <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003ada:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003adc:	b188      	cbz	r0, 8003b02 <USBD_GetString+0x28>
 8003ade:	4605      	mov	r5, r0
 8003ae0:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8003ae2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2c00      	cmp	r4, #0
 8003aea:	d1f9      	bne.n	8003ae0 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	3302      	adds	r3, #2
 8003af0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8003af2:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003af4:	2303      	movs	r3, #3
 8003af6:	704b      	strb	r3, [r1, #1]
 8003af8:	2302      	movs	r3, #2
 8003afa:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8003afc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003b00:	b905      	cbnz	r5, 8003b04 <USBD_GetString+0x2a>
 8003b02:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	54cd      	strb	r5, [r1, r3]
 8003b08:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	548c      	strb	r4, [r1, r2]
 8003b10:	e7f4      	b.n	8003afc <USBD_GetString+0x22>

08003b12 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003b12:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003b14:	2202      	movs	r2, #2
{
 8003b16:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003b18:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003b1c:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003b1e:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003b20:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003b22:	2100      	movs	r1, #0
 8003b24:	f001 f88e 	bl	8004c44 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003b28:	2000      	movs	r0, #0
 8003b2a:	bd10      	pop	{r4, pc}

08003b2c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003b2c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003b2e:	4613      	mov	r3, r2
 8003b30:	460a      	mov	r2, r1
 8003b32:	2100      	movs	r1, #0
 8003b34:	f001 f886 	bl	8004c44 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003b38:	2000      	movs	r0, #0
 8003b3a:	bd08      	pop	{r3, pc}

08003b3c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003b3c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003b3e:	2203      	movs	r2, #3
{
 8003b40:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003b42:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003b46:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003b4a:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003b4c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8003b50:	2100      	movs	r1, #0
 8003b52:	f001 f885 	bl	8004c60 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003b56:	2000      	movs	r0, #0
 8003b58:	bd10      	pop	{r4, pc}

08003b5a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003b5a:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	460a      	mov	r2, r1
 8003b60:	2100      	movs	r1, #0
 8003b62:	f001 f87d 	bl	8004c60 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003b66:	2000      	movs	r0, #0
 8003b68:	bd08      	pop	{r3, pc}

08003b6a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003b6a:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003b72:	2300      	movs	r3, #0
 8003b74:	461a      	mov	r2, r3
 8003b76:	4619      	mov	r1, r3
 8003b78:	f001 f864 	bl	8004c44 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	bd08      	pop	{r3, pc}

08003b80 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003b80:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003b82:	2305      	movs	r3, #5
 8003b84:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003b88:	2300      	movs	r3, #0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f001 f867 	bl	8004c60 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003b92:	2000      	movs	r0, #0
 8003b94:	bd08      	pop	{r3, pc}

08003b96 <HAL_STM32_ADC_Init>:
 */
#include "HAL_STM32_ADC.h"

void HAL_STM32_ADC_Init(void)
{
	MX_ADC1_Init();
 8003b96:	f000 b87b 	b.w	8003c90 <MX_ADC1_Init>
	...

08003b9c <HAL_STM32_ADC_MeasureStart>:
}
void HAL_STM32_ADC_MeasureStart(void)
{
	HAL_ADC_Start(&hadc1);
 8003b9c:	4801      	ldr	r0, [pc, #4]	; (8003ba4 <HAL_STM32_ADC_MeasureStart+0x8>)
 8003b9e:	f7fd b9dd 	b.w	8000f5c <HAL_ADC_Start>
 8003ba2:	bf00      	nop
 8003ba4:	20002b44 	.word	0x20002b44

08003ba8 <HAL_STM32_ADC_Poll>:
}
HAL_STM32_ADC_Status HAL_STM32_ADC_Poll(uint32_t Timeout)
{
	return HAL_ADC_PollForConversion(&hadc1,Timeout);
 8003ba8:	4601      	mov	r1, r0
 8003baa:	4801      	ldr	r0, [pc, #4]	; (8003bb0 <HAL_STM32_ADC_Poll+0x8>)
 8003bac:	f7fd b878 	b.w	8000ca0 <HAL_ADC_PollForConversion>
 8003bb0:	20002b44 	.word	0x20002b44

08003bb4 <HAL_STM32_ADC_GetVal>:
}
uint32_t HAL_STM32_ADC_GetVal(void)
{
	return HAL_ADC_GetValue(&hadc1);
 8003bb4:	4801      	ldr	r0, [pc, #4]	; (8003bbc <HAL_STM32_ADC_GetVal+0x8>)
 8003bb6:	f7fd b911 	b.w	8000ddc <HAL_ADC_GetValue>
 8003bba:	bf00      	nop
 8003bbc:	20002b44 	.word	0x20002b44

08003bc0 <Motor_set>:
#include "HAL_STM32_ADC.h"
#include "HAL_STM32_UART.h"
#include "HAL_STM32_CONTROL.h"

void Motor_set(uint32_t Dir, uint32_t Power)
{
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	460d      	mov	r5, r1
	if(Dir == 0)
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	b970      	cbnz	r0, 8003be6 <Motor_set+0x26>
		HAL_GPIO_WritePin(MOT_DIR1_PORT,MOT_DIR1_PIN,RESET);
		HAL_GPIO_WritePin(MOT_DIR2_PORT,MOT_DIR2_PIN,RESET);
	}
	if(Dir == 1)
	{
		HAL_GPIO_WritePin(MOT_DIR1_PORT,MOT_DIR1_PIN,SET);
 8003bc8:	4622      	mov	r2, r4
 8003bca:	2140      	movs	r1, #64	; 0x40
 8003bcc:	480b      	ldr	r0, [pc, #44]	; (8003bfc <Motor_set+0x3c>)
 8003bce:	f7fd fc17 	bl	8001400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOT_DIR2_PORT,MOT_DIR2_PIN,RESET);
 8003bd2:	2200      	movs	r2, #0
	}
	if(Dir == 2)
	{
		HAL_GPIO_WritePin(MOT_DIR1_PORT,MOT_DIR1_PIN,RESET);
		HAL_GPIO_WritePin(MOT_DIR2_PORT,MOT_DIR2_PIN,SET);
 8003bd4:	2120      	movs	r1, #32
 8003bd6:	4809      	ldr	r0, [pc, #36]	; (8003bfc <Motor_set+0x3c>)
 8003bd8:	f7fd fc12 	bl	8001400 <HAL_GPIO_WritePin>
	}
	HAL_STM32_SetPWMDuty(Power);
 8003bdc:	4628      	mov	r0, r5
}
 8003bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_STM32_SetPWMDuty(Power);
 8003be2:	f000 b82d 	b.w	8003c40 <HAL_STM32_SetPWMDuty>
	if(Dir == 1)
 8003be6:	2801      	cmp	r0, #1
 8003be8:	d0ee      	beq.n	8003bc8 <Motor_set+0x8>
	if(Dir == 2)
 8003bea:	2802      	cmp	r0, #2
 8003bec:	d1f6      	bne.n	8003bdc <Motor_set+0x1c>
		HAL_GPIO_WritePin(MOT_DIR1_PORT,MOT_DIR1_PIN,RESET);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2140      	movs	r1, #64	; 0x40
 8003bf2:	4802      	ldr	r0, [pc, #8]	; (8003bfc <Motor_set+0x3c>)
 8003bf4:	f7fd fc04 	bl	8001400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOT_DIR2_PORT,MOT_DIR2_PIN,SET);
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	e7eb      	b.n	8003bd4 <Motor_set+0x14>
 8003bfc:	40010800 	.word	0x40010800

08003c00 <Dir_set>:

void Dir_set(uint32_t Angle)
{
	HAL_STM32_ServoPosition(Angle);
 8003c00:	f000 b834 	b.w	8003c6c <HAL_STM32_ServoPosition>

08003c04 <Lamp_set>:
}

void Lamp_set(uint32_t Lamp,uint32_t State)
{
	if(Lamp == 0)
 8003c04:	b920      	cbnz	r0, 8003c10 <Lamp_set+0xc>
	{
		HAL_GPIO_WritePin(LAMP1_PORT,LAMP1_PIN,State);
 8003c06:	b2ca      	uxtb	r2, r1
 8003c08:	2102      	movs	r1, #2
	}
	if(Lamp == 1)
	{
		HAL_GPIO_WritePin(LAMP2_PORT,LAMP2_PIN,State);
 8003c0a:	4804      	ldr	r0, [pc, #16]	; (8003c1c <Lamp_set+0x18>)
 8003c0c:	f7fd bbf8 	b.w	8001400 <HAL_GPIO_WritePin>
	if(Lamp == 1)
 8003c10:	2801      	cmp	r0, #1
 8003c12:	d102      	bne.n	8003c1a <Lamp_set+0x16>
		HAL_GPIO_WritePin(LAMP2_PORT,LAMP2_PIN,State);
 8003c14:	b2ca      	uxtb	r2, r1
 8003c16:	4601      	mov	r1, r0
 8003c18:	e7f7      	b.n	8003c0a <Lamp_set+0x6>
 8003c1a:	4770      	bx	lr
 8003c1c:	40010c00 	.word	0x40010c00

08003c20 <HAL_STM32_InitPWM>:
 *      Author: TOSHIBA
 */
#include "HAL_STM32_PWM.h"

void HAL_STM32_InitPWM(void)
{
 8003c20:	b508      	push	{r3, lr}
	MX_TIM3_Init();
 8003c22:	f000 fdd5 	bl	80047d0 <MX_TIM3_Init>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8003c26:	2104      	movs	r1, #4
 8003c28:	4803      	ldr	r0, [pc, #12]	; (8003c38 <HAL_STM32_InitPWM+0x18>)
 8003c2a:	f7fe fe5b 	bl	80028e4 <HAL_TIM_PWM_Start>
	TIM3->CCR2 = 0;
 8003c2e:	2200      	movs	r2, #0
 8003c30:	4b02      	ldr	r3, [pc, #8]	; (8003c3c <HAL_STM32_InitPWM+0x1c>)
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38
 8003c34:	bd08      	pop	{r3, pc}
 8003c36:	bf00      	nop
 8003c38:	20002bb4 	.word	0x20002bb4
 8003c3c:	40000400 	.word	0x40000400

08003c40 <HAL_STM32_SetPWMDuty>:
}
void HAL_STM32_SetPWMDuty(uint32_t Duty)
{
	TIM3->CCR2 = Duty;
 8003c40:	4b01      	ldr	r3, [pc, #4]	; (8003c48 <HAL_STM32_SetPWMDuty+0x8>)
 8003c42:	6398      	str	r0, [r3, #56]	; 0x38
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40000400 	.word	0x40000400

08003c4c <HAL_STM32_InitServo>:
 *      Author: TOSHIBA
 */
#include "HAL_STM32_SERVO.h"

void HAL_STM32_InitServo(void)
{
 8003c4c:	b508      	push	{r3, lr}
	MX_TIM4_Init();
 8003c4e:	f000 fd6f 	bl	8004730 <MX_TIM4_Init>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8003c52:	2100      	movs	r1, #0
 8003c54:	4803      	ldr	r0, [pc, #12]	; (8003c64 <HAL_STM32_InitServo+0x18>)
 8003c56:	f7fe fe45 	bl	80028e4 <HAL_TIM_PWM_Start>
	TIM4->CCR1 = 1000;
 8003c5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c5e:	4b02      	ldr	r3, [pc, #8]	; (8003c68 <HAL_STM32_InitServo+0x1c>)
 8003c60:	635a      	str	r2, [r3, #52]	; 0x34
 8003c62:	bd08      	pop	{r3, pc}
 8003c64:	20002b74 	.word	0x20002b74
 8003c68:	40000800 	.word	0x40000800

08003c6c <HAL_STM32_ServoPosition>:
}
void HAL_STM32_ServoPosition(uint32_t Pos)
{
	TIM4->CCR1 = Pos;
 8003c6c:	4b01      	ldr	r3, [pc, #4]	; (8003c74 <HAL_STM32_ServoPosition+0x8>)
 8003c6e:	6358      	str	r0, [r3, #52]	; 0x34
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40000800 	.word	0x40000800

08003c78 <HAL_STM32_UART_Init>:

#include "HAL_STM32_UART.h"

void HAL_STM32_UART_Init(void)
{
	MX_USART1_UART_Init();
 8003c78:	f000 bdfa 	b.w	8004870 <MX_USART1_UART_Init>

08003c7c <HAL_STM32_USB_DEVICE_Init>:

#include "HAL_STM32_USB.h"

void HAL_STM32_USB_DEVICE_Init(void)
{
	MX_USB_DEVICE_Init();
 8003c7c:	f000 be50 	b.w	8004920 <MX_USB_DEVICE_Init>

08003c80 <HAL_STM32_CDC_Transmit_FS>:
}

uint8_t HAL_STM32_CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
	return CDC_Transmit_FS(Buf,Len);
 8003c80:	f000 beca 	b.w	8004a18 <CDC_Transmit_FS>

08003c84 <HAL_STM32_VCP_retrieveInputData>:
}

uint8_t HAL_STM32_VCP_retrieveInputData(uint8_t* Buf, uint32_t *Len)
{
 8003c84:	b508      	push	{r3, lr}
	return VCP_retrieveInputData(Buf, Len);
 8003c86:	f000 fea1 	bl	80049cc <VCP_retrieveInputData>
}
 8003c8a:	b2c0      	uxtb	r0, r0
 8003c8c:	bd08      	pop	{r3, pc}
	...

08003c90 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /**Common config 
  */
  hadc1.Instance = ADC1;
 8003c90:	4811      	ldr	r0, [pc, #68]	; (8003cd8 <MX_ADC1_Init+0x48>)
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <MX_ADC1_Init+0x4c>)
{
 8003c94:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8003c96:	2400      	movs	r4, #0
  hadc1.Instance = ADC1;
 8003c98:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8003c9a:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c9c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
{
 8003ca0:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8003ca2:	9401      	str	r4, [sp, #4]
 8003ca4:	9402      	str	r4, [sp, #8]
 8003ca6:	9403      	str	r4, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003ca8:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003caa:	60c4      	str	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003cac:	6144      	str	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cae:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cb0:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003cb2:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003cb4:	f7fd f9d6 	bl	8001064 <HAL_ADC_Init>
 8003cb8:	b108      	cbz	r0, 8003cbe <MX_ADC1_Init+0x2e>
  {
    Error_Handler();
 8003cba:	f000 fbb3 	bl	8004424 <Error_Handler>
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cbe:	a901      	add	r1, sp, #4
 8003cc0:	4805      	ldr	r0, [pc, #20]	; (8003cd8 <MX_ADC1_Init+0x48>)
  sConfig.Channel = ADC_CHANNEL_0;
 8003cc2:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003cc4:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003cc6:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cc8:	f7fd f88c 	bl	8000de4 <HAL_ADC_ConfigChannel>
 8003ccc:	b108      	cbz	r0, 8003cd2 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8003cce:	f000 fba9 	bl	8004424 <Error_Handler>
  }

}
 8003cd2:	b005      	add	sp, #20
 8003cd4:	bd30      	pop	{r4, r5, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20002b44 	.word	0x20002b44
 8003cdc:	40012400 	.word	0x40012400

08003ce0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	2100      	movs	r1, #0
 8003cea:	a802      	add	r0, sp, #8
 8003cec:	f001 f879 	bl	8004de2 <memset>
  if(adcHandle->Instance==ADC1)
 8003cf0:	6822      	ldr	r2, [r4, #0]
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <HAL_ADC_MspInit+0x54>)
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d11b      	bne.n	8003d30 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cf8:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003cfc:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cfe:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d04:	619a      	str	r2, [r3, #24]
 8003d06:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d08:	480b      	ldr	r0, [pc, #44]	; (8003d38 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d0a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003d0e:	9200      	str	r2, [sp, #0]
 8003d10:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	f042 0204 	orr.w	r2, r2, #4
 8003d18:	619a      	str	r2, [r3, #24]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d24:	2301      	movs	r3, #1
 8003d26:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2c:	f7fd fa82 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003d30:	b006      	add	sp, #24
 8003d32:	bd10      	pop	{r4, pc}
 8003d34:	40012400 	.word	0x40012400
 8003d38:	40010800 	.word	0x40010800

08003d3c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3c:	2210      	movs	r2, #16
{
 8003d3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d42:	b089      	sub	sp, #36	; 0x24
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	eb0d 0002 	add.w	r0, sp, r2
 8003d48:	2100      	movs	r1, #0
 8003d4a:	f001 f84a 	bl	8004de2 <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d4e:	4b39      	ldr	r3, [pc, #228]	; (8003e34 <MX_GPIO_Init+0xf8>)
	  __HAL_RCC_GPIOD_CLK_ENABLE();
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003d50:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8003e3c <MX_GPIO_Init+0x100>
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d54:	699a      	ldr	r2, [r3, #24]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8003d56:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003e40 <MX_GPIO_Init+0x104>
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d5a:	f042 0210 	orr.w	r2, r2, #16
 8003d5e:	619a      	str	r2, [r3, #24]
 8003d60:	699a      	ldr	r2, [r3, #24]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 8003d62:	4d35      	ldr	r5, [pc, #212]	; (8003e38 <MX_GPIO_Init+0xfc>)
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d64:	f002 0210 	and.w	r2, r2, #16
 8003d68:	9200      	str	r2, [sp, #0]
 8003d6a:	9a00      	ldr	r2, [sp, #0]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d6c:	699a      	ldr	r2, [r3, #24]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003d6e:	4648      	mov	r0, r9
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d70:	f042 0220 	orr.w	r2, r2, #32
 8003d74:	619a      	str	r2, [r3, #24]
 8003d76:	699a      	ldr	r2, [r3, #24]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d7c:	f002 0220 	and.w	r2, r2, #32
 8003d80:	9201      	str	r2, [sp, #4]
 8003d82:	9a01      	ldr	r2, [sp, #4]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d84:	699a      	ldr	r2, [r3, #24]

	  /*Configure GPIO pin : PC13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2400      	movs	r4, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d88:	f042 0204 	orr.w	r2, r2, #4
 8003d8c:	619a      	str	r2, [r3, #24]
 8003d8e:	699a      	ldr	r2, [r3, #24]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d90:	2701      	movs	r7, #1
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d92:	f002 0204 	and.w	r2, r2, #4
 8003d96:	9202      	str	r2, [sp, #8]
 8003d98:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9a:	699a      	ldr	r2, [r3, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9c:	2602      	movs	r6, #2
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9e:	f042 0208 	orr.w	r2, r2, #8
 8003da2:	619a      	str	r2, [r3, #24]
 8003da4:	699b      	ldr	r3, [r3, #24]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003da6:	2200      	movs	r2, #0
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	9303      	str	r3, [sp, #12]
 8003dae:	9b03      	ldr	r3, [sp, #12]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003db0:	f7fd fb26 	bl	8001400 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8003db4:	4640      	mov	r0, r8
 8003db6:	2200      	movs	r2, #0
 8003db8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003dbc:	f7fd fb20 	bl	8001400 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f242 0110 	movw	r1, #8208	; 0x2010
 8003dc8:	f7fd fb1a 	bl	8001400 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dd0:	a904      	add	r1, sp, #16
 8003dd2:	4648      	mov	r0, r9
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003dd4:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd6:	9705      	str	r7, [sp, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	9406      	str	r4, [sp, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dda:	9607      	str	r6, [sp, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ddc:	f7fd fa2a 	bl	8001234 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA5 PA6 PA8 */
	  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8003de0:	f44f 73b0 	mov.w	r3, #352	; 0x160
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de4:	a904      	add	r1, sp, #16
 8003de6:	4640      	mov	r0, r8
	  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8003de8:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dea:	9705      	str	r7, [sp, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	9406      	str	r4, [sp, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dee:	9607      	str	r6, [sp, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df0:	f7fd fa20 	bl	8001234 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB12 PB5 */
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_5;
 8003df4:	f44f 5381 	mov.w	r3, #4128	; 0x1020
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df8:	a904      	add	r1, sp, #16
 8003dfa:	4628      	mov	r0, r5
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_5;
 8003dfc:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dfe:	9405      	str	r4, [sp, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e00:	9406      	str	r4, [sp, #24]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e02:	f7fd fa17 	bl	8001234 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB13 PB4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 8003e06:	f242 0310 	movw	r3, #8208	; 0x2010
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e0a:	a904      	add	r1, sp, #16
 8003e0c:	4628      	mov	r0, r5
	  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 8003e0e:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e10:	9705      	str	r7, [sp, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	9406      	str	r4, [sp, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e14:	9607      	str	r6, [sp, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e16:	f7fd fa0d 	bl	8001234 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB1 PB0 */
	  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003e1a:	2303      	movs	r3, #3
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e1c:	a904      	add	r1, sp, #16
 8003e1e:	4628      	mov	r0, r5
	  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003e20:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e22:	9705      	str	r7, [sp, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e24:	9406      	str	r4, [sp, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e26:	9607      	str	r6, [sp, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e28:	f7fd fa04 	bl	8001234 <HAL_GPIO_Init>

}
 8003e2c:	b009      	add	sp, #36	; 0x24
 8003e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40010c00 	.word	0x40010c00
 8003e3c:	40011000 	.word	0x40011000
 8003e40:	40010800 	.word	0x40010800

08003e44 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e44:	2228      	movs	r2, #40	; 0x28
{
 8003e46:	b570      	push	{r4, r5, r6, lr}
 8003e48:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e4a:	eb0d 0002 	add.w	r0, sp, r2
 8003e4e:	2100      	movs	r1, #0
 8003e50:	f000 ffc7 	bl	8004de2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e54:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e56:	2610      	movs	r6, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e58:	eb0d 0002 	add.w	r0, sp, r2
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	f000 ffc0 	bl	8004de2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e62:	4632      	mov	r2, r6
 8003e64:	2100      	movs	r1, #0
 8003e66:	a801      	add	r0, sp, #4
 8003e68:	f000 ffbb 	bl	8004de2 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e70:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e72:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e74:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e76:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e78:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e7c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e7e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e80:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e82:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e84:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e86:	f7fd fea9 	bl	8001bdc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e8a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e8c:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e8e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e94:	4629      	mov	r1, r5
 8003e96:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e98:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e9a:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e9c:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e9e:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ea0:	f7fe f864 	bl	8001f6c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ea4:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003ea6:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003ea8:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eaa:	f7fe f931 	bl	8002110 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003eae:	b014      	add	sp, #80	; 0x50
 8003eb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003eb4 <main>:
	uint32_t Len32 = 10;
 8003eb4:	230a      	movs	r3, #10
{
 8003eb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eba:	b089      	sub	sp, #36	; 0x24
	uint32_t Len32 = 10;
 8003ebc:	9301      	str	r3, [sp, #4]
	Buffer[0] = 'R';
 8003ebe:	2352      	movs	r3, #82	; 0x52
 8003ec0:	f88d 3008 	strb.w	r3, [sp, #8]
	Buffer[1] = 'D';
 8003ec4:	2344      	movs	r3, #68	; 0x44
 8003ec6:	f88d 3009 	strb.w	r3, [sp, #9]
	Buffer[2] = 'Y';
 8003eca:	2359      	movs	r3, #89	; 0x59
  State_measure = Ready;
 8003ecc:	2401      	movs	r4, #1
	Buffer[2] = 'Y';
 8003ece:	f88d 300a 	strb.w	r3, [sp, #10]
  State_measure = Ready;
 8003ed2:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 80041c0 <main+0x30c>
  HAL_Init();
 8003ed6:	f7fc fead 	bl	8000c34 <HAL_Init>
  SystemClock_Config();
 8003eda:	f7ff ffb3 	bl	8003e44 <SystemClock_Config>
  MX_GPIO_Init();
 8003ede:	f7ff ff2d 	bl	8003d3c <MX_GPIO_Init>
  MX_TIM2_Init();//sr04
 8003ee2:	f000 fb73 	bl	80045cc <MX_TIM2_Init>
  HAL_STM32_ADC_Init();
 8003ee6:	f7ff fe56 	bl	8003b96 <HAL_STM32_ADC_Init>
  HAL_STM32_UART_Init();
 8003eea:	f7ff fec5 	bl	8003c78 <HAL_STM32_UART_Init>
  HAL_STM32_InitServo();//servo init
 8003eee:	f7ff fead 	bl	8003c4c <HAL_STM32_InitServo>
  HAL_STM32_InitPWM();  //pwm init
 8003ef2:	f7ff fe95 	bl	8003c20 <HAL_STM32_InitPWM>
  HAL_Delay(100);
 8003ef6:	2064      	movs	r0, #100	; 0x64
 8003ef8:	f7fc fec0 	bl	8000c7c <HAL_Delay>
  HAL_STM32_USB_DEVICE_Init();
 8003efc:	f7ff febe 	bl	8003c7c <HAL_STM32_USB_DEVICE_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8003f00:	48ac      	ldr	r0, [pc, #688]	; (80041b4 <main+0x300>)
  State_measure = Ready;
 8003f02:	f889 4000 	strb.w	r4, [r9]
  HAL_TIM_Base_Start_IT(&htim2);
 8003f06:	f7fe fa65 	bl	80023d4 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 8003f0a:	2064      	movs	r0, #100	; 0x64
 8003f0c:	f7fc feb6 	bl	8000c7c <HAL_Delay>
  HAL_GPIO_WritePin(LED_BOARD_PORT,LED_BOARD_PIN,RESET);
 8003f10:	2200      	movs	r2, #0
 8003f12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f16:	48a8      	ldr	r0, [pc, #672]	; (80041b8 <main+0x304>)
 8003f18:	f7fd fa72 	bl	8001400 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_BEAT_PORT,LED_BEAT_PIN,SET);
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f22:	48a6      	ldr	r0, [pc, #664]	; (80041bc <main+0x308>)
 8003f24:	f7fd fa6c 	bl	8001400 <HAL_GPIO_WritePin>
  Lamp_set(0,0);  //LAMP OFF
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4608      	mov	r0, r1
 8003f2c:	f7ff fe6a 	bl	8003c04 <Lamp_set>
  Lamp_set(1,0);  //LAMP OFF
 8003f30:	4620      	mov	r0, r4
 8003f32:	2100      	movs	r1, #0
 8003f34:	f7ff fe66 	bl	8003c04 <Lamp_set>
  Motor_set(0,0); //00
 8003f38:	2100      	movs	r1, #0
	uint32_t Pow = 0;
 8003f3a:	2400      	movs	r4, #0
  Motor_set(0,0); //00
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	f7ff fe3f 	bl	8003bc0 <Motor_set>
  Dir_set(1500);  //90
 8003f42:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003f46:	f7ff fe5b 	bl	8003c00 <Dir_set>
	Sys_state Estado_sistema = SYS_READY;
 8003f4a:	f04f 0803 	mov.w	r8, #3
	uint32_t Dir = 0;
 8003f4e:	4625      	mov	r5, r4
	uint32_t Timeout = 0;
 8003f50:	4627      	mov	r7, r4
	uint8_t Len = 0;
 8003f52:	4626      	mov	r6, r4
						Len = sprintf(BufferTx,"%lu\n",(unsigned long)Adc_val);
 8003f54:	f8df a26c 	ldr.w	sl, [pc, #620]	; 80041c4 <main+0x310>
				  Len = sprintf(BufferTx,"%lu\n",(unsigned long)Medicion_d);
 8003f58:	f8df b26c 	ldr.w	fp, [pc, #620]	; 80041c8 <main+0x314>
	  switch(Estado_sistema)
 8003f5c:	f1b8 0f01 	cmp.w	r8, #1
 8003f60:	f000 8134 	beq.w	80041cc <main+0x318>
 8003f64:	f1b8 0f03 	cmp.w	r8, #3
 8003f68:	f040 8109 	bne.w	800417e <main+0x2ca>
		  if(HAL_STM32_VCP_retrieveInputData((uint8_t *)Buffer,&Len32)!=0)
 8003f6c:	a901      	add	r1, sp, #4
 8003f6e:	a802      	add	r0, sp, #8
 8003f70:	f7ff fe88 	bl	8003c84 <HAL_STM32_VCP_retrieveInputData>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	f000 8102 	beq.w	800417e <main+0x2ca>
			  if(Buffer[0] == 'R' && Buffer[1] == 'D' && Buffer[2] == 'Y')
 8003f7a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003f7e:	2b52      	cmp	r3, #82	; 0x52
 8003f80:	d117      	bne.n	8003fb2 <main+0xfe>
 8003f82:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003f86:	2b44      	cmp	r3, #68	; 0x44
 8003f88:	d113      	bne.n	8003fb2 <main+0xfe>
 8003f8a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003f8e:	2b59      	cmp	r3, #89	; 0x59
 8003f90:	d10f      	bne.n	8003fb2 <main+0xfe>
				  Motor_set(0,0); //00
 8003f92:	2100      	movs	r1, #0
 8003f94:	4608      	mov	r0, r1
 8003f96:	f7ff fe13 	bl	8003bc0 <Motor_set>
				  Dir_set(1500);  //90
 8003f9a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003f9e:	f7ff fe2f 	bl	8003c00 <Dir_set>
				  Lamp_set(0,0);  //LAMP OFF
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	f7ff fe2d 	bl	8003c04 <Lamp_set>
				  Lamp_set(1,0);  //LAMP OFF
 8003faa:	2100      	movs	r1, #0
 8003fac:	2001      	movs	r0, #1
 8003fae:	f7ff fe29 	bl	8003c04 <Lamp_set>
			  if(Buffer[0] == 'M' && Buffer[1] == 'O' && Buffer[2] == 'T')
 8003fb2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003fb6:	2b4d      	cmp	r3, #77	; 0x4d
 8003fb8:	d12c      	bne.n	8004014 <main+0x160>
 8003fba:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003fbe:	2b4f      	cmp	r3, #79	; 0x4f
 8003fc0:	d128      	bne.n	8004014 <main+0x160>
 8003fc2:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003fc6:	2b54      	cmp	r3, #84	; 0x54
 8003fc8:	d124      	bne.n	8004014 <main+0x160>
				  if(Buffer[3] == 'a') Pow = 0;
 8003fca:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003fce:	2b61      	cmp	r3, #97	; 0x61
 8003fd0:	f000 80d9 	beq.w	8004186 <main+0x2d2>
				  if(Buffer[3] == 'b') Pow = 1000;
 8003fd4:	2b62      	cmp	r3, #98	; 0x62
 8003fd6:	f000 80d8 	beq.w	800418a <main+0x2d6>
				  if(Buffer[3] == 'c') Pow = 2000;
 8003fda:	2b63      	cmp	r3, #99	; 0x63
 8003fdc:	f000 80d8 	beq.w	8004190 <main+0x2dc>
				  if(Buffer[3] == 'd') Pow = 3000;
 8003fe0:	2b64      	cmp	r3, #100	; 0x64
 8003fe2:	f000 80d8 	beq.w	8004196 <main+0x2e2>
				  if(Buffer[3] == 'e') Pow = 4000;
 8003fe6:	2b65      	cmp	r3, #101	; 0x65
 8003fe8:	bf08      	it	eq
 8003fea:	f44f 647a 	moveq.w	r4, #4000	; 0xfa0
				  if(Buffer[4] == 'a') Motor_set(1,Pow);
 8003fee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003ff2:	2b61      	cmp	r3, #97	; 0x61
 8003ff4:	d103      	bne.n	8003ffe <main+0x14a>
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	f7ff fde1 	bl	8003bc0 <Motor_set>
				  if(Buffer[4] == 'b') Motor_set(2,Pow);
 8003ffe:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004002:	2b62      	cmp	r3, #98	; 0x62
 8004004:	d103      	bne.n	800400e <main+0x15a>
 8004006:	4621      	mov	r1, r4
 8004008:	2002      	movs	r0, #2
 800400a:	f7ff fdd9 	bl	8003bc0 <Motor_set>
				  Estado_sistema = SYS_BUSY;
 800400e:	f04f 0801 	mov.w	r8, #1
				  Timeout = 0;
 8004012:	2700      	movs	r7, #0
			  if(Buffer[0] == 'D' && Buffer[1] == 'I' && Buffer[2] == 'R')
 8004014:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004018:	2b44      	cmp	r3, #68	; 0x44
 800401a:	d11c      	bne.n	8004056 <main+0x1a2>
 800401c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004020:	2b49      	cmp	r3, #73	; 0x49
 8004022:	d118      	bne.n	8004056 <main+0x1a2>
 8004024:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004028:	2b52      	cmp	r3, #82	; 0x52
 800402a:	d114      	bne.n	8004056 <main+0x1a2>
				  if(Buffer[3] == 'a') Dir = 1000;
 800402c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004030:	2b61      	cmp	r3, #97	; 0x61
 8004032:	f000 80b3 	beq.w	800419c <main+0x2e8>
				  if(Buffer[3] == 'b') Dir = 1250;
 8004036:	2b62      	cmp	r3, #98	; 0x62
 8004038:	f000 80b3 	beq.w	80041a2 <main+0x2ee>
				  if(Buffer[3] == 'c') Dir = 1500;
 800403c:	2b63      	cmp	r3, #99	; 0x63
 800403e:	f000 80b3 	beq.w	80041a8 <main+0x2f4>
				  if(Buffer[3] == 'd') Dir = 1750;
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	f000 80b3 	beq.w	80041ae <main+0x2fa>
				  if(Buffer[3] == 'e') Dir = 2000;
 8004048:	2b65      	cmp	r3, #101	; 0x65
 800404a:	bf08      	it	eq
 800404c:	f44f 65fa 	moveq.w	r5, #2000	; 0x7d0
				  Dir_set(Dir);
 8004050:	4628      	mov	r0, r5
 8004052:	f7ff fdd5 	bl	8003c00 <Dir_set>
			  if(Buffer[0] == 'S' && Buffer[1] == 'N' && Buffer[2] == 'R')
 8004056:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800405a:	2b53      	cmp	r3, #83	; 0x53
 800405c:	d11e      	bne.n	800409c <main+0x1e8>
 800405e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004062:	2b4e      	cmp	r3, #78	; 0x4e
 8004064:	d11a      	bne.n	800409c <main+0x1e8>
 8004066:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800406a:	2b52      	cmp	r3, #82	; 0x52
 800406c:	d116      	bne.n	800409c <main+0x1e8>
				  if(State_measure == Ready)HAL_TIM_Base_Start_IT(&htim2);
 800406e:	f899 3000 	ldrb.w	r3, [r9]
 8004072:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8004076:	2b01      	cmp	r3, #1
 8004078:	d102      	bne.n	8004080 <main+0x1cc>
 800407a:	484e      	ldr	r0, [pc, #312]	; (80041b4 <main+0x300>)
 800407c:	f7fe f9aa 	bl	80023d4 <HAL_TIM_Base_Start_IT>
				  HAL_Delay(100);
 8004080:	2064      	movs	r0, #100	; 0x64
 8004082:	f7fc fdfb 	bl	8000c7c <HAL_Delay>
				  Len = sprintf(BufferTx,"%lu\n",(unsigned long)Medicion_d);
 8004086:	4651      	mov	r1, sl
 8004088:	f8db 2000 	ldr.w	r2, [fp]
 800408c:	a805      	add	r0, sp, #20
 800408e:	f000 feb1 	bl	8004df4 <siprintf>
 8004092:	b2c6      	uxtb	r6, r0
				  HAL_STM32_CDC_Transmit_FS((uint8_t *) BufferTx,Len);
 8004094:	4631      	mov	r1, r6
 8004096:	a805      	add	r0, sp, #20
 8004098:	f7ff fdf2 	bl	8003c80 <HAL_STM32_CDC_Transmit_FS>
			  if(Buffer[0] == 'L' && Buffer[1] == 'U' && Buffer[2] == 'X')
 800409c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80040a0:	2b4c      	cmp	r3, #76	; 0x4c
 80040a2:	d11c      	bne.n	80040de <main+0x22a>
 80040a4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80040a8:	2b55      	cmp	r3, #85	; 0x55
 80040aa:	d118      	bne.n	80040de <main+0x22a>
 80040ac:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80040b0:	2b58      	cmp	r3, #88	; 0x58
 80040b2:	d114      	bne.n	80040de <main+0x22a>
					HAL_STM32_ADC_MeasureStart();
 80040b4:	f7ff fd72 	bl	8003b9c <HAL_STM32_ADC_MeasureStart>
					HAL_Delay(20);
 80040b8:	2014      	movs	r0, #20
 80040ba:	f7fc fddf 	bl	8000c7c <HAL_Delay>
					if(HAL_STM32_ADC_Poll(5) == HAL_ADC_OK)
 80040be:	2005      	movs	r0, #5
 80040c0:	f7ff fd72 	bl	8003ba8 <HAL_STM32_ADC_Poll>
 80040c4:	b938      	cbnz	r0, 80040d6 <main+0x222>
						Adc_val = HAL_STM32_ADC_GetVal();
 80040c6:	f7ff fd75 	bl	8003bb4 <HAL_STM32_ADC_GetVal>
						Len = sprintf(BufferTx,"%lu\n",(unsigned long)Adc_val);
 80040ca:	4651      	mov	r1, sl
 80040cc:	4602      	mov	r2, r0
 80040ce:	a805      	add	r0, sp, #20
 80040d0:	f000 fe90 	bl	8004df4 <siprintf>
 80040d4:	b2c6      	uxtb	r6, r0
					HAL_STM32_CDC_Transmit_FS((uint8_t *) BufferTx,Len);
 80040d6:	4631      	mov	r1, r6
 80040d8:	a805      	add	r0, sp, #20
 80040da:	f7ff fdd1 	bl	8003c80 <HAL_STM32_CDC_Transmit_FS>
			  if(Buffer[0] == 'L' && Buffer[1] == 'E' && Buffer[2] == 'D')
 80040de:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80040e2:	2b4c      	cmp	r3, #76	; 0x4c
 80040e4:	d137      	bne.n	8004156 <main+0x2a2>
 80040e6:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80040ea:	2b45      	cmp	r3, #69	; 0x45
 80040ec:	d147      	bne.n	800417e <main+0x2ca>
 80040ee:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80040f2:	2b44      	cmp	r3, #68	; 0x44
 80040f4:	d143      	bne.n	800417e <main+0x2ca>
				  if(Buffer[3] == 'a' && Buffer[4] == '0') Lamp_set(0,RESET);
 80040f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80040fa:	2b61      	cmp	r3, #97	; 0x61
 80040fc:	d107      	bne.n	800410e <main+0x25a>
 80040fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004102:	2b30      	cmp	r3, #48	; 0x30
 8004104:	d103      	bne.n	800410e <main+0x25a>
 8004106:	2100      	movs	r1, #0
 8004108:	4608      	mov	r0, r1
 800410a:	f7ff fd7b 	bl	8003c04 <Lamp_set>
				  if(Buffer[3] == 'a' && Buffer[4] == '1') Lamp_set(0,SET);
 800410e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004112:	2b61      	cmp	r3, #97	; 0x61
 8004114:	d107      	bne.n	8004126 <main+0x272>
 8004116:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800411a:	2b31      	cmp	r3, #49	; 0x31
 800411c:	d103      	bne.n	8004126 <main+0x272>
 800411e:	2101      	movs	r1, #1
 8004120:	2000      	movs	r0, #0
 8004122:	f7ff fd6f 	bl	8003c04 <Lamp_set>
				  if(Buffer[3] == 'b' && Buffer[4] == '0') Lamp_set(1,RESET);
 8004126:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800412a:	2b62      	cmp	r3, #98	; 0x62
 800412c:	d107      	bne.n	800413e <main+0x28a>
 800412e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004132:	2b30      	cmp	r3, #48	; 0x30
 8004134:	d103      	bne.n	800413e <main+0x28a>
 8004136:	2100      	movs	r1, #0
 8004138:	2001      	movs	r0, #1
 800413a:	f7ff fd63 	bl	8003c04 <Lamp_set>
				  if(Buffer[3] == 'b' && Buffer[4] == '1') Lamp_set(1,SET);
 800413e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004142:	2b62      	cmp	r3, #98	; 0x62
 8004144:	d107      	bne.n	8004156 <main+0x2a2>
 8004146:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800414a:	2b31      	cmp	r3, #49	; 0x31
 800414c:	d103      	bne.n	8004156 <main+0x2a2>
 800414e:	2101      	movs	r1, #1
 8004150:	4608      	mov	r0, r1
 8004152:	f7ff fd57 	bl	8003c04 <Lamp_set>
			  if(Buffer[0] == 'B' && Buffer[1] == 'R' && Buffer[2] == 'K')
 8004156:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800415a:	2b42      	cmp	r3, #66	; 0x42
 800415c:	d10f      	bne.n	800417e <main+0x2ca>
 800415e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004162:	2b52      	cmp	r3, #82	; 0x52
 8004164:	d10b      	bne.n	800417e <main+0x2ca>
 8004166:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800416a:	2b4b      	cmp	r3, #75	; 0x4b
 800416c:	d107      	bne.n	800417e <main+0x2ca>
				  Motor_set(0,0); //00
 800416e:	2100      	movs	r1, #0
 8004170:	4608      	mov	r0, r1
 8004172:	f7ff fd25 	bl	8003bc0 <Motor_set>
				  Dir_set(1500);  //90
 8004176:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800417a:	f7ff fd41 	bl	8003c00 <Dir_set>
	  HAL_Delay(3);
 800417e:	2003      	movs	r0, #3
 8004180:	f7fc fd7c 	bl	8000c7c <HAL_Delay>
	  switch(Estado_sistema)
 8004184:	e6ea      	b.n	8003f5c <main+0xa8>
				  if(Buffer[3] == 'a') Pow = 0;
 8004186:	2400      	movs	r4, #0
 8004188:	e731      	b.n	8003fee <main+0x13a>
				  if(Buffer[3] == 'b') Pow = 1000;
 800418a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800418e:	e72e      	b.n	8003fee <main+0x13a>
				  if(Buffer[3] == 'c') Pow = 2000;
 8004190:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8004194:	e72b      	b.n	8003fee <main+0x13a>
				  if(Buffer[3] == 'd') Pow = 3000;
 8004196:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800419a:	e728      	b.n	8003fee <main+0x13a>
				  if(Buffer[3] == 'a') Dir = 1000;
 800419c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80041a0:	e756      	b.n	8004050 <main+0x19c>
				  if(Buffer[3] == 'b') Dir = 1250;
 80041a2:	f240 45e2 	movw	r5, #1250	; 0x4e2
 80041a6:	e753      	b.n	8004050 <main+0x19c>
				  if(Buffer[3] == 'c') Dir = 1500;
 80041a8:	f240 55dc 	movw	r5, #1500	; 0x5dc
 80041ac:	e750      	b.n	8004050 <main+0x19c>
				  if(Buffer[3] == 'd') Dir = 1750;
 80041ae:	f240 65d6 	movw	r5, #1750	; 0x6d6
 80041b2:	e74d      	b.n	8004050 <main+0x19c>
 80041b4:	20002bf4 	.word	0x20002bf4
 80041b8:	40011000 	.word	0x40011000
 80041bc:	40010800 	.word	0x40010800
 80041c0:	20000117 	.word	0x20000117
 80041c4:	08005688 	.word	0x08005688
 80041c8:	200001e8 	.word	0x200001e8
		  if(HAL_STM32_VCP_retrieveInputData((uint8_t *)Buffer,&Len32)!=0)
 80041cc:	a901      	add	r1, sp, #4
 80041ce:	a802      	add	r0, sp, #8
		  Timeout ++;
 80041d0:	3701      	adds	r7, #1
		  if(HAL_STM32_VCP_retrieveInputData((uint8_t *)Buffer,&Len32)!=0)
 80041d2:	f7ff fd57 	bl	8003c84 <HAL_STM32_VCP_retrieveInputData>
 80041d6:	2800      	cmp	r0, #0
 80041d8:	f000 8100 	beq.w	80043dc <main+0x528>
			  if(Buffer[0] == 'R' && Buffer[1] == 'D' && Buffer[2] == 'Y')
 80041dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80041e0:	2b52      	cmp	r3, #82	; 0x52
 80041e2:	d117      	bne.n	8004214 <main+0x360>
 80041e4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80041e8:	2b44      	cmp	r3, #68	; 0x44
 80041ea:	d113      	bne.n	8004214 <main+0x360>
 80041ec:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80041f0:	2b59      	cmp	r3, #89	; 0x59
 80041f2:	d10f      	bne.n	8004214 <main+0x360>
				  Motor_set(0,0); //00
 80041f4:	2100      	movs	r1, #0
 80041f6:	4608      	mov	r0, r1
 80041f8:	f7ff fce2 	bl	8003bc0 <Motor_set>
				  Dir_set(1500);  //90
 80041fc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004200:	f7ff fcfe 	bl	8003c00 <Dir_set>
				  Lamp_set(0,0);  //LAMP OFF
 8004204:	2100      	movs	r1, #0
 8004206:	4608      	mov	r0, r1
 8004208:	f7ff fcfc 	bl	8003c04 <Lamp_set>
				  Lamp_set(1,0);  //LAMP OFF
 800420c:	2100      	movs	r1, #0
 800420e:	4640      	mov	r0, r8
 8004210:	f7ff fcf8 	bl	8003c04 <Lamp_set>
			  if(Buffer[0] == 'M' && Buffer[1] == 'O' && Buffer[2] == 'T')
 8004214:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004218:	2b4d      	cmp	r3, #77	; 0x4d
 800421a:	d12a      	bne.n	8004272 <main+0x3be>
 800421c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004220:	2b4f      	cmp	r3, #79	; 0x4f
 8004222:	d126      	bne.n	8004272 <main+0x3be>
 8004224:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004228:	2b54      	cmp	r3, #84	; 0x54
 800422a:	d122      	bne.n	8004272 <main+0x3be>
				  if(Buffer[3] == 'a') Pow = 0;
 800422c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004230:	2b61      	cmp	r3, #97	; 0x61
 8004232:	f000 80de 	beq.w	80043f2 <main+0x53e>
				  if(Buffer[3] == 'b') Pow = 1000;
 8004236:	2b62      	cmp	r3, #98	; 0x62
 8004238:	f000 80dd 	beq.w	80043f6 <main+0x542>
				  if(Buffer[3] == 'c') Pow = 2000;
 800423c:	2b63      	cmp	r3, #99	; 0x63
 800423e:	f000 80dd 	beq.w	80043fc <main+0x548>
				  if(Buffer[3] == 'd') Pow = 3000;
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	f000 80dd 	beq.w	8004402 <main+0x54e>
				  if(Buffer[3] == 'e') Pow = 4000;
 8004248:	2b65      	cmp	r3, #101	; 0x65
 800424a:	bf08      	it	eq
 800424c:	f44f 647a 	moveq.w	r4, #4000	; 0xfa0
				  if(Buffer[4] == 'a') Motor_set(1,Pow);
 8004250:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004254:	2b61      	cmp	r3, #97	; 0x61
 8004256:	d103      	bne.n	8004260 <main+0x3ac>
 8004258:	4621      	mov	r1, r4
 800425a:	2001      	movs	r0, #1
 800425c:	f7ff fcb0 	bl	8003bc0 <Motor_set>
				  if(Buffer[4] == 'b') Motor_set(2,Pow);
 8004260:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004264:	2b62      	cmp	r3, #98	; 0x62
 8004266:	d103      	bne.n	8004270 <main+0x3bc>
 8004268:	4621      	mov	r1, r4
 800426a:	2002      	movs	r0, #2
 800426c:	f7ff fca8 	bl	8003bc0 <Motor_set>
				  Timeout = 0;
 8004270:	2700      	movs	r7, #0
			  if(Buffer[0] == 'D' && Buffer[1] == 'I' && Buffer[2] == 'R')
 8004272:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004276:	2b44      	cmp	r3, #68	; 0x44
 8004278:	d11c      	bne.n	80042b4 <main+0x400>
 800427a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800427e:	2b49      	cmp	r3, #73	; 0x49
 8004280:	d118      	bne.n	80042b4 <main+0x400>
 8004282:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004286:	2b52      	cmp	r3, #82	; 0x52
 8004288:	d114      	bne.n	80042b4 <main+0x400>
				  if(Buffer[3] == 'a') Dir = 1000;
 800428a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800428e:	2b61      	cmp	r3, #97	; 0x61
 8004290:	f000 80ba 	beq.w	8004408 <main+0x554>
				  if(Buffer[3] == 'b') Dir = 1250;
 8004294:	2b62      	cmp	r3, #98	; 0x62
 8004296:	f000 80ba 	beq.w	800440e <main+0x55a>
				  if(Buffer[3] == 'c') Dir = 1500;
 800429a:	2b63      	cmp	r3, #99	; 0x63
 800429c:	f000 80ba 	beq.w	8004414 <main+0x560>
				  if(Buffer[3] == 'd') Dir = 1750;
 80042a0:	2b64      	cmp	r3, #100	; 0x64
 80042a2:	f000 80ba 	beq.w	800441a <main+0x566>
				  if(Buffer[3] == 'e') Dir = 2000;
 80042a6:	2b65      	cmp	r3, #101	; 0x65
 80042a8:	bf08      	it	eq
 80042aa:	f44f 65fa 	moveq.w	r5, #2000	; 0x7d0
				  Dir_set(Dir);
 80042ae:	4628      	mov	r0, r5
 80042b0:	f7ff fca6 	bl	8003c00 <Dir_set>
			  if(Buffer[0] == 'S' && Buffer[1] == 'N' && Buffer[2] == 'R')
 80042b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80042b8:	2b53      	cmp	r3, #83	; 0x53
 80042ba:	d11e      	bne.n	80042fa <main+0x446>
 80042bc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80042c0:	2b4e      	cmp	r3, #78	; 0x4e
 80042c2:	d11a      	bne.n	80042fa <main+0x446>
 80042c4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80042c8:	2b52      	cmp	r3, #82	; 0x52
 80042ca:	d116      	bne.n	80042fa <main+0x446>
				  if(State_measure == Ready)HAL_TIM_Base_Start_IT(&htim2);
 80042cc:	f899 3000 	ldrb.w	r3, [r9]
 80042d0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d102      	bne.n	80042de <main+0x42a>
 80042d8:	4851      	ldr	r0, [pc, #324]	; (8004420 <main+0x56c>)
 80042da:	f7fe f87b 	bl	80023d4 <HAL_TIM_Base_Start_IT>
				  HAL_Delay(100);
 80042de:	2064      	movs	r0, #100	; 0x64
 80042e0:	f7fc fccc 	bl	8000c7c <HAL_Delay>
				  Len = sprintf(BufferTx,"%lu\n",(unsigned long)Medicion_d);
 80042e4:	4651      	mov	r1, sl
 80042e6:	f8db 2000 	ldr.w	r2, [fp]
 80042ea:	a805      	add	r0, sp, #20
 80042ec:	f000 fd82 	bl	8004df4 <siprintf>
 80042f0:	b2c6      	uxtb	r6, r0
				  HAL_STM32_CDC_Transmit_FS((uint8_t *) BufferTx,Len);
 80042f2:	4631      	mov	r1, r6
 80042f4:	a805      	add	r0, sp, #20
 80042f6:	f7ff fcc3 	bl	8003c80 <HAL_STM32_CDC_Transmit_FS>
			  if(Buffer[0] == 'L' && Buffer[1] == 'U' && Buffer[2] == 'X')
 80042fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80042fe:	2b4c      	cmp	r3, #76	; 0x4c
 8004300:	d11c      	bne.n	800433c <main+0x488>
 8004302:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004306:	2b55      	cmp	r3, #85	; 0x55
 8004308:	d118      	bne.n	800433c <main+0x488>
 800430a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800430e:	2b58      	cmp	r3, #88	; 0x58
 8004310:	d114      	bne.n	800433c <main+0x488>
					HAL_STM32_ADC_MeasureStart();
 8004312:	f7ff fc43 	bl	8003b9c <HAL_STM32_ADC_MeasureStart>
					HAL_Delay(20);
 8004316:	2014      	movs	r0, #20
 8004318:	f7fc fcb0 	bl	8000c7c <HAL_Delay>
					if(HAL_STM32_ADC_Poll(5) == HAL_ADC_OK)
 800431c:	2005      	movs	r0, #5
 800431e:	f7ff fc43 	bl	8003ba8 <HAL_STM32_ADC_Poll>
 8004322:	b938      	cbnz	r0, 8004334 <main+0x480>
						Adc_val = HAL_STM32_ADC_GetVal();
 8004324:	f7ff fc46 	bl	8003bb4 <HAL_STM32_ADC_GetVal>
						Len = sprintf(BufferTx,"%lu\n",(unsigned long)Adc_val);
 8004328:	4651      	mov	r1, sl
 800432a:	4602      	mov	r2, r0
 800432c:	a805      	add	r0, sp, #20
 800432e:	f000 fd61 	bl	8004df4 <siprintf>
 8004332:	b2c6      	uxtb	r6, r0
					HAL_STM32_CDC_Transmit_FS((uint8_t *) BufferTx,Len);
 8004334:	4631      	mov	r1, r6
 8004336:	a805      	add	r0, sp, #20
 8004338:	f7ff fca2 	bl	8003c80 <HAL_STM32_CDC_Transmit_FS>
			  if(Buffer[0] == 'L' && Buffer[1] == 'E' && Buffer[2] == 'D')
 800433c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004340:	2b4c      	cmp	r3, #76	; 0x4c
 8004342:	d137      	bne.n	80043b4 <main+0x500>
 8004344:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004348:	2b45      	cmp	r3, #69	; 0x45
 800434a:	d147      	bne.n	80043dc <main+0x528>
 800434c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004350:	2b44      	cmp	r3, #68	; 0x44
 8004352:	d143      	bne.n	80043dc <main+0x528>
				  if(Buffer[3] == 'a' && Buffer[4] == '0') Lamp_set(0,RESET);
 8004354:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004358:	2b61      	cmp	r3, #97	; 0x61
 800435a:	d107      	bne.n	800436c <main+0x4b8>
 800435c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004360:	2b30      	cmp	r3, #48	; 0x30
 8004362:	d103      	bne.n	800436c <main+0x4b8>
 8004364:	2100      	movs	r1, #0
 8004366:	4608      	mov	r0, r1
 8004368:	f7ff fc4c 	bl	8003c04 <Lamp_set>
				  if(Buffer[3] == 'a' && Buffer[4] == '1') Lamp_set(0,SET);
 800436c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004370:	2b61      	cmp	r3, #97	; 0x61
 8004372:	d107      	bne.n	8004384 <main+0x4d0>
 8004374:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004378:	2b31      	cmp	r3, #49	; 0x31
 800437a:	d103      	bne.n	8004384 <main+0x4d0>
 800437c:	2101      	movs	r1, #1
 800437e:	2000      	movs	r0, #0
 8004380:	f7ff fc40 	bl	8003c04 <Lamp_set>
				  if(Buffer[3] == 'b' && Buffer[4] == '0') Lamp_set(1,RESET);
 8004384:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004388:	2b62      	cmp	r3, #98	; 0x62
 800438a:	d107      	bne.n	800439c <main+0x4e8>
 800438c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004390:	2b30      	cmp	r3, #48	; 0x30
 8004392:	d103      	bne.n	800439c <main+0x4e8>
 8004394:	2100      	movs	r1, #0
 8004396:	2001      	movs	r0, #1
 8004398:	f7ff fc34 	bl	8003c04 <Lamp_set>
				  if(Buffer[3] == 'b' && Buffer[4] == '1') Lamp_set(1,SET);
 800439c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80043a0:	2b62      	cmp	r3, #98	; 0x62
 80043a2:	d107      	bne.n	80043b4 <main+0x500>
 80043a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80043a8:	2b31      	cmp	r3, #49	; 0x31
 80043aa:	d103      	bne.n	80043b4 <main+0x500>
 80043ac:	2101      	movs	r1, #1
 80043ae:	4608      	mov	r0, r1
 80043b0:	f7ff fc28 	bl	8003c04 <Lamp_set>
			  if(Buffer[0] == 'B' && Buffer[1] == 'R' && Buffer[2] == 'K')
 80043b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80043b8:	2b42      	cmp	r3, #66	; 0x42
 80043ba:	d10f      	bne.n	80043dc <main+0x528>
 80043bc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80043c0:	2b52      	cmp	r3, #82	; 0x52
 80043c2:	d10b      	bne.n	80043dc <main+0x528>
 80043c4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80043c8:	2b4b      	cmp	r3, #75	; 0x4b
 80043ca:	d107      	bne.n	80043dc <main+0x528>
				  Motor_set(0,0); //00
 80043cc:	2100      	movs	r1, #0
 80043ce:	4608      	mov	r0, r1
 80043d0:	f7ff fbf6 	bl	8003bc0 <Motor_set>
				  Dir_set(1500);  //90
 80043d4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80043d8:	f7ff fc12 	bl	8003c00 <Dir_set>
		  if(Timeout > SYS_TIMEOUT)
 80043dc:	2f46      	cmp	r7, #70	; 0x46
 80043de:	f67f aece 	bls.w	800417e <main+0x2ca>
			  Motor_set(0,0); //00
 80043e2:	2100      	movs	r1, #0
 80043e4:	4608      	mov	r0, r1
 80043e6:	f7ff fbeb 	bl	8003bc0 <Motor_set>
			  Estado_sistema = SYS_READY;
 80043ea:	f04f 0803 	mov.w	r8, #3
			  Timeout = 0;
 80043ee:	2700      	movs	r7, #0
 80043f0:	e6c5      	b.n	800417e <main+0x2ca>
				  if(Buffer[3] == 'a') Pow = 0;
 80043f2:	2400      	movs	r4, #0
 80043f4:	e72c      	b.n	8004250 <main+0x39c>
				  if(Buffer[3] == 'b') Pow = 1000;
 80043f6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80043fa:	e729      	b.n	8004250 <main+0x39c>
				  if(Buffer[3] == 'c') Pow = 2000;
 80043fc:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8004400:	e726      	b.n	8004250 <main+0x39c>
				  if(Buffer[3] == 'd') Pow = 3000;
 8004402:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8004406:	e723      	b.n	8004250 <main+0x39c>
				  if(Buffer[3] == 'a') Dir = 1000;
 8004408:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800440c:	e74f      	b.n	80042ae <main+0x3fa>
				  if(Buffer[3] == 'b') Dir = 1250;
 800440e:	f240 45e2 	movw	r5, #1250	; 0x4e2
 8004412:	e74c      	b.n	80042ae <main+0x3fa>
				  if(Buffer[3] == 'c') Dir = 1500;
 8004414:	f240 55dc 	movw	r5, #1500	; 0x5dc
 8004418:	e749      	b.n	80042ae <main+0x3fa>
				  if(Buffer[3] == 'd') Dir = 1750;
 800441a:	f240 65d6 	movw	r5, #1750	; 0x6d6
 800441e:	e746      	b.n	80042ae <main+0x3fa>
 8004420:	20002bf4 	.word	0x20002bf4

08004424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004424:	4770      	bx	lr
	...

08004428 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004428:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <HAL_MspInit+0x3c>)
{
 800442a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	619a      	str	r2, [r3, #24]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	f002 0201 	and.w	r2, r2, #1
 800443a:	9200      	str	r2, [sp, #0]
 800443c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004444:	61da      	str	r2, [r3, #28]
 8004446:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004448:	4a07      	ldr	r2, [pc, #28]	; (8004468 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800444a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004452:	6853      	ldr	r3, [r2, #4]
 8004454:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800445c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800445e:	b002      	add	sp, #8
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	40010000 	.word	0x40010000

0800446c <NMI_Handler>:
 800446c:	4770      	bx	lr

0800446e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800446e:	e7fe      	b.n	800446e <HardFault_Handler>

08004470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004470:	e7fe      	b.n	8004470 <MemManage_Handler>

08004472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004472:	e7fe      	b.n	8004472 <BusFault_Handler>

08004474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004474:	e7fe      	b.n	8004474 <UsageFault_Handler>

08004476 <SVC_Handler>:
 8004476:	4770      	bx	lr

08004478 <DebugMon_Handler>:
 8004478:	4770      	bx	lr

0800447a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800447a:	4770      	bx	lr

0800447c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800447c:	f7fc bbec 	b.w	8000c58 <HAL_IncTick>

08004480 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004480:	4801      	ldr	r0, [pc, #4]	; (8004488 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8004482:	f7fd b8cf 	b.w	8001624 <HAL_PCD_IRQHandler>
 8004486:	bf00      	nop
 8004488:	20003668 	.word	0x20003668
 800448c:	00000000 	.word	0x00000000

08004490 <TIM2_IRQHandler>:
state State_measure = Ready;
volatile int count = 0,Medicion_d = 0;
volatile float Medicion = 0.0;

void TIM2_IRQHandler(void)
{
 8004490:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */
	switch(State_measure)
 8004492:	4c35      	ldr	r4, [pc, #212]	; (8004568 <TIM2_IRQHandler+0xd8>)
 8004494:	7823      	ldrb	r3, [r4, #0]
 8004496:	2b04      	cmp	r3, #4
 8004498:	d80b      	bhi.n	80044b2 <TIM2_IRQHandler+0x22>
 800449a:	e8df f003 	tbb	[pc, r3]
 800449e:	032d      	.short	0x032d
 80044a0:	5b0f      	.short	0x5b0f
 80044a2:	16          	.byte	0x16
 80044a3:	00          	.byte	0x00
	  {
	  	  case Ready:
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80044a4:	2201      	movs	r2, #1
 80044a6:	2110      	movs	r1, #16
 80044a8:	4830      	ldr	r0, [pc, #192]	; (800456c <TIM2_IRQHandler+0xdc>)
 80044aa:	f7fc ffa9 	bl	8001400 <HAL_GPIO_WritePin>
	  		  State_measure = Triggering;
 80044ae:	2302      	movs	r3, #2
	  			  count++;
	  			  if(count > Max_echo_delay)
	  			  {
	  				  HAL_TIM_Base_Stop_IT(&htim2);
	  				  count = 0;
	  				  State_measure = Fault;
 80044b0:	7023      	strb	r3, [r4, #0]

	  	  default:
	  	  break;
	  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80044b2:	482f      	ldr	r0, [pc, #188]	; (8004570 <TIM2_IRQHandler+0xe0>)
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80044b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_TIM_IRQHandler(&htim2);
 80044b8:	f7fe b86b 	b.w	8002592 <HAL_TIM_IRQHandler>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80044bc:	2200      	movs	r2, #0
 80044be:	2110      	movs	r1, #16
 80044c0:	482a      	ldr	r0, [pc, #168]	; (800456c <TIM2_IRQHandler+0xdc>)
 80044c2:	f7fc ff9d 	bl	8001400 <HAL_GPIO_WritePin>
	  		  State_measure = Waiting;
 80044c6:	2304      	movs	r3, #4
 80044c8:	e7f2      	b.n	80044b0 <TIM2_IRQHandler+0x20>
	  		  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)== 0)
 80044ca:	2120      	movs	r1, #32
 80044cc:	4827      	ldr	r0, [pc, #156]	; (800456c <TIM2_IRQHandler+0xdc>)
 80044ce:	f7fc ff91 	bl	80013f4 <HAL_GPIO_ReadPin>
 80044d2:	4d28      	ldr	r5, [pc, #160]	; (8004574 <TIM2_IRQHandler+0xe4>)
 80044d4:	4606      	mov	r6, r0
 80044d6:	b960      	cbnz	r0, 80044f2 <TIM2_IRQHandler+0x62>
	  			  count++;
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	3301      	adds	r3, #1
 80044dc:	602b      	str	r3, [r5, #0]
	  			  if(count > Max_echo_delay)
 80044de:	682b      	ldr	r3, [r5, #0]
 80044e0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80044e4:	dde5      	ble.n	80044b2 <TIM2_IRQHandler+0x22>
	  				  HAL_TIM_Base_Stop_IT(&htim2);
 80044e6:	4822      	ldr	r0, [pc, #136]	; (8004570 <TIM2_IRQHandler+0xe0>)
 80044e8:	f7fd ff7f 	bl	80023ea <HAL_TIM_Base_Stop_IT>
	  				  count = 0;
 80044ec:	602e      	str	r6, [r5, #0]
	  				  State_measure = Fault;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e7de      	b.n	80044b0 <TIM2_IRQHandler+0x20>
	  			  count = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	602b      	str	r3, [r5, #0]
 80044f6:	e7db      	b.n	80044b0 <TIM2_IRQHandler+0x20>
	  		  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)== 1)
 80044f8:	2120      	movs	r1, #32
 80044fa:	481c      	ldr	r0, [pc, #112]	; (800456c <TIM2_IRQHandler+0xdc>)
 80044fc:	f7fc ff7a 	bl	80013f4 <HAL_GPIO_ReadPin>
 8004500:	2801      	cmp	r0, #1
 8004502:	4d1c      	ldr	r5, [pc, #112]	; (8004574 <TIM2_IRQHandler+0xe4>)
 8004504:	d10c      	bne.n	8004520 <TIM2_IRQHandler+0x90>
	  			  count ++;
 8004506:	682b      	ldr	r3, [r5, #0]
 8004508:	3301      	adds	r3, #1
 800450a:	602b      	str	r3, [r5, #0]
	  			  if(count > Max_range_cnt)
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8004512:	ddce      	ble.n	80044b2 <TIM2_IRQHandler+0x22>
	  				  HAL_TIM_Base_Stop_IT(&htim2);
 8004514:	4816      	ldr	r0, [pc, #88]	; (8004570 <TIM2_IRQHandler+0xe0>)
 8004516:	f7fd ff68 	bl	80023ea <HAL_TIM_Base_Stop_IT>
	  				  count = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	602b      	str	r3, [r5, #0]
 800451e:	e7e6      	b.n	80044ee <TIM2_IRQHandler+0x5e>
	  			  HAL_TIM_Base_Stop_IT(&htim2);
 8004520:	4813      	ldr	r0, [pc, #76]	; (8004570 <TIM2_IRQHandler+0xe0>)
 8004522:	f7fd ff62 	bl	80023ea <HAL_TIM_Base_Stop_IT>
	  			  Medicion = (float)count*0.1715;//me da nauseas esto
 8004526:	6828      	ldr	r0, [r5, #0]
 8004528:	f7fc fae6 	bl	8000af8 <__aeabi_i2f>
 800452c:	f7fb ff74 	bl	8000418 <__aeabi_f2d>
 8004530:	a30b      	add	r3, pc, #44	; (adr r3, 8004560 <TIM2_IRQHandler+0xd0>)
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f7fb ffc3 	bl	80004c0 <__aeabi_dmul>
 800453a:	f7fc f9d3 	bl	80008e4 <__aeabi_d2f>
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <TIM2_IRQHandler+0xe8>)
 8004540:	6018      	str	r0, [r3, #0]
	  			  Medicion_d = (int)Medicion;
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	f7fc fb2c 	bl	8000ba0 <__aeabi_f2iz>
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <TIM2_IRQHandler+0xec>)
 800454a:	6018      	str	r0, [r3, #0]
	  			  count = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	602b      	str	r3, [r5, #0]
	  			  State_measure = Ready;
 8004550:	2301      	movs	r3, #1
 8004552:	e7ad      	b.n	80044b0 <TIM2_IRQHandler+0x20>
	  		  HAL_TIM_Base_Stop_IT(&htim2);
 8004554:	4806      	ldr	r0, [pc, #24]	; (8004570 <TIM2_IRQHandler+0xe0>)
 8004556:	f7fd ff48 	bl	80023ea <HAL_TIM_Base_Stop_IT>
	  	  break;
 800455a:	e7aa      	b.n	80044b2 <TIM2_IRQHandler+0x22>
 800455c:	f3af 8000 	nop.w
 8004560:	45a1cac1 	.word	0x45a1cac1
 8004564:	3fc5f3b6 	.word	0x3fc5f3b6
 8004568:	20000117 	.word	0x20000117
 800456c:	40010c00 	.word	0x40010c00
 8004570:	20002bf4 	.word	0x20002bf4
 8004574:	200001ec 	.word	0x200001ec
 8004578:	200001e4 	.word	0x200001e4
 800457c:	200001e8 	.word	0x200001e8

08004580 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <SystemInit+0x40>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	4a0d      	ldr	r2, [pc, #52]	; (80045c4 <SystemInit+0x44>)
 800458e:	400a      	ands	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004598:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800459c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045a4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80045ac:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80045ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80045b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80045b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <SystemInit+0x48>)
 80045ba:	609a      	str	r2, [r3, #8]
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	f8ff0000 	.word	0xf8ff0000
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim3);

}

void MX_TIM2_Init(void)
{
 80045cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ce:	2210      	movs	r2, #16
 80045d0:	2100      	movs	r1, #0
 80045d2:	a802      	add	r0, sp, #8
 80045d4:	f000 fc05 	bl	8004de2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 240;
 80045d8:	22f0      	movs	r2, #240	; 0xf0
 80045da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80045de:	4813      	ldr	r0, [pc, #76]	; (800462c <MX_TIM2_Init+0x60>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045e0:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 240;
 80045e2:	e880 0006 	stmia.w	r0, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 2;
 80045e6:	2202      	movs	r2, #2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ec:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 2;
 80045ee:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045f0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045f2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80045f4:	f7fe f8a8 	bl	8002748 <HAL_TIM_Base_Init>
 80045f8:	b108      	cbz	r0, 80045fe <MX_TIM2_Init+0x32>
  {
    Error_Handler();
 80045fa:	f7ff ff13 	bl	8004424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004602:	a902      	add	r1, sp, #8
 8004604:	4809      	ldr	r0, [pc, #36]	; (800462c <MX_TIM2_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004606:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004608:	f7fd ff05 	bl	8002416 <HAL_TIM_ConfigClockSource>
 800460c:	b108      	cbz	r0, 8004612 <MX_TIM2_Init+0x46>
  {
    Error_Handler();
 800460e:	f7ff ff09 	bl	8004424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004612:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004614:	4669      	mov	r1, sp
 8004616:	4805      	ldr	r0, [pc, #20]	; (800462c <MX_TIM2_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004618:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800461a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800461c:	f7fe f978 	bl	8002910 <HAL_TIMEx_MasterConfigSynchronization>
 8004620:	b108      	cbz	r0, 8004626 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8004622:	f7ff feff 	bl	8004424 <Error_Handler>
  }

}
 8004626:	b007      	add	sp, #28
 8004628:	f85d fb04 	ldr.w	pc, [sp], #4
 800462c:	20002bf4 	.word	0x20002bf4

08004630 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004630:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM4)
 8004632:	6803      	ldr	r3, [r0, #0]
 8004634:	4a1a      	ldr	r2, [pc, #104]	; (80046a0 <HAL_TIM_Base_MspInit+0x70>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d10c      	bne.n	8004654 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800463a:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <HAL_TIM_Base_MspInit+0x74>)
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	f042 0204 	orr.w	r2, r2, #4
 8004642:	61da      	str	r2, [r3, #28]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800464e:	b005      	add	sp, #20
 8004650:	f85d fb04 	ldr.w	pc, [sp], #4
  if(tim_baseHandle->Instance==TIM3)
 8004654:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <HAL_TIM_Base_MspInit+0x78>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d10a      	bne.n	8004670 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <HAL_TIM_Base_MspInit+0x74>)
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	f042 0202 	orr.w	r2, r2, #2
 8004662:	61da      	str	r2, [r3, #28]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	9302      	str	r3, [sp, #8]
 800466c:	9b02      	ldr	r3, [sp, #8]
 800466e:	e7ee      	b.n	800464e <HAL_TIM_Base_MspInit+0x1e>
  if(tim_baseHandle->Instance==TIM2)
 8004670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004674:	d1eb      	bne.n	800464e <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004676:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800467a:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800467c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004684:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004686:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004688:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	9303      	str	r3, [sp, #12]
 8004690:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004692:	f7fc fd79 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004696:	201c      	movs	r0, #28
 8004698:	f7fc fdaa 	bl	80011f0 <HAL_NVIC_EnableIRQ>
}
 800469c:	e7d7      	b.n	800464e <HAL_TIM_Base_MspInit+0x1e>
 800469e:	bf00      	nop
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40000400 	.word	0x40000400

080046ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80046ac:	b510      	push	{r4, lr}
 80046ae:	4604      	mov	r4, r0
 80046b0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b2:	2210      	movs	r2, #16
 80046b4:	2100      	movs	r1, #0
 80046b6:	a802      	add	r0, sp, #8
 80046b8:	f000 fb93 	bl	8004de2 <memset>
  if(timHandle->Instance==TIM4)
 80046bc:	6822      	ldr	r2, [r4, #0]
 80046be:	4b18      	ldr	r3, [pc, #96]	; (8004720 <HAL_TIM_MspPostInit+0x74>)
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d113      	bne.n	80046ec <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80046c8:	699a      	ldr	r2, [r3, #24]
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ca:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046cc:	f042 0208 	orr.w	r2, r2, #8
 80046d0:	619a      	str	r2, [r3, #24]
 80046d2:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d4:	4813      	ldr	r0, [pc, #76]	; (8004724 <HAL_TIM_MspPostInit+0x78>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80046de:	2340      	movs	r3, #64	; 0x40
 80046e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e2:	2302      	movs	r3, #2
 80046e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e8:	f7fc fda4 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

  if(timHandle->Instance==TIM3)
 80046ec:	6822      	ldr	r2, [r4, #0]
 80046ee:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <HAL_TIM_MspPostInit+0x7c>)
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d113      	bne.n	800471c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f4:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80046f8:	699a      	ldr	r2, [r3, #24]
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fa:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fc:	f042 0204 	orr.w	r2, r2, #4
 8004700:	619a      	str	r2, [r3, #24]
 8004702:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004704:	4809      	ldr	r0, [pc, #36]	; (800472c <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004712:	2302      	movs	r3, #2
 8004714:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004716:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004718:	f7fc fd8c 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
}
 800471c:	b006      	add	sp, #24
 800471e:	bd10      	pop	{r4, pc}
 8004720:	40000800 	.word	0x40000800
 8004724:	40010c00 	.word	0x40010c00
 8004728:	40000400 	.word	0x40000400
 800472c:	40010800 	.word	0x40010800

08004730 <MX_TIM4_Init>:
{
 8004730:	b510      	push	{r4, lr}
 8004732:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004734:	2210      	movs	r2, #16
 8004736:	2100      	movs	r1, #0
 8004738:	a803      	add	r0, sp, #12
 800473a:	f000 fb52 	bl	8004de2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800473e:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004740:	221c      	movs	r2, #28
 8004742:	4621      	mov	r1, r4
 8004744:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004748:	9401      	str	r4, [sp, #4]
 800474a:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800474c:	f000 fb49 	bl	8004de2 <memset>
  htim4.Init.Prescaler = 71;
 8004750:	2347      	movs	r3, #71	; 0x47
  htim4.Instance = TIM4;
 8004752:	481d      	ldr	r0, [pc, #116]	; (80047c8 <MX_TIM4_Init+0x98>)
  htim4.Init.Prescaler = 71;
 8004754:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <MX_TIM4_Init+0x9c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004756:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 71;
 8004758:	e880 000c 	stmia.w	r0, {r2, r3}
  htim4.Init.Period = 19999;
 800475c:	f644 631f 	movw	r3, #19999	; 0x4e1f
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004760:	6104      	str	r4, [r0, #16]
  htim4.Init.Period = 19999;
 8004762:	60c3      	str	r3, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004764:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004766:	f7fd ffef 	bl	8002748 <HAL_TIM_Base_Init>
 800476a:	b108      	cbz	r0, 8004770 <MX_TIM4_Init+0x40>
    Error_Handler();
 800476c:	f7ff fe5a 	bl	8004424 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004774:	a903      	add	r1, sp, #12
 8004776:	4814      	ldr	r0, [pc, #80]	; (80047c8 <MX_TIM4_Init+0x98>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004778:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800477a:	f7fd fe4c 	bl	8002416 <HAL_TIM_ConfigClockSource>
 800477e:	b108      	cbz	r0, 8004784 <MX_TIM4_Init+0x54>
    Error_Handler();
 8004780:	f7ff fe50 	bl	8004424 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004784:	4810      	ldr	r0, [pc, #64]	; (80047c8 <MX_TIM4_Init+0x98>)
 8004786:	f7fd fff9 	bl	800277c <HAL_TIM_PWM_Init>
 800478a:	b108      	cbz	r0, 8004790 <MX_TIM4_Init+0x60>
    Error_Handler();
 800478c:	f7ff fe4a 	bl	8004424 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004790:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004792:	a901      	add	r1, sp, #4
 8004794:	480c      	ldr	r0, [pc, #48]	; (80047c8 <MX_TIM4_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004796:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004798:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800479a:	f7fe f8b9 	bl	8002910 <HAL_TIMEx_MasterConfigSynchronization>
 800479e:	b108      	cbz	r0, 80047a4 <MX_TIM4_Init+0x74>
    Error_Handler();
 80047a0:	f7ff fe40 	bl	8004424 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047a4:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047a6:	2200      	movs	r2, #0
 80047a8:	a907      	add	r1, sp, #28
 80047aa:	4807      	ldr	r0, [pc, #28]	; (80047c8 <MX_TIM4_Init+0x98>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047ac:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80047ae:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047b0:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047b2:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047b4:	f7fe f828 	bl	8002808 <HAL_TIM_PWM_ConfigChannel>
 80047b8:	b108      	cbz	r0, 80047be <MX_TIM4_Init+0x8e>
    Error_Handler();
 80047ba:	f7ff fe33 	bl	8004424 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 80047be:	4802      	ldr	r0, [pc, #8]	; (80047c8 <MX_TIM4_Init+0x98>)
 80047c0:	f7ff ff74 	bl	80046ac <HAL_TIM_MspPostInit>
}
 80047c4:	b00e      	add	sp, #56	; 0x38
 80047c6:	bd10      	pop	{r4, pc}
 80047c8:	20002b74 	.word	0x20002b74
 80047cc:	40000800 	.word	0x40000800

080047d0 <MX_TIM3_Init>:
{
 80047d0:	b510      	push	{r4, lr}
 80047d2:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047d4:	2210      	movs	r2, #16
 80047d6:	2100      	movs	r1, #0
 80047d8:	a803      	add	r0, sp, #12
 80047da:	f000 fb02 	bl	8004de2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047de:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047e0:	221c      	movs	r2, #28
 80047e2:	4621      	mov	r1, r4
 80047e4:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047e8:	9401      	str	r4, [sp, #4]
 80047ea:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047ec:	f000 faf9 	bl	8004de2 <memset>
  htim3.Init.Prescaler = 71;
 80047f0:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 80047f2:	481d      	ldr	r0, [pc, #116]	; (8004868 <MX_TIM3_Init+0x98>)
  htim3.Init.Prescaler = 71;
 80047f4:	4a1d      	ldr	r2, [pc, #116]	; (800486c <MX_TIM3_Init+0x9c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047f6:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 71;
 80047f8:	e880 000c 	stmia.w	r0, {r2, r3}
  htim3.Init.Period = 3999;
 80047fc:	f640 739f 	movw	r3, #3999	; 0xf9f
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004800:	6104      	str	r4, [r0, #16]
  htim3.Init.Period = 3999;
 8004802:	60c3      	str	r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004804:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004806:	f7fd ff9f 	bl	8002748 <HAL_TIM_Base_Init>
 800480a:	b108      	cbz	r0, 8004810 <MX_TIM3_Init+0x40>
    Error_Handler();
 800480c:	f7ff fe0a 	bl	8004424 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004814:	a903      	add	r1, sp, #12
 8004816:	4814      	ldr	r0, [pc, #80]	; (8004868 <MX_TIM3_Init+0x98>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004818:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800481a:	f7fd fdfc 	bl	8002416 <HAL_TIM_ConfigClockSource>
 800481e:	b108      	cbz	r0, 8004824 <MX_TIM3_Init+0x54>
    Error_Handler();
 8004820:	f7ff fe00 	bl	8004424 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004824:	4810      	ldr	r0, [pc, #64]	; (8004868 <MX_TIM3_Init+0x98>)
 8004826:	f7fd ffa9 	bl	800277c <HAL_TIM_PWM_Init>
 800482a:	b108      	cbz	r0, 8004830 <MX_TIM3_Init+0x60>
    Error_Handler();
 800482c:	f7ff fdfa 	bl	8004424 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004830:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004832:	a901      	add	r1, sp, #4
 8004834:	480c      	ldr	r0, [pc, #48]	; (8004868 <MX_TIM3_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004836:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004838:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800483a:	f7fe f869 	bl	8002910 <HAL_TIMEx_MasterConfigSynchronization>
 800483e:	b108      	cbz	r0, 8004844 <MX_TIM3_Init+0x74>
    Error_Handler();
 8004840:	f7ff fdf0 	bl	8004424 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004844:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004846:	2204      	movs	r2, #4
 8004848:	a907      	add	r1, sp, #28
 800484a:	4807      	ldr	r0, [pc, #28]	; (8004868 <MX_TIM3_Init+0x98>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800484c:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800484e:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004850:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004852:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004854:	f7fd ffd8 	bl	8002808 <HAL_TIM_PWM_ConfigChannel>
 8004858:	b108      	cbz	r0, 800485e <MX_TIM3_Init+0x8e>
    Error_Handler();
 800485a:	f7ff fde3 	bl	8004424 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 800485e:	4802      	ldr	r0, [pc, #8]	; (8004868 <MX_TIM3_Init+0x98>)
 8004860:	f7ff ff24 	bl	80046ac <HAL_TIM_MspPostInit>
}
 8004864:	b00e      	add	sp, #56	; 0x38
 8004866:	bd10      	pop	{r4, pc}
 8004868:	20002bb4 	.word	0x20002bb4
 800486c:	40000400 	.word	0x40000400

08004870 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004870:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8004872:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart1.Instance = USART1;
 8004876:	480a      	ldr	r0, [pc, #40]	; (80048a0 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800487a:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 800487c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004880:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004882:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004884:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004886:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004888:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800488a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800488c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800488e:	f7fe f901 	bl	8002a94 <HAL_UART_Init>
 8004892:	b118      	cbz	r0, 800489c <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8004894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004898:	f7ff bdc4 	b.w	8004424 <Error_Handler>
 800489c:	bd08      	pop	{r3, pc}
 800489e:	bf00      	nop
 80048a0:	20002c34 	.word	0x20002c34
 80048a4:	40013800 	.word	0x40013800

080048a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048a8:	b510      	push	{r4, lr}
 80048aa:	4604      	mov	r4, r0
 80048ac:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ae:	2210      	movs	r2, #16
 80048b0:	2100      	movs	r1, #0
 80048b2:	a802      	add	r0, sp, #8
 80048b4:	f000 fa95 	bl	8004de2 <memset>
  if(uartHandle->Instance==USART1)
 80048b8:	6822      	ldr	r2, [r4, #0]
 80048ba:	4b17      	ldr	r3, [pc, #92]	; (8004918 <HAL_UART_MspInit+0x70>)
 80048bc:	429a      	cmp	r2, r3
 80048be:	d128      	bne.n	8004912 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048c0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80048c4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048c6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80048c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048cc:	619a      	str	r2, [r3, #24]
 80048ce:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d0:	4812      	ldr	r0, [pc, #72]	; (800491c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80048d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80048d6:	9200      	str	r2, [sp, #0]
 80048d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	f042 0204 	orr.w	r2, r2, #4
 80048e0:	619a      	str	r2, [r3, #24]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80048ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f2:	2302      	movs	r3, #2
 80048f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048f6:	2303      	movs	r3, #3
 80048f8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048fa:	f7fc fc9b 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80048fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004902:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004904:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004906:	a902      	add	r1, sp, #8
 8004908:	4804      	ldr	r0, [pc, #16]	; (800491c <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800490a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800490e:	f7fc fc91 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004912:	b006      	add	sp, #24
 8004914:	bd10      	pop	{r4, pc}
 8004916:	bf00      	nop
 8004918:	40013800 	.word	0x40013800
 800491c:	40010800 	.word	0x40010800

08004920 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004920:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8004922:	4c09      	ldr	r4, [pc, #36]	; (8004948 <MX_USB_DEVICE_Init+0x28>)
 8004924:	2200      	movs	r2, #0
 8004926:	4909      	ldr	r1, [pc, #36]	; (800494c <MX_USB_DEVICE_Init+0x2c>)
 8004928:	4620      	mov	r0, r4
 800492a:	f7fe fe23 	bl	8003574 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800492e:	4908      	ldr	r1, [pc, #32]	; (8004950 <MX_USB_DEVICE_Init+0x30>)
 8004930:	4620      	mov	r0, r4
 8004932:	f7fe fe34 	bl	800359e <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8004936:	4620      	mov	r0, r4
 8004938:	4906      	ldr	r1, [pc, #24]	; (8004954 <MX_USB_DEVICE_Init+0x34>)
 800493a:	f7fe fddc 	bl	80034f6 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800493e:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8004944:	f7fe be32 	b.w	80035ac <USBD_Start>
 8004948:	20002c74 	.word	0x20002c74
 800494c:	2000012c 	.word	0x2000012c
 8004950:	20000008 	.word	0x20000008
 8004954:	2000011c 	.word	0x2000011c

08004958 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004958:	2000      	movs	r0, #0
 800495a:	4770      	bx	lr

0800495c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800495c:	2000      	movs	r0, #0
 800495e:	4770      	bx	lr

08004960 <CDC_Receive_FS>:
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
		CDC_Transmit_FS(dataOff,strlen(dataOff));
	}*/
	//CDC_Receive_FS is a callback function. When data were received, the system calls this function. The received data can be accessed via Buf,and *Len
	s_RxBuffers.IsCommandDataReceived=1; //indicates data were received
 8004960:	2201      	movs	r2, #1
 8004962:	4b0e      	ldr	r3, [pc, #56]	; (800499c <CDC_Receive_FS+0x3c>)
{/*
 8004964:	b510      	push	{r4, lr}
	s_RxBuffers.IsCommandDataReceived=1; //indicates data were received
 8004966:	721a      	strb	r2, [r3, #8]
	s_RxBuffers.CommandsLens[s_RxBuffers.pos_receive]=*Len; //only set the length, data was directly saved to buffer
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	680c      	ldr	r4, [r1, #0]
 800496c:	1898      	adds	r0, r3, r2
	s_RxBuffers.pos_receive++; //move to next position to receive data
 800496e:	3201      	adds	r2, #1
	if(s_RxBuffers.pos_receive>=MaxCommandsInBuffer) //reach the last buffer, need to rewind to 0
 8004970:	2a09      	cmp	r2, #9
	{
		s_RxBuffers.pos_receive=0;
 8004972:	bfc8      	it	gt
 8004974:	2200      	movgt	r2, #0
	s_RxBuffers.CommandsLens[s_RxBuffers.pos_receive]=*Len; //only set the length, data was directly saved to buffer
 8004976:	f242 7119 	movw	r1, #10009	; 0x2719
		s_RxBuffers.pos_receive=0;
 800497a:	601a      	str	r2, [r3, #0]

	//Buffer_struct.IsCommandDataReceived = 1;
	//Buffer_struct.CommandsLens = *Len;


	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS[s_RxBuffers.pos_receive]);
 800497c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	s_RxBuffers.CommandsLens[s_RxBuffers.pos_receive]=*Len; //only set the length, data was directly saved to buffer
 8004980:	5444      	strb	r4, [r0, r1]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS[s_RxBuffers.pos_receive]);
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	4806      	ldr	r0, [pc, #24]	; (80049a0 <CDC_Receive_FS+0x40>)
 8004986:	fb02 3101 	mla	r1, r2, r1, r3
 800498a:	3109      	adds	r1, #9
 800498c:	f7fe fdc2 	bl	8003514 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004990:	4803      	ldr	r0, [pc, #12]	; (80049a0 <CDC_Receive_FS+0x40>)
 8004992:	f7fe fddc 	bl	800354e <USBD_CDC_ReceivePacket>
	return (USBD_OK);
  /* USER CODE END 6 */
}
 8004996:	2000      	movs	r0, #0
 8004998:	bd10      	pop	{r4, pc}
 800499a:	bf00      	nop
 800499c:	200001f0 	.word	0x200001f0
 80049a0:	20002c74 	.word	0x20002c74

080049a4 <CDC_Init_FS>:
{
 80049a4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80049a6:	4c06      	ldr	r4, [pc, #24]	; (80049c0 <CDC_Init_FS+0x1c>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	4906      	ldr	r1, [pc, #24]	; (80049c4 <CDC_Init_FS+0x20>)
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7fe fda9 	bl	8003504 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80049b2:	4905      	ldr	r1, [pc, #20]	; (80049c8 <CDC_Init_FS+0x24>)
 80049b4:	4620      	mov	r0, r4
 80049b6:	f7fe fdad 	bl	8003514 <USBD_CDC_SetRxBuffer>
}
 80049ba:	2000      	movs	r0, #0
 80049bc:	bd10      	pop	{r4, pc}
 80049be:	bf00      	nop
 80049c0:	20002c74 	.word	0x20002c74
 80049c4:	20003280 	.word	0x20003280
 80049c8:	20002e98 	.word	0x20002e98

080049cc <VCP_retrieveInputData>:
* @param Buf: Buffer of data to be received
* @param Len: Number of data received (in bytes)
* @retval 0 means no data was received.
*/
int8_t VCP_retrieveInputData(uint8_t* Buf, uint32_t *Len)
{
 80049cc:	b570      	push	{r4, r5, r6, lr}
	if(s_RxBuffers.IsCommandDataReceived==0)return 0; //no data received
 80049ce:	4c11      	ldr	r4, [pc, #68]	; (8004a14 <VCP_retrieveInputData+0x48>)
{
 80049d0:	4606      	mov	r6, r0
	if(s_RxBuffers.IsCommandDataReceived==0)return 0; //no data received
 80049d2:	7a23      	ldrb	r3, [r4, #8]
{
 80049d4:	460d      	mov	r5, r1
	if(s_RxBuffers.IsCommandDataReceived==0)return 0; //no data received
 80049d6:	b1db      	cbz	r3, 8004a10 <VCP_retrieveInputData+0x44>
	int index=s_RxBuffers.pos_process;
	*Len=s_RxBuffers.CommandsLens[index]; //return the length
 80049d8:	f242 7319 	movw	r3, #10009	; 0x2719
	int index=s_RxBuffers.pos_process;
 80049dc:	6861      	ldr	r1, [r4, #4]
	*Len=s_RxBuffers.CommandsLens[index]; //return the length
 80049de:	1862      	adds	r2, r4, r1
 80049e0:	5cd2      	ldrb	r2, [r2, r3]
	memcpy(Buf,s_RxBuffers.UserRxBufferFS[index],*Len);
 80049e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049e6:	fb03 4101 	mla	r1, r3, r1, r4
	*Len=s_RxBuffers.CommandsLens[index]; //return the length
 80049ea:	602a      	str	r2, [r5, #0]
	memcpy(Buf,s_RxBuffers.UserRxBufferFS[index],*Len);
 80049ec:	3109      	adds	r1, #9
 80049ee:	f000 f9ed 	bl	8004dcc <memcpy>
	Buf[*Len]='\0'; //testing only. make sure there is ending char in the returned command string
 80049f2:	2200      	movs	r2, #0
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	54f2      	strb	r2, [r6, r3]
					//check if all data were processed.
	s_RxBuffers.pos_process++;
 80049f8:	6863      	ldr	r3, [r4, #4]
	if(s_RxBuffers.pos_process>=MaxCommandsInBuffer) //reach the last buffer, need to rewind to 0
	{
		s_RxBuffers.pos_process=0;
	}
	if(s_RxBuffers.pos_process==s_RxBuffers.pos_receive)
 80049fa:	6821      	ldr	r1, [r4, #0]
	s_RxBuffers.pos_process++;
 80049fc:	3301      	adds	r3, #1
 80049fe:	2b09      	cmp	r3, #9
 8004a00:	bfc8      	it	gt
 8004a02:	4613      	movgt	r3, r2
	if(s_RxBuffers.pos_process==s_RxBuffers.pos_receive)
 8004a04:	428b      	cmp	r3, r1
	s_RxBuffers.pos_process++;
 8004a06:	6063      	str	r3, [r4, #4]
	if(s_RxBuffers.pos_process==s_RxBuffers.pos_receive)
 8004a08:	d100      	bne.n	8004a0c <VCP_retrieveInputData+0x40>
		s_RxBuffers.IsCommandDataReceived=0; //check if all data were processed
 8004a0a:	7222      	strb	r2, [r4, #8]

	return 1;
 8004a0c:	2001      	movs	r0, #1
}
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
	if(s_RxBuffers.IsCommandDataReceived==0)return 0; //no data received
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
 8004a14:	200001f0 	.word	0x200001f0

08004a18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004a18:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004a1a:	4c09      	ldr	r4, [pc, #36]	; (8004a40 <CDC_Transmit_FS+0x28>)
{
 8004a1c:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004a1e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8004a22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a26:	b943      	cbnz	r3, 8004a3a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004a28:	4601      	mov	r1, r0
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7fe fd6a 	bl	8003504 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004a30:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8004a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004a36:	f7fe bd73 	b.w	8003520 <USBD_CDC_TransmitPacket>
}
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	bd10      	pop	{r4, pc}
 8004a3e:	bf00      	nop
 8004a40:	20002c74 	.word	0x20002c74

08004a44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004a44:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8004a46:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <HAL_PCD_MspInit+0x38>)
 8004a48:	6802      	ldr	r2, [r0, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d112      	bne.n	8004a74 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004a4e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004a52:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004a54:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8004a56:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004a5a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004a5c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8004a5e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004a60:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8004a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004a6a:	f7fc fb8d 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004a6e:	2014      	movs	r0, #20
 8004a70:	f7fc fbbe 	bl	80011f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004a74:	b003      	add	sp, #12
 8004a76:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a7a:	bf00      	nop
 8004a7c:	40005c00 	.word	0x40005c00

08004a80 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004a80:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8004a84:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004a88:	f7fe bda7 	b.w	80035da <USBD_LL_SetupStage>

08004a8c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004a8c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004a90:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8004a94:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004a98:	f7fe bdcc 	b.w	8003634 <USBD_LL_DataOutStage>

08004a9c <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004a9c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa2:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004aa6:	f7fe bdf7 	b.w	8003698 <USBD_LL_DataInStage>

08004aaa <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004aaa:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004aae:	f7fe be73 	b.w	8003798 <USBD_LL_SOF>

08004ab2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8004ab2:	b510      	push	{r4, lr}
 8004ab4:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004abc:	f7fe fe5a 	bl	8003774 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004ac0:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8004ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004ac8:	f7fe be35 	b.w	8003736 <USBD_LL_Reset>

08004acc <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004acc:	b510      	push	{r4, lr}
 8004ace:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004ad0:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004ad4:	f7fe fe51 	bl	800377a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004ad8:	69a3      	ldr	r3, [r4, #24]
 8004ada:	b123      	cbz	r3, 8004ae6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004adc:	4a02      	ldr	r2, [pc, #8]	; (8004ae8 <HAL_PCD_SuspendCallback+0x1c>)
 8004ade:	6913      	ldr	r3, [r2, #16]
 8004ae0:	f043 0306 	orr.w	r3, r3, #6
 8004ae4:	6113      	str	r3, [r2, #16]
 8004ae6:	bd10      	pop	{r4, pc}
 8004ae8:	e000ed00 	.word	0xe000ed00

08004aec <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004aec:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004af0:	f7fe be4c 	b.w	800378c <USBD_LL_Resume>

08004af4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004af4:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8004af6:	2302      	movs	r3, #2
 8004af8:	2208      	movs	r2, #8
 8004afa:	f04f 0e03 	mov.w	lr, #3
{
 8004afe:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8004b00:	491b      	ldr	r1, [pc, #108]	; (8004b70 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.pData = pdev;
 8004b02:	481c      	ldr	r0, [pc, #112]	; (8004b74 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8004b04:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004b08:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8004b0a:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8004b0e:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004b12:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004b14:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004b16:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004b18:	f7fc fc77 	bl	800140a <HAL_PCD_Init>
 8004b1c:	b108      	cbz	r0, 8004b22 <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 8004b1e:	f7ff fc81 	bl	8004424 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004b22:	2200      	movs	r2, #0
 8004b24:	2318      	movs	r3, #24
 8004b26:	4611      	mov	r1, r2
 8004b28:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004b2c:	f7fd f83e 	bl	8001bac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004b30:	2358      	movs	r3, #88	; 0x58
 8004b32:	2200      	movs	r2, #0
 8004b34:	2180      	movs	r1, #128	; 0x80
 8004b36:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004b3a:	f7fd f837 	bl	8001bac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004b3e:	23c0      	movs	r3, #192	; 0xc0
 8004b40:	2200      	movs	r2, #0
 8004b42:	2181      	movs	r1, #129	; 0x81
 8004b44:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004b48:	f7fd f830 	bl	8001bac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004b4c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004b50:	2200      	movs	r2, #0
 8004b52:	2101      	movs	r1, #1
 8004b54:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004b58:	f7fd f828 	bl	8001bac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b60:	2200      	movs	r2, #0
 8004b62:	2182      	movs	r1, #130	; 0x82
 8004b64:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004b68:	f7fd f820 	bl	8001bac <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	bd10      	pop	{r4, pc}
 8004b70:	40005c00 	.word	0x40005c00
 8004b74:	20003668 	.word	0x20003668

08004b78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004b78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004b7a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004b7e:	f7fc fcad 	bl	80014dc <HAL_PCD_Start>
 8004b82:	2803      	cmp	r0, #3
 8004b84:	bf9a      	itte	ls
 8004b86:	4b02      	ldrls	r3, [pc, #8]	; (8004b90 <USBD_LL_Start+0x18>)
 8004b88:	5c18      	ldrbls	r0, [r3, r0]
 8004b8a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004b8c:	bd08      	pop	{r3, pc}
 8004b8e:	bf00      	nop
 8004b90:	080056a5 	.word	0x080056a5

08004b94 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004b94:	b510      	push	{r4, lr}
 8004b96:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004b98:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	f7fc fcc7 	bl	8001532 <HAL_PCD_EP_Open>
 8004ba4:	2803      	cmp	r0, #3
 8004ba6:	bf9a      	itte	ls
 8004ba8:	4b01      	ldrls	r3, [pc, #4]	; (8004bb0 <USBD_LL_OpenEP+0x1c>)
 8004baa:	5c18      	ldrbls	r0, [r3, r0]
 8004bac:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004bae:	bd10      	pop	{r4, pc}
 8004bb0:	080056a5 	.word	0x080056a5

08004bb4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004bb4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004bb6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004bba:	f7fc fcdd 	bl	8001578 <HAL_PCD_EP_Close>
 8004bbe:	2803      	cmp	r0, #3
 8004bc0:	bf9a      	itte	ls
 8004bc2:	4b02      	ldrls	r3, [pc, #8]	; (8004bcc <USBD_LL_CloseEP+0x18>)
 8004bc4:	5c18      	ldrbls	r0, [r3, r0]
 8004bc6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004bc8:	bd08      	pop	{r3, pc}
 8004bca:	bf00      	nop
 8004bcc:	080056a5 	.word	0x080056a5

08004bd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004bd0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004bd2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004bd6:	f7fc ff9d 	bl	8001b14 <HAL_PCD_EP_SetStall>
 8004bda:	2803      	cmp	r0, #3
 8004bdc:	bf9a      	itte	ls
 8004bde:	4b02      	ldrls	r3, [pc, #8]	; (8004be8 <USBD_LL_StallEP+0x18>)
 8004be0:	5c18      	ldrbls	r0, [r3, r0]
 8004be2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004be4:	bd08      	pop	{r3, pc}
 8004be6:	bf00      	nop
 8004be8:	080056a5 	.word	0x080056a5

08004bec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004bec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004bee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004bf2:	f7fc ffb8 	bl	8001b66 <HAL_PCD_EP_ClrStall>
 8004bf6:	2803      	cmp	r0, #3
 8004bf8:	bf9a      	itte	ls
 8004bfa:	4b02      	ldrls	r3, [pc, #8]	; (8004c04 <USBD_LL_ClearStallEP+0x18>)
 8004bfc:	5c18      	ldrbls	r0, [r3, r0]
 8004bfe:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004c00:	bd08      	pop	{r3, pc}
 8004c02:	bf00      	nop
 8004c04:	080056a5 	.word	0x080056a5

08004c08 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004c08:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004c0a:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004c0e:	bf45      	ittet	mi
 8004c10:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8004c14:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004c18:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004c1c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004c20:	bf58      	it	pl
 8004c22:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8004c26:	4770      	bx	lr

08004c28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004c28:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004c2a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004c2e:	f7fc fc6c 	bl	800150a <HAL_PCD_SetAddress>
 8004c32:	2803      	cmp	r0, #3
 8004c34:	bf9a      	itte	ls
 8004c36:	4b02      	ldrls	r3, [pc, #8]	; (8004c40 <USBD_LL_SetUSBAddress+0x18>)
 8004c38:	5c18      	ldrbls	r0, [r3, r0]
 8004c3a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004c3c:	bd08      	pop	{r3, pc}
 8004c3e:	bf00      	nop
 8004c40:	080056a5 	.word	0x080056a5

08004c44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004c44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004c46:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004c4a:	f7fc fcd5 	bl	80015f8 <HAL_PCD_EP_Transmit>
 8004c4e:	2803      	cmp	r0, #3
 8004c50:	bf9a      	itte	ls
 8004c52:	4b02      	ldrls	r3, [pc, #8]	; (8004c5c <USBD_LL_Transmit+0x18>)
 8004c54:	5c18      	ldrbls	r0, [r3, r0]
 8004c56:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8004c58:	bd08      	pop	{r3, pc}
 8004c5a:	bf00      	nop
 8004c5c:	080056a5 	.word	0x080056a5

08004c60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004c60:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004c62:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004c66:	f7fc fca8 	bl	80015ba <HAL_PCD_EP_Receive>
 8004c6a:	2803      	cmp	r0, #3
 8004c6c:	bf9a      	itte	ls
 8004c6e:	4b02      	ldrls	r3, [pc, #8]	; (8004c78 <USBD_LL_PrepareReceive+0x18>)
 8004c70:	5c18      	ldrbls	r0, [r3, r0]
 8004c72:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004c74:	bd08      	pop	{r3, pc}
 8004c76:	bf00      	nop
 8004c78:	080056a5 	.word	0x080056a5

08004c7c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004c7c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004c7e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004c82:	f7fc fcb2 	bl	80015ea <HAL_PCD_EP_GetRxCount>
}
 8004c86:	bd08      	pop	{r3, pc}

08004c88 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004c88:	4800      	ldr	r0, [pc, #0]	; (8004c8c <USBD_static_malloc+0x4>)
 8004c8a:	4770      	bx	lr
 8004c8c:	20002914 	.word	0x20002914

08004c90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8004c90:	4770      	bx	lr

08004c92 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8004c92:	4770      	bx	lr

08004c94 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8004c94:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004c96:	4801      	ldr	r0, [pc, #4]	; (8004c9c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004c98:	800b      	strh	r3, [r1, #0]
}
 8004c9a:	4770      	bx	lr
 8004c9c:	20000148 	.word	0x20000148

08004ca0 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8004ca0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004ca2:	4801      	ldr	r0, [pc, #4]	; (8004ca8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004ca4:	800b      	strh	r3, [r1, #0]
}
 8004ca6:	4770      	bx	lr
 8004ca8:	2000015c 	.word	0x2000015c

08004cac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004cac:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004cae:	4c04      	ldr	r4, [pc, #16]	; (8004cc0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004cb0:	460a      	mov	r2, r1
 8004cb2:	4804      	ldr	r0, [pc, #16]	; (8004cc4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	f7fe ff10 	bl	8003ada <USBD_GetString>
  return USBD_StrDesc;
}
 8004cba:	4620      	mov	r0, r4
 8004cbc:	bd10      	pop	{r4, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20003ac8 	.word	0x20003ac8
 8004cc4:	080056c2 	.word	0x080056c2

08004cc8 <USBD_FS_ProductStrDescriptor>:
{
 8004cc8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004cca:	4c04      	ldr	r4, [pc, #16]	; (8004cdc <USBD_FS_ProductStrDescriptor+0x14>)
 8004ccc:	460a      	mov	r2, r1
 8004cce:	4804      	ldr	r0, [pc, #16]	; (8004ce0 <USBD_FS_ProductStrDescriptor+0x18>)
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	f7fe ff02 	bl	8003ada <USBD_GetString>
}
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	bd10      	pop	{r4, pc}
 8004cda:	bf00      	nop
 8004cdc:	20003ac8 	.word	0x20003ac8
 8004ce0:	080056d5 	.word	0x080056d5

08004ce4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004ce4:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8004ce6:	4c04      	ldr	r4, [pc, #16]	; (8004cf8 <USBD_FS_SerialStrDescriptor+0x14>)
 8004ce8:	460a      	mov	r2, r1
 8004cea:	4804      	ldr	r0, [pc, #16]	; (8004cfc <USBD_FS_SerialStrDescriptor+0x18>)
 8004cec:	4621      	mov	r1, r4
 8004cee:	f7fe fef4 	bl	8003ada <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	bd10      	pop	{r4, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20003ac8 	.word	0x20003ac8
 8004cfc:	080056eb 	.word	0x080056eb

08004d00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004d00:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004d02:	4c04      	ldr	r4, [pc, #16]	; (8004d14 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004d04:	460a      	mov	r2, r1
 8004d06:	4804      	ldr	r0, [pc, #16]	; (8004d18 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004d08:	4621      	mov	r1, r4
 8004d0a:	f7fe fee6 	bl	8003ada <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004d0e:	4620      	mov	r0, r4
 8004d10:	bd10      	pop	{r4, pc}
 8004d12:	bf00      	nop
 8004d14:	20003ac8 	.word	0x20003ac8
 8004d18:	080056a9 	.word	0x080056a9

08004d1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004d1c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004d1e:	4c04      	ldr	r4, [pc, #16]	; (8004d30 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004d20:	460a      	mov	r2, r1
 8004d22:	4804      	ldr	r0, [pc, #16]	; (8004d34 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004d24:	4621      	mov	r1, r4
 8004d26:	f7fe fed8 	bl	8003ada <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	bf00      	nop
 8004d30:	20003ac8 	.word	0x20003ac8
 8004d34:	080056b4 	.word	0x080056b4

08004d38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004d38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004d3a:	e003      	b.n	8004d44 <LoopCopyDataInit>

08004d3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004d3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004d40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004d42:	3104      	adds	r1, #4

08004d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004d44:	480a      	ldr	r0, [pc, #40]	; (8004d70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004d48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004d4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004d4c:	d3f6      	bcc.n	8004d3c <CopyDataInit>
  ldr r2, =_sbss
 8004d4e:	4a0a      	ldr	r2, [pc, #40]	; (8004d78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004d50:	e002      	b.n	8004d58 <LoopFillZerobss>

08004d52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004d52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004d54:	f842 3b04 	str.w	r3, [r2], #4

08004d58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004d58:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004d5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004d5c:	d3f9      	bcc.n	8004d52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d5e:	f7ff fc0f 	bl	8004580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d62:	f000 f80f 	bl	8004d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d66:	f7ff f8a5 	bl	8003eb4 <main>
  bx lr
 8004d6a:	4770      	bx	lr
  ldr r3, =_sidata
 8004d6c:	08005734 	.word	0x08005734
  ldr r0, =_sdata
 8004d70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004d74:	200001c4 	.word	0x200001c4
  ldr r2, =_sbss
 8004d78:	200001c4 	.word	0x200001c4
  ldr r3, = _ebss
 8004d7c:	20003ccc 	.word	0x20003ccc

08004d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d80:	e7fe      	b.n	8004d80 <ADC1_2_IRQHandler>
	...

08004d84 <__libc_init_array>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	2500      	movs	r5, #0
 8004d88:	4e0c      	ldr	r6, [pc, #48]	; (8004dbc <__libc_init_array+0x38>)
 8004d8a:	4c0d      	ldr	r4, [pc, #52]	; (8004dc0 <__libc_init_array+0x3c>)
 8004d8c:	1ba4      	subs	r4, r4, r6
 8004d8e:	10a4      	asrs	r4, r4, #2
 8004d90:	42a5      	cmp	r5, r4
 8004d92:	d109      	bne.n	8004da8 <__libc_init_array+0x24>
 8004d94:	f000 fc5c 	bl	8005650 <_init>
 8004d98:	2500      	movs	r5, #0
 8004d9a:	4e0a      	ldr	r6, [pc, #40]	; (8004dc4 <__libc_init_array+0x40>)
 8004d9c:	4c0a      	ldr	r4, [pc, #40]	; (8004dc8 <__libc_init_array+0x44>)
 8004d9e:	1ba4      	subs	r4, r4, r6
 8004da0:	10a4      	asrs	r4, r4, #2
 8004da2:	42a5      	cmp	r5, r4
 8004da4:	d105      	bne.n	8004db2 <__libc_init_array+0x2e>
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
 8004da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dac:	4798      	blx	r3
 8004dae:	3501      	adds	r5, #1
 8004db0:	e7ee      	b.n	8004d90 <__libc_init_array+0xc>
 8004db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004db6:	4798      	blx	r3
 8004db8:	3501      	adds	r5, #1
 8004dba:	e7f2      	b.n	8004da2 <__libc_init_array+0x1e>
 8004dbc:	0800572c 	.word	0x0800572c
 8004dc0:	0800572c 	.word	0x0800572c
 8004dc4:	0800572c 	.word	0x0800572c
 8004dc8:	08005730 	.word	0x08005730

08004dcc <memcpy>:
 8004dcc:	b510      	push	{r4, lr}
 8004dce:	1e43      	subs	r3, r0, #1
 8004dd0:	440a      	add	r2, r1
 8004dd2:	4291      	cmp	r1, r2
 8004dd4:	d100      	bne.n	8004dd8 <memcpy+0xc>
 8004dd6:	bd10      	pop	{r4, pc}
 8004dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004de0:	e7f7      	b.n	8004dd2 <memcpy+0x6>

08004de2 <memset>:
 8004de2:	4603      	mov	r3, r0
 8004de4:	4402      	add	r2, r0
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d100      	bne.n	8004dec <memset+0xa>
 8004dea:	4770      	bx	lr
 8004dec:	f803 1b01 	strb.w	r1, [r3], #1
 8004df0:	e7f9      	b.n	8004de6 <memset+0x4>
	...

08004df4 <siprintf>:
 8004df4:	b40e      	push	{r1, r2, r3}
 8004df6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004dfa:	b500      	push	{lr}
 8004dfc:	b09c      	sub	sp, #112	; 0x70
 8004dfe:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004e02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e06:	9104      	str	r1, [sp, #16]
 8004e08:	9107      	str	r1, [sp, #28]
 8004e0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e10:	9002      	str	r0, [sp, #8]
 8004e12:	9006      	str	r0, [sp, #24]
 8004e14:	4808      	ldr	r0, [pc, #32]	; (8004e38 <siprintf+0x44>)
 8004e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e1a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004e1e:	6800      	ldr	r0, [r0, #0]
 8004e20:	a902      	add	r1, sp, #8
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	f000 f866 	bl	8004ef4 <_svfiprintf_r>
 8004e28:	2200      	movs	r2, #0
 8004e2a:	9b02      	ldr	r3, [sp, #8]
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	b01c      	add	sp, #112	; 0x70
 8004e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e34:	b003      	add	sp, #12
 8004e36:	4770      	bx	lr
 8004e38:	20000160 	.word	0x20000160

08004e3c <__ssputs_r>:
 8004e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	688e      	ldr	r6, [r1, #8]
 8004e42:	4682      	mov	sl, r0
 8004e44:	429e      	cmp	r6, r3
 8004e46:	460c      	mov	r4, r1
 8004e48:	4691      	mov	r9, r2
 8004e4a:	4698      	mov	r8, r3
 8004e4c:	d835      	bhi.n	8004eba <__ssputs_r+0x7e>
 8004e4e:	898a      	ldrh	r2, [r1, #12]
 8004e50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e54:	d031      	beq.n	8004eba <__ssputs_r+0x7e>
 8004e56:	2302      	movs	r3, #2
 8004e58:	6825      	ldr	r5, [r4, #0]
 8004e5a:	6909      	ldr	r1, [r1, #16]
 8004e5c:	1a6f      	subs	r7, r5, r1
 8004e5e:	6965      	ldr	r5, [r4, #20]
 8004e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e64:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e68:	f108 0301 	add.w	r3, r8, #1
 8004e6c:	443b      	add	r3, r7
 8004e6e:	429d      	cmp	r5, r3
 8004e70:	bf38      	it	cc
 8004e72:	461d      	movcc	r5, r3
 8004e74:	0553      	lsls	r3, r2, #21
 8004e76:	d531      	bpl.n	8004edc <__ssputs_r+0xa0>
 8004e78:	4629      	mov	r1, r5
 8004e7a:	f000 fb3b 	bl	80054f4 <_malloc_r>
 8004e7e:	4606      	mov	r6, r0
 8004e80:	b950      	cbnz	r0, 8004e98 <__ssputs_r+0x5c>
 8004e82:	230c      	movs	r3, #12
 8004e84:	f8ca 3000 	str.w	r3, [sl]
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e98:	463a      	mov	r2, r7
 8004e9a:	6921      	ldr	r1, [r4, #16]
 8004e9c:	f7ff ff96 	bl	8004dcc <memcpy>
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eaa:	81a3      	strh	r3, [r4, #12]
 8004eac:	6126      	str	r6, [r4, #16]
 8004eae:	443e      	add	r6, r7
 8004eb0:	6026      	str	r6, [r4, #0]
 8004eb2:	4646      	mov	r6, r8
 8004eb4:	6165      	str	r5, [r4, #20]
 8004eb6:	1bed      	subs	r5, r5, r7
 8004eb8:	60a5      	str	r5, [r4, #8]
 8004eba:	4546      	cmp	r6, r8
 8004ebc:	bf28      	it	cs
 8004ebe:	4646      	movcs	r6, r8
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	4632      	mov	r2, r6
 8004ec4:	6820      	ldr	r0, [r4, #0]
 8004ec6:	f000 faaf 	bl	8005428 <memmove>
 8004eca:	68a3      	ldr	r3, [r4, #8]
 8004ecc:	2000      	movs	r0, #0
 8004ece:	1b9b      	subs	r3, r3, r6
 8004ed0:	60a3      	str	r3, [r4, #8]
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	441e      	add	r6, r3
 8004ed6:	6026      	str	r6, [r4, #0]
 8004ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004edc:	462a      	mov	r2, r5
 8004ede:	f000 fb67 	bl	80055b0 <_realloc_r>
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d1e1      	bne.n	8004eac <__ssputs_r+0x70>
 8004ee8:	6921      	ldr	r1, [r4, #16]
 8004eea:	4650      	mov	r0, sl
 8004eec:	f000 fab6 	bl	800545c <_free_r>
 8004ef0:	e7c7      	b.n	8004e82 <__ssputs_r+0x46>
	...

08004ef4 <_svfiprintf_r>:
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	b09d      	sub	sp, #116	; 0x74
 8004efa:	9303      	str	r3, [sp, #12]
 8004efc:	898b      	ldrh	r3, [r1, #12]
 8004efe:	4680      	mov	r8, r0
 8004f00:	061c      	lsls	r4, r3, #24
 8004f02:	460d      	mov	r5, r1
 8004f04:	4616      	mov	r6, r2
 8004f06:	d50f      	bpl.n	8004f28 <_svfiprintf_r+0x34>
 8004f08:	690b      	ldr	r3, [r1, #16]
 8004f0a:	b96b      	cbnz	r3, 8004f28 <_svfiprintf_r+0x34>
 8004f0c:	2140      	movs	r1, #64	; 0x40
 8004f0e:	f000 faf1 	bl	80054f4 <_malloc_r>
 8004f12:	6028      	str	r0, [r5, #0]
 8004f14:	6128      	str	r0, [r5, #16]
 8004f16:	b928      	cbnz	r0, 8004f24 <_svfiprintf_r+0x30>
 8004f18:	230c      	movs	r3, #12
 8004f1a:	f8c8 3000 	str.w	r3, [r8]
 8004f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f22:	e0c4      	b.n	80050ae <_svfiprintf_r+0x1ba>
 8004f24:	2340      	movs	r3, #64	; 0x40
 8004f26:	616b      	str	r3, [r5, #20]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f2c:	2320      	movs	r3, #32
 8004f2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f32:	2330      	movs	r3, #48	; 0x30
 8004f34:	f04f 0b01 	mov.w	fp, #1
 8004f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f3c:	4637      	mov	r7, r6
 8004f3e:	463c      	mov	r4, r7
 8004f40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d13c      	bne.n	8004fc2 <_svfiprintf_r+0xce>
 8004f48:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f4c:	d00b      	beq.n	8004f66 <_svfiprintf_r+0x72>
 8004f4e:	4653      	mov	r3, sl
 8004f50:	4632      	mov	r2, r6
 8004f52:	4629      	mov	r1, r5
 8004f54:	4640      	mov	r0, r8
 8004f56:	f7ff ff71 	bl	8004e3c <__ssputs_r>
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	f000 80a2 	beq.w	80050a4 <_svfiprintf_r+0x1b0>
 8004f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f62:	4453      	add	r3, sl
 8004f64:	9309      	str	r3, [sp, #36]	; 0x24
 8004f66:	783b      	ldrb	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 809b 	beq.w	80050a4 <_svfiprintf_r+0x1b0>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f04f 32ff 	mov.w	r2, #4294967295
 8004f74:	9304      	str	r3, [sp, #16]
 8004f76:	9307      	str	r3, [sp, #28]
 8004f78:	9205      	str	r2, [sp, #20]
 8004f7a:	9306      	str	r3, [sp, #24]
 8004f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f80:	931a      	str	r3, [sp, #104]	; 0x68
 8004f82:	2205      	movs	r2, #5
 8004f84:	7821      	ldrb	r1, [r4, #0]
 8004f86:	4850      	ldr	r0, [pc, #320]	; (80050c8 <_svfiprintf_r+0x1d4>)
 8004f88:	f000 fa40 	bl	800540c <memchr>
 8004f8c:	1c67      	adds	r7, r4, #1
 8004f8e:	9b04      	ldr	r3, [sp, #16]
 8004f90:	b9d8      	cbnz	r0, 8004fca <_svfiprintf_r+0xd6>
 8004f92:	06d9      	lsls	r1, r3, #27
 8004f94:	bf44      	itt	mi
 8004f96:	2220      	movmi	r2, #32
 8004f98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f9c:	071a      	lsls	r2, r3, #28
 8004f9e:	bf44      	itt	mi
 8004fa0:	222b      	movmi	r2, #43	; 0x2b
 8004fa2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fa6:	7822      	ldrb	r2, [r4, #0]
 8004fa8:	2a2a      	cmp	r2, #42	; 0x2a
 8004faa:	d016      	beq.n	8004fda <_svfiprintf_r+0xe6>
 8004fac:	2100      	movs	r1, #0
 8004fae:	200a      	movs	r0, #10
 8004fb0:	9a07      	ldr	r2, [sp, #28]
 8004fb2:	4627      	mov	r7, r4
 8004fb4:	783b      	ldrb	r3, [r7, #0]
 8004fb6:	3401      	adds	r4, #1
 8004fb8:	3b30      	subs	r3, #48	; 0x30
 8004fba:	2b09      	cmp	r3, #9
 8004fbc:	d950      	bls.n	8005060 <_svfiprintf_r+0x16c>
 8004fbe:	b1c9      	cbz	r1, 8004ff4 <_svfiprintf_r+0x100>
 8004fc0:	e011      	b.n	8004fe6 <_svfiprintf_r+0xf2>
 8004fc2:	2b25      	cmp	r3, #37	; 0x25
 8004fc4:	d0c0      	beq.n	8004f48 <_svfiprintf_r+0x54>
 8004fc6:	4627      	mov	r7, r4
 8004fc8:	e7b9      	b.n	8004f3e <_svfiprintf_r+0x4a>
 8004fca:	4a3f      	ldr	r2, [pc, #252]	; (80050c8 <_svfiprintf_r+0x1d4>)
 8004fcc:	463c      	mov	r4, r7
 8004fce:	1a80      	subs	r0, r0, r2
 8004fd0:	fa0b f000 	lsl.w	r0, fp, r0
 8004fd4:	4318      	orrs	r0, r3
 8004fd6:	9004      	str	r0, [sp, #16]
 8004fd8:	e7d3      	b.n	8004f82 <_svfiprintf_r+0x8e>
 8004fda:	9a03      	ldr	r2, [sp, #12]
 8004fdc:	1d11      	adds	r1, r2, #4
 8004fde:	6812      	ldr	r2, [r2, #0]
 8004fe0:	9103      	str	r1, [sp, #12]
 8004fe2:	2a00      	cmp	r2, #0
 8004fe4:	db01      	blt.n	8004fea <_svfiprintf_r+0xf6>
 8004fe6:	9207      	str	r2, [sp, #28]
 8004fe8:	e004      	b.n	8004ff4 <_svfiprintf_r+0x100>
 8004fea:	4252      	negs	r2, r2
 8004fec:	f043 0302 	orr.w	r3, r3, #2
 8004ff0:	9207      	str	r2, [sp, #28]
 8004ff2:	9304      	str	r3, [sp, #16]
 8004ff4:	783b      	ldrb	r3, [r7, #0]
 8004ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ff8:	d10d      	bne.n	8005016 <_svfiprintf_r+0x122>
 8004ffa:	787b      	ldrb	r3, [r7, #1]
 8004ffc:	1c79      	adds	r1, r7, #1
 8004ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8005000:	d132      	bne.n	8005068 <_svfiprintf_r+0x174>
 8005002:	9b03      	ldr	r3, [sp, #12]
 8005004:	3702      	adds	r7, #2
 8005006:	1d1a      	adds	r2, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	9203      	str	r2, [sp, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	bfb8      	it	lt
 8005010:	f04f 33ff 	movlt.w	r3, #4294967295
 8005014:	9305      	str	r3, [sp, #20]
 8005016:	4c2d      	ldr	r4, [pc, #180]	; (80050cc <_svfiprintf_r+0x1d8>)
 8005018:	2203      	movs	r2, #3
 800501a:	7839      	ldrb	r1, [r7, #0]
 800501c:	4620      	mov	r0, r4
 800501e:	f000 f9f5 	bl	800540c <memchr>
 8005022:	b138      	cbz	r0, 8005034 <_svfiprintf_r+0x140>
 8005024:	2340      	movs	r3, #64	; 0x40
 8005026:	1b00      	subs	r0, r0, r4
 8005028:	fa03 f000 	lsl.w	r0, r3, r0
 800502c:	9b04      	ldr	r3, [sp, #16]
 800502e:	3701      	adds	r7, #1
 8005030:	4303      	orrs	r3, r0
 8005032:	9304      	str	r3, [sp, #16]
 8005034:	7839      	ldrb	r1, [r7, #0]
 8005036:	2206      	movs	r2, #6
 8005038:	4825      	ldr	r0, [pc, #148]	; (80050d0 <_svfiprintf_r+0x1dc>)
 800503a:	1c7e      	adds	r6, r7, #1
 800503c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005040:	f000 f9e4 	bl	800540c <memchr>
 8005044:	2800      	cmp	r0, #0
 8005046:	d035      	beq.n	80050b4 <_svfiprintf_r+0x1c0>
 8005048:	4b22      	ldr	r3, [pc, #136]	; (80050d4 <_svfiprintf_r+0x1e0>)
 800504a:	b9fb      	cbnz	r3, 800508c <_svfiprintf_r+0x198>
 800504c:	9b03      	ldr	r3, [sp, #12]
 800504e:	3307      	adds	r3, #7
 8005050:	f023 0307 	bic.w	r3, r3, #7
 8005054:	3308      	adds	r3, #8
 8005056:	9303      	str	r3, [sp, #12]
 8005058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800505a:	444b      	add	r3, r9
 800505c:	9309      	str	r3, [sp, #36]	; 0x24
 800505e:	e76d      	b.n	8004f3c <_svfiprintf_r+0x48>
 8005060:	fb00 3202 	mla	r2, r0, r2, r3
 8005064:	2101      	movs	r1, #1
 8005066:	e7a4      	b.n	8004fb2 <_svfiprintf_r+0xbe>
 8005068:	2300      	movs	r3, #0
 800506a:	240a      	movs	r4, #10
 800506c:	4618      	mov	r0, r3
 800506e:	9305      	str	r3, [sp, #20]
 8005070:	460f      	mov	r7, r1
 8005072:	783a      	ldrb	r2, [r7, #0]
 8005074:	3101      	adds	r1, #1
 8005076:	3a30      	subs	r2, #48	; 0x30
 8005078:	2a09      	cmp	r2, #9
 800507a:	d903      	bls.n	8005084 <_svfiprintf_r+0x190>
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0ca      	beq.n	8005016 <_svfiprintf_r+0x122>
 8005080:	9005      	str	r0, [sp, #20]
 8005082:	e7c8      	b.n	8005016 <_svfiprintf_r+0x122>
 8005084:	fb04 2000 	mla	r0, r4, r0, r2
 8005088:	2301      	movs	r3, #1
 800508a:	e7f1      	b.n	8005070 <_svfiprintf_r+0x17c>
 800508c:	ab03      	add	r3, sp, #12
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	462a      	mov	r2, r5
 8005092:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <_svfiprintf_r+0x1e4>)
 8005094:	a904      	add	r1, sp, #16
 8005096:	4640      	mov	r0, r8
 8005098:	f3af 8000 	nop.w
 800509c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050a0:	4681      	mov	r9, r0
 80050a2:	d1d9      	bne.n	8005058 <_svfiprintf_r+0x164>
 80050a4:	89ab      	ldrh	r3, [r5, #12]
 80050a6:	065b      	lsls	r3, r3, #25
 80050a8:	f53f af39 	bmi.w	8004f1e <_svfiprintf_r+0x2a>
 80050ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ae:	b01d      	add	sp, #116	; 0x74
 80050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b4:	ab03      	add	r3, sp, #12
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	462a      	mov	r2, r5
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <_svfiprintf_r+0x1e4>)
 80050bc:	a904      	add	r1, sp, #16
 80050be:	4640      	mov	r0, r8
 80050c0:	f000 f884 	bl	80051cc <_printf_i>
 80050c4:	e7ea      	b.n	800509c <_svfiprintf_r+0x1a8>
 80050c6:	bf00      	nop
 80050c8:	080056f8 	.word	0x080056f8
 80050cc:	080056fe 	.word	0x080056fe
 80050d0:	08005702 	.word	0x08005702
 80050d4:	00000000 	.word	0x00000000
 80050d8:	08004e3d 	.word	0x08004e3d

080050dc <_printf_common>:
 80050dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e0:	4691      	mov	r9, r2
 80050e2:	461f      	mov	r7, r3
 80050e4:	688a      	ldr	r2, [r1, #8]
 80050e6:	690b      	ldr	r3, [r1, #16]
 80050e8:	4606      	mov	r6, r0
 80050ea:	4293      	cmp	r3, r2
 80050ec:	bfb8      	it	lt
 80050ee:	4613      	movlt	r3, r2
 80050f0:	f8c9 3000 	str.w	r3, [r9]
 80050f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050f8:	460c      	mov	r4, r1
 80050fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050fe:	b112      	cbz	r2, 8005106 <_printf_common+0x2a>
 8005100:	3301      	adds	r3, #1
 8005102:	f8c9 3000 	str.w	r3, [r9]
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	0699      	lsls	r1, r3, #26
 800510a:	bf42      	ittt	mi
 800510c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005110:	3302      	addmi	r3, #2
 8005112:	f8c9 3000 	strmi.w	r3, [r9]
 8005116:	6825      	ldr	r5, [r4, #0]
 8005118:	f015 0506 	ands.w	r5, r5, #6
 800511c:	d107      	bne.n	800512e <_printf_common+0x52>
 800511e:	f104 0a19 	add.w	sl, r4, #25
 8005122:	68e3      	ldr	r3, [r4, #12]
 8005124:	f8d9 2000 	ldr.w	r2, [r9]
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	429d      	cmp	r5, r3
 800512c:	db2a      	blt.n	8005184 <_printf_common+0xa8>
 800512e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005132:	6822      	ldr	r2, [r4, #0]
 8005134:	3300      	adds	r3, #0
 8005136:	bf18      	it	ne
 8005138:	2301      	movne	r3, #1
 800513a:	0692      	lsls	r2, r2, #26
 800513c:	d42f      	bmi.n	800519e <_printf_common+0xc2>
 800513e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005142:	4639      	mov	r1, r7
 8005144:	4630      	mov	r0, r6
 8005146:	47c0      	blx	r8
 8005148:	3001      	adds	r0, #1
 800514a:	d022      	beq.n	8005192 <_printf_common+0xb6>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	68e5      	ldr	r5, [r4, #12]
 8005150:	f003 0306 	and.w	r3, r3, #6
 8005154:	2b04      	cmp	r3, #4
 8005156:	bf18      	it	ne
 8005158:	2500      	movne	r5, #0
 800515a:	f8d9 2000 	ldr.w	r2, [r9]
 800515e:	f04f 0900 	mov.w	r9, #0
 8005162:	bf08      	it	eq
 8005164:	1aad      	subeq	r5, r5, r2
 8005166:	68a3      	ldr	r3, [r4, #8]
 8005168:	6922      	ldr	r2, [r4, #16]
 800516a:	bf08      	it	eq
 800516c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005170:	4293      	cmp	r3, r2
 8005172:	bfc4      	itt	gt
 8005174:	1a9b      	subgt	r3, r3, r2
 8005176:	18ed      	addgt	r5, r5, r3
 8005178:	341a      	adds	r4, #26
 800517a:	454d      	cmp	r5, r9
 800517c:	d11b      	bne.n	80051b6 <_printf_common+0xda>
 800517e:	2000      	movs	r0, #0
 8005180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005184:	2301      	movs	r3, #1
 8005186:	4652      	mov	r2, sl
 8005188:	4639      	mov	r1, r7
 800518a:	4630      	mov	r0, r6
 800518c:	47c0      	blx	r8
 800518e:	3001      	adds	r0, #1
 8005190:	d103      	bne.n	800519a <_printf_common+0xbe>
 8005192:	f04f 30ff 	mov.w	r0, #4294967295
 8005196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800519a:	3501      	adds	r5, #1
 800519c:	e7c1      	b.n	8005122 <_printf_common+0x46>
 800519e:	2030      	movs	r0, #48	; 0x30
 80051a0:	18e1      	adds	r1, r4, r3
 80051a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051ac:	4422      	add	r2, r4
 80051ae:	3302      	adds	r3, #2
 80051b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051b4:	e7c3      	b.n	800513e <_printf_common+0x62>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4622      	mov	r2, r4
 80051ba:	4639      	mov	r1, r7
 80051bc:	4630      	mov	r0, r6
 80051be:	47c0      	blx	r8
 80051c0:	3001      	adds	r0, #1
 80051c2:	d0e6      	beq.n	8005192 <_printf_common+0xb6>
 80051c4:	f109 0901 	add.w	r9, r9, #1
 80051c8:	e7d7      	b.n	800517a <_printf_common+0x9e>
	...

080051cc <_printf_i>:
 80051cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051d0:	4617      	mov	r7, r2
 80051d2:	7e0a      	ldrb	r2, [r1, #24]
 80051d4:	b085      	sub	sp, #20
 80051d6:	2a6e      	cmp	r2, #110	; 0x6e
 80051d8:	4698      	mov	r8, r3
 80051da:	4606      	mov	r6, r0
 80051dc:	460c      	mov	r4, r1
 80051de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051e0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80051e4:	f000 80bc 	beq.w	8005360 <_printf_i+0x194>
 80051e8:	d81a      	bhi.n	8005220 <_printf_i+0x54>
 80051ea:	2a63      	cmp	r2, #99	; 0x63
 80051ec:	d02e      	beq.n	800524c <_printf_i+0x80>
 80051ee:	d80a      	bhi.n	8005206 <_printf_i+0x3a>
 80051f0:	2a00      	cmp	r2, #0
 80051f2:	f000 80c8 	beq.w	8005386 <_printf_i+0x1ba>
 80051f6:	2a58      	cmp	r2, #88	; 0x58
 80051f8:	f000 808a 	beq.w	8005310 <_printf_i+0x144>
 80051fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005200:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005204:	e02a      	b.n	800525c <_printf_i+0x90>
 8005206:	2a64      	cmp	r2, #100	; 0x64
 8005208:	d001      	beq.n	800520e <_printf_i+0x42>
 800520a:	2a69      	cmp	r2, #105	; 0x69
 800520c:	d1f6      	bne.n	80051fc <_printf_i+0x30>
 800520e:	6821      	ldr	r1, [r4, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005216:	d023      	beq.n	8005260 <_printf_i+0x94>
 8005218:	1d11      	adds	r1, r2, #4
 800521a:	6019      	str	r1, [r3, #0]
 800521c:	6813      	ldr	r3, [r2, #0]
 800521e:	e027      	b.n	8005270 <_printf_i+0xa4>
 8005220:	2a73      	cmp	r2, #115	; 0x73
 8005222:	f000 80b4 	beq.w	800538e <_printf_i+0x1c2>
 8005226:	d808      	bhi.n	800523a <_printf_i+0x6e>
 8005228:	2a6f      	cmp	r2, #111	; 0x6f
 800522a:	d02a      	beq.n	8005282 <_printf_i+0xb6>
 800522c:	2a70      	cmp	r2, #112	; 0x70
 800522e:	d1e5      	bne.n	80051fc <_printf_i+0x30>
 8005230:	680a      	ldr	r2, [r1, #0]
 8005232:	f042 0220 	orr.w	r2, r2, #32
 8005236:	600a      	str	r2, [r1, #0]
 8005238:	e003      	b.n	8005242 <_printf_i+0x76>
 800523a:	2a75      	cmp	r2, #117	; 0x75
 800523c:	d021      	beq.n	8005282 <_printf_i+0xb6>
 800523e:	2a78      	cmp	r2, #120	; 0x78
 8005240:	d1dc      	bne.n	80051fc <_printf_i+0x30>
 8005242:	2278      	movs	r2, #120	; 0x78
 8005244:	496f      	ldr	r1, [pc, #444]	; (8005404 <_printf_i+0x238>)
 8005246:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800524a:	e064      	b.n	8005316 <_printf_i+0x14a>
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005252:	1d11      	adds	r1, r2, #4
 8005254:	6019      	str	r1, [r3, #0]
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800525c:	2301      	movs	r3, #1
 800525e:	e0a3      	b.n	80053a8 <_printf_i+0x1dc>
 8005260:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005264:	f102 0104 	add.w	r1, r2, #4
 8005268:	6019      	str	r1, [r3, #0]
 800526a:	d0d7      	beq.n	800521c <_printf_i+0x50>
 800526c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005270:	2b00      	cmp	r3, #0
 8005272:	da03      	bge.n	800527c <_printf_i+0xb0>
 8005274:	222d      	movs	r2, #45	; 0x2d
 8005276:	425b      	negs	r3, r3
 8005278:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800527c:	4962      	ldr	r1, [pc, #392]	; (8005408 <_printf_i+0x23c>)
 800527e:	220a      	movs	r2, #10
 8005280:	e017      	b.n	80052b2 <_printf_i+0xe6>
 8005282:	6820      	ldr	r0, [r4, #0]
 8005284:	6819      	ldr	r1, [r3, #0]
 8005286:	f010 0f80 	tst.w	r0, #128	; 0x80
 800528a:	d003      	beq.n	8005294 <_printf_i+0xc8>
 800528c:	1d08      	adds	r0, r1, #4
 800528e:	6018      	str	r0, [r3, #0]
 8005290:	680b      	ldr	r3, [r1, #0]
 8005292:	e006      	b.n	80052a2 <_printf_i+0xd6>
 8005294:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005298:	f101 0004 	add.w	r0, r1, #4
 800529c:	6018      	str	r0, [r3, #0]
 800529e:	d0f7      	beq.n	8005290 <_printf_i+0xc4>
 80052a0:	880b      	ldrh	r3, [r1, #0]
 80052a2:	2a6f      	cmp	r2, #111	; 0x6f
 80052a4:	bf14      	ite	ne
 80052a6:	220a      	movne	r2, #10
 80052a8:	2208      	moveq	r2, #8
 80052aa:	4957      	ldr	r1, [pc, #348]	; (8005408 <_printf_i+0x23c>)
 80052ac:	2000      	movs	r0, #0
 80052ae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80052b2:	6865      	ldr	r5, [r4, #4]
 80052b4:	2d00      	cmp	r5, #0
 80052b6:	60a5      	str	r5, [r4, #8]
 80052b8:	f2c0 809c 	blt.w	80053f4 <_printf_i+0x228>
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	f020 0004 	bic.w	r0, r0, #4
 80052c2:	6020      	str	r0, [r4, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d13f      	bne.n	8005348 <_printf_i+0x17c>
 80052c8:	2d00      	cmp	r5, #0
 80052ca:	f040 8095 	bne.w	80053f8 <_printf_i+0x22c>
 80052ce:	4675      	mov	r5, lr
 80052d0:	2a08      	cmp	r2, #8
 80052d2:	d10b      	bne.n	80052ec <_printf_i+0x120>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	07da      	lsls	r2, r3, #31
 80052d8:	d508      	bpl.n	80052ec <_printf_i+0x120>
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	6862      	ldr	r2, [r4, #4]
 80052de:	429a      	cmp	r2, r3
 80052e0:	bfde      	ittt	le
 80052e2:	2330      	movle	r3, #48	; 0x30
 80052e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052ec:	ebae 0305 	sub.w	r3, lr, r5
 80052f0:	6123      	str	r3, [r4, #16]
 80052f2:	f8cd 8000 	str.w	r8, [sp]
 80052f6:	463b      	mov	r3, r7
 80052f8:	aa03      	add	r2, sp, #12
 80052fa:	4621      	mov	r1, r4
 80052fc:	4630      	mov	r0, r6
 80052fe:	f7ff feed 	bl	80050dc <_printf_common>
 8005302:	3001      	adds	r0, #1
 8005304:	d155      	bne.n	80053b2 <_printf_i+0x1e6>
 8005306:	f04f 30ff 	mov.w	r0, #4294967295
 800530a:	b005      	add	sp, #20
 800530c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005310:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005314:	493c      	ldr	r1, [pc, #240]	; (8005408 <_printf_i+0x23c>)
 8005316:	6822      	ldr	r2, [r4, #0]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800531e:	f100 0504 	add.w	r5, r0, #4
 8005322:	601d      	str	r5, [r3, #0]
 8005324:	d001      	beq.n	800532a <_printf_i+0x15e>
 8005326:	6803      	ldr	r3, [r0, #0]
 8005328:	e002      	b.n	8005330 <_printf_i+0x164>
 800532a:	0655      	lsls	r5, r2, #25
 800532c:	d5fb      	bpl.n	8005326 <_printf_i+0x15a>
 800532e:	8803      	ldrh	r3, [r0, #0]
 8005330:	07d0      	lsls	r0, r2, #31
 8005332:	bf44      	itt	mi
 8005334:	f042 0220 	orrmi.w	r2, r2, #32
 8005338:	6022      	strmi	r2, [r4, #0]
 800533a:	b91b      	cbnz	r3, 8005344 <_printf_i+0x178>
 800533c:	6822      	ldr	r2, [r4, #0]
 800533e:	f022 0220 	bic.w	r2, r2, #32
 8005342:	6022      	str	r2, [r4, #0]
 8005344:	2210      	movs	r2, #16
 8005346:	e7b1      	b.n	80052ac <_printf_i+0xe0>
 8005348:	4675      	mov	r5, lr
 800534a:	fbb3 f0f2 	udiv	r0, r3, r2
 800534e:	fb02 3310 	mls	r3, r2, r0, r3
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005358:	4603      	mov	r3, r0
 800535a:	2800      	cmp	r0, #0
 800535c:	d1f5      	bne.n	800534a <_printf_i+0x17e>
 800535e:	e7b7      	b.n	80052d0 <_printf_i+0x104>
 8005360:	6808      	ldr	r0, [r1, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005368:	6949      	ldr	r1, [r1, #20]
 800536a:	d004      	beq.n	8005376 <_printf_i+0x1aa>
 800536c:	1d10      	adds	r0, r2, #4
 800536e:	6018      	str	r0, [r3, #0]
 8005370:	6813      	ldr	r3, [r2, #0]
 8005372:	6019      	str	r1, [r3, #0]
 8005374:	e007      	b.n	8005386 <_printf_i+0x1ba>
 8005376:	f010 0f40 	tst.w	r0, #64	; 0x40
 800537a:	f102 0004 	add.w	r0, r2, #4
 800537e:	6018      	str	r0, [r3, #0]
 8005380:	6813      	ldr	r3, [r2, #0]
 8005382:	d0f6      	beq.n	8005372 <_printf_i+0x1a6>
 8005384:	8019      	strh	r1, [r3, #0]
 8005386:	2300      	movs	r3, #0
 8005388:	4675      	mov	r5, lr
 800538a:	6123      	str	r3, [r4, #16]
 800538c:	e7b1      	b.n	80052f2 <_printf_i+0x126>
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	1d11      	adds	r1, r2, #4
 8005392:	6019      	str	r1, [r3, #0]
 8005394:	6815      	ldr	r5, [r2, #0]
 8005396:	2100      	movs	r1, #0
 8005398:	6862      	ldr	r2, [r4, #4]
 800539a:	4628      	mov	r0, r5
 800539c:	f000 f836 	bl	800540c <memchr>
 80053a0:	b108      	cbz	r0, 80053a6 <_printf_i+0x1da>
 80053a2:	1b40      	subs	r0, r0, r5
 80053a4:	6060      	str	r0, [r4, #4]
 80053a6:	6863      	ldr	r3, [r4, #4]
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	2300      	movs	r3, #0
 80053ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b0:	e79f      	b.n	80052f2 <_printf_i+0x126>
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	462a      	mov	r2, r5
 80053b6:	4639      	mov	r1, r7
 80053b8:	4630      	mov	r0, r6
 80053ba:	47c0      	blx	r8
 80053bc:	3001      	adds	r0, #1
 80053be:	d0a2      	beq.n	8005306 <_printf_i+0x13a>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	079b      	lsls	r3, r3, #30
 80053c4:	d507      	bpl.n	80053d6 <_printf_i+0x20a>
 80053c6:	2500      	movs	r5, #0
 80053c8:	f104 0919 	add.w	r9, r4, #25
 80053cc:	68e3      	ldr	r3, [r4, #12]
 80053ce:	9a03      	ldr	r2, [sp, #12]
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	429d      	cmp	r5, r3
 80053d4:	db05      	blt.n	80053e2 <_printf_i+0x216>
 80053d6:	68e0      	ldr	r0, [r4, #12]
 80053d8:	9b03      	ldr	r3, [sp, #12]
 80053da:	4298      	cmp	r0, r3
 80053dc:	bfb8      	it	lt
 80053de:	4618      	movlt	r0, r3
 80053e0:	e793      	b.n	800530a <_printf_i+0x13e>
 80053e2:	2301      	movs	r3, #1
 80053e4:	464a      	mov	r2, r9
 80053e6:	4639      	mov	r1, r7
 80053e8:	4630      	mov	r0, r6
 80053ea:	47c0      	blx	r8
 80053ec:	3001      	adds	r0, #1
 80053ee:	d08a      	beq.n	8005306 <_printf_i+0x13a>
 80053f0:	3501      	adds	r5, #1
 80053f2:	e7eb      	b.n	80053cc <_printf_i+0x200>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1a7      	bne.n	8005348 <_printf_i+0x17c>
 80053f8:	780b      	ldrb	r3, [r1, #0]
 80053fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005402:	e765      	b.n	80052d0 <_printf_i+0x104>
 8005404:	0800571a 	.word	0x0800571a
 8005408:	08005709 	.word	0x08005709

0800540c <memchr>:
 800540c:	b510      	push	{r4, lr}
 800540e:	b2c9      	uxtb	r1, r1
 8005410:	4402      	add	r2, r0
 8005412:	4290      	cmp	r0, r2
 8005414:	4603      	mov	r3, r0
 8005416:	d101      	bne.n	800541c <memchr+0x10>
 8005418:	2000      	movs	r0, #0
 800541a:	bd10      	pop	{r4, pc}
 800541c:	781c      	ldrb	r4, [r3, #0]
 800541e:	3001      	adds	r0, #1
 8005420:	428c      	cmp	r4, r1
 8005422:	d1f6      	bne.n	8005412 <memchr+0x6>
 8005424:	4618      	mov	r0, r3
 8005426:	bd10      	pop	{r4, pc}

08005428 <memmove>:
 8005428:	4288      	cmp	r0, r1
 800542a:	b510      	push	{r4, lr}
 800542c:	eb01 0302 	add.w	r3, r1, r2
 8005430:	d803      	bhi.n	800543a <memmove+0x12>
 8005432:	1e42      	subs	r2, r0, #1
 8005434:	4299      	cmp	r1, r3
 8005436:	d10c      	bne.n	8005452 <memmove+0x2a>
 8005438:	bd10      	pop	{r4, pc}
 800543a:	4298      	cmp	r0, r3
 800543c:	d2f9      	bcs.n	8005432 <memmove+0xa>
 800543e:	1881      	adds	r1, r0, r2
 8005440:	1ad2      	subs	r2, r2, r3
 8005442:	42d3      	cmn	r3, r2
 8005444:	d100      	bne.n	8005448 <memmove+0x20>
 8005446:	bd10      	pop	{r4, pc}
 8005448:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800544c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005450:	e7f7      	b.n	8005442 <memmove+0x1a>
 8005452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005456:	f802 4f01 	strb.w	r4, [r2, #1]!
 800545a:	e7eb      	b.n	8005434 <memmove+0xc>

0800545c <_free_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4605      	mov	r5, r0
 8005460:	2900      	cmp	r1, #0
 8005462:	d043      	beq.n	80054ec <_free_r+0x90>
 8005464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005468:	1f0c      	subs	r4, r1, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	bfb8      	it	lt
 800546e:	18e4      	addlt	r4, r4, r3
 8005470:	f000 f8d4 	bl	800561c <__malloc_lock>
 8005474:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <_free_r+0x94>)
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	4610      	mov	r0, r2
 800547a:	b933      	cbnz	r3, 800548a <_free_r+0x2e>
 800547c:	6063      	str	r3, [r4, #4]
 800547e:	6014      	str	r4, [r2, #0]
 8005480:	4628      	mov	r0, r5
 8005482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005486:	f000 b8ca 	b.w	800561e <__malloc_unlock>
 800548a:	42a3      	cmp	r3, r4
 800548c:	d90b      	bls.n	80054a6 <_free_r+0x4a>
 800548e:	6821      	ldr	r1, [r4, #0]
 8005490:	1862      	adds	r2, r4, r1
 8005492:	4293      	cmp	r3, r2
 8005494:	bf01      	itttt	eq
 8005496:	681a      	ldreq	r2, [r3, #0]
 8005498:	685b      	ldreq	r3, [r3, #4]
 800549a:	1852      	addeq	r2, r2, r1
 800549c:	6022      	streq	r2, [r4, #0]
 800549e:	6063      	str	r3, [r4, #4]
 80054a0:	6004      	str	r4, [r0, #0]
 80054a2:	e7ed      	b.n	8005480 <_free_r+0x24>
 80054a4:	4613      	mov	r3, r2
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	b10a      	cbz	r2, 80054ae <_free_r+0x52>
 80054aa:	42a2      	cmp	r2, r4
 80054ac:	d9fa      	bls.n	80054a4 <_free_r+0x48>
 80054ae:	6819      	ldr	r1, [r3, #0]
 80054b0:	1858      	adds	r0, r3, r1
 80054b2:	42a0      	cmp	r0, r4
 80054b4:	d10b      	bne.n	80054ce <_free_r+0x72>
 80054b6:	6820      	ldr	r0, [r4, #0]
 80054b8:	4401      	add	r1, r0
 80054ba:	1858      	adds	r0, r3, r1
 80054bc:	4282      	cmp	r2, r0
 80054be:	6019      	str	r1, [r3, #0]
 80054c0:	d1de      	bne.n	8005480 <_free_r+0x24>
 80054c2:	6810      	ldr	r0, [r2, #0]
 80054c4:	6852      	ldr	r2, [r2, #4]
 80054c6:	4401      	add	r1, r0
 80054c8:	6019      	str	r1, [r3, #0]
 80054ca:	605a      	str	r2, [r3, #4]
 80054cc:	e7d8      	b.n	8005480 <_free_r+0x24>
 80054ce:	d902      	bls.n	80054d6 <_free_r+0x7a>
 80054d0:	230c      	movs	r3, #12
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	e7d4      	b.n	8005480 <_free_r+0x24>
 80054d6:	6820      	ldr	r0, [r4, #0]
 80054d8:	1821      	adds	r1, r4, r0
 80054da:	428a      	cmp	r2, r1
 80054dc:	bf01      	itttt	eq
 80054de:	6811      	ldreq	r1, [r2, #0]
 80054e0:	6852      	ldreq	r2, [r2, #4]
 80054e2:	1809      	addeq	r1, r1, r0
 80054e4:	6021      	streq	r1, [r4, #0]
 80054e6:	6062      	str	r2, [r4, #4]
 80054e8:	605c      	str	r4, [r3, #4]
 80054ea:	e7c9      	b.n	8005480 <_free_r+0x24>
 80054ec:	bd38      	pop	{r3, r4, r5, pc}
 80054ee:	bf00      	nop
 80054f0:	20002b34 	.word	0x20002b34

080054f4 <_malloc_r>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	1ccd      	adds	r5, r1, #3
 80054f8:	f025 0503 	bic.w	r5, r5, #3
 80054fc:	3508      	adds	r5, #8
 80054fe:	2d0c      	cmp	r5, #12
 8005500:	bf38      	it	cc
 8005502:	250c      	movcc	r5, #12
 8005504:	2d00      	cmp	r5, #0
 8005506:	4606      	mov	r6, r0
 8005508:	db01      	blt.n	800550e <_malloc_r+0x1a>
 800550a:	42a9      	cmp	r1, r5
 800550c:	d903      	bls.n	8005516 <_malloc_r+0x22>
 800550e:	230c      	movs	r3, #12
 8005510:	6033      	str	r3, [r6, #0]
 8005512:	2000      	movs	r0, #0
 8005514:	bd70      	pop	{r4, r5, r6, pc}
 8005516:	f000 f881 	bl	800561c <__malloc_lock>
 800551a:	4a23      	ldr	r2, [pc, #140]	; (80055a8 <_malloc_r+0xb4>)
 800551c:	6814      	ldr	r4, [r2, #0]
 800551e:	4621      	mov	r1, r4
 8005520:	b991      	cbnz	r1, 8005548 <_malloc_r+0x54>
 8005522:	4c22      	ldr	r4, [pc, #136]	; (80055ac <_malloc_r+0xb8>)
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	b91b      	cbnz	r3, 8005530 <_malloc_r+0x3c>
 8005528:	4630      	mov	r0, r6
 800552a:	f000 f867 	bl	80055fc <_sbrk_r>
 800552e:	6020      	str	r0, [r4, #0]
 8005530:	4629      	mov	r1, r5
 8005532:	4630      	mov	r0, r6
 8005534:	f000 f862 	bl	80055fc <_sbrk_r>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d126      	bne.n	800558a <_malloc_r+0x96>
 800553c:	230c      	movs	r3, #12
 800553e:	4630      	mov	r0, r6
 8005540:	6033      	str	r3, [r6, #0]
 8005542:	f000 f86c 	bl	800561e <__malloc_unlock>
 8005546:	e7e4      	b.n	8005512 <_malloc_r+0x1e>
 8005548:	680b      	ldr	r3, [r1, #0]
 800554a:	1b5b      	subs	r3, r3, r5
 800554c:	d41a      	bmi.n	8005584 <_malloc_r+0x90>
 800554e:	2b0b      	cmp	r3, #11
 8005550:	d90f      	bls.n	8005572 <_malloc_r+0x7e>
 8005552:	600b      	str	r3, [r1, #0]
 8005554:	18cc      	adds	r4, r1, r3
 8005556:	50cd      	str	r5, [r1, r3]
 8005558:	4630      	mov	r0, r6
 800555a:	f000 f860 	bl	800561e <__malloc_unlock>
 800555e:	f104 000b 	add.w	r0, r4, #11
 8005562:	1d23      	adds	r3, r4, #4
 8005564:	f020 0007 	bic.w	r0, r0, #7
 8005568:	1ac3      	subs	r3, r0, r3
 800556a:	d01b      	beq.n	80055a4 <_malloc_r+0xb0>
 800556c:	425a      	negs	r2, r3
 800556e:	50e2      	str	r2, [r4, r3]
 8005570:	bd70      	pop	{r4, r5, r6, pc}
 8005572:	428c      	cmp	r4, r1
 8005574:	bf0b      	itete	eq
 8005576:	6863      	ldreq	r3, [r4, #4]
 8005578:	684b      	ldrne	r3, [r1, #4]
 800557a:	6013      	streq	r3, [r2, #0]
 800557c:	6063      	strne	r3, [r4, #4]
 800557e:	bf18      	it	ne
 8005580:	460c      	movne	r4, r1
 8005582:	e7e9      	b.n	8005558 <_malloc_r+0x64>
 8005584:	460c      	mov	r4, r1
 8005586:	6849      	ldr	r1, [r1, #4]
 8005588:	e7ca      	b.n	8005520 <_malloc_r+0x2c>
 800558a:	1cc4      	adds	r4, r0, #3
 800558c:	f024 0403 	bic.w	r4, r4, #3
 8005590:	42a0      	cmp	r0, r4
 8005592:	d005      	beq.n	80055a0 <_malloc_r+0xac>
 8005594:	1a21      	subs	r1, r4, r0
 8005596:	4630      	mov	r0, r6
 8005598:	f000 f830 	bl	80055fc <_sbrk_r>
 800559c:	3001      	adds	r0, #1
 800559e:	d0cd      	beq.n	800553c <_malloc_r+0x48>
 80055a0:	6025      	str	r5, [r4, #0]
 80055a2:	e7d9      	b.n	8005558 <_malloc_r+0x64>
 80055a4:	bd70      	pop	{r4, r5, r6, pc}
 80055a6:	bf00      	nop
 80055a8:	20002b34 	.word	0x20002b34
 80055ac:	20002b38 	.word	0x20002b38

080055b0 <_realloc_r>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	4607      	mov	r7, r0
 80055b4:	4614      	mov	r4, r2
 80055b6:	460e      	mov	r6, r1
 80055b8:	b921      	cbnz	r1, 80055c4 <_realloc_r+0x14>
 80055ba:	4611      	mov	r1, r2
 80055bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055c0:	f7ff bf98 	b.w	80054f4 <_malloc_r>
 80055c4:	b922      	cbnz	r2, 80055d0 <_realloc_r+0x20>
 80055c6:	f7ff ff49 	bl	800545c <_free_r>
 80055ca:	4625      	mov	r5, r4
 80055cc:	4628      	mov	r0, r5
 80055ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d0:	f000 f826 	bl	8005620 <_malloc_usable_size_r>
 80055d4:	4284      	cmp	r4, r0
 80055d6:	d90f      	bls.n	80055f8 <_realloc_r+0x48>
 80055d8:	4621      	mov	r1, r4
 80055da:	4638      	mov	r0, r7
 80055dc:	f7ff ff8a 	bl	80054f4 <_malloc_r>
 80055e0:	4605      	mov	r5, r0
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d0f2      	beq.n	80055cc <_realloc_r+0x1c>
 80055e6:	4631      	mov	r1, r6
 80055e8:	4622      	mov	r2, r4
 80055ea:	f7ff fbef 	bl	8004dcc <memcpy>
 80055ee:	4631      	mov	r1, r6
 80055f0:	4638      	mov	r0, r7
 80055f2:	f7ff ff33 	bl	800545c <_free_r>
 80055f6:	e7e9      	b.n	80055cc <_realloc_r+0x1c>
 80055f8:	4635      	mov	r5, r6
 80055fa:	e7e7      	b.n	80055cc <_realloc_r+0x1c>

080055fc <_sbrk_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	2300      	movs	r3, #0
 8005600:	4c05      	ldr	r4, [pc, #20]	; (8005618 <_sbrk_r+0x1c>)
 8005602:	4605      	mov	r5, r0
 8005604:	4608      	mov	r0, r1
 8005606:	6023      	str	r3, [r4, #0]
 8005608:	f000 f814 	bl	8005634 <_sbrk>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d102      	bne.n	8005616 <_sbrk_r+0x1a>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	b103      	cbz	r3, 8005616 <_sbrk_r+0x1a>
 8005614:	602b      	str	r3, [r5, #0]
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	20003cc8 	.word	0x20003cc8

0800561c <__malloc_lock>:
 800561c:	4770      	bx	lr

0800561e <__malloc_unlock>:
 800561e:	4770      	bx	lr

08005620 <_malloc_usable_size_r>:
 8005620:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005624:	2800      	cmp	r0, #0
 8005626:	f1a0 0004 	sub.w	r0, r0, #4
 800562a:	bfbc      	itt	lt
 800562c:	580b      	ldrlt	r3, [r1, r0]
 800562e:	18c0      	addlt	r0, r0, r3
 8005630:	4770      	bx	lr
	...

08005634 <_sbrk>:
 8005634:	4b04      	ldr	r3, [pc, #16]	; (8005648 <_sbrk+0x14>)
 8005636:	4602      	mov	r2, r0
 8005638:	6819      	ldr	r1, [r3, #0]
 800563a:	b909      	cbnz	r1, 8005640 <_sbrk+0xc>
 800563c:	4903      	ldr	r1, [pc, #12]	; (800564c <_sbrk+0x18>)
 800563e:	6019      	str	r1, [r3, #0]
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	4402      	add	r2, r0
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	4770      	bx	lr
 8005648:	20002b3c 	.word	0x20002b3c
 800564c:	20003ccc 	.word	0x20003ccc

08005650 <_init>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr

0800565c <_fini>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr
